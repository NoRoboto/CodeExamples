// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  // Override the current require with this new one
  return newRequire;
})({332:[function(require,module,exports) {
var global = (1,eval)("this");
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = debounce;

},{}],339:[function(require,module,exports) {
// Generated by CoffeeScript 1.8.0
(function() {
  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

  floor = Math.floor, min = Math.min;


  /*
  Default comparison function to be used
   */

  defaultCmp = function(x, y) {
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  };


  /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */

  insort = function(a, x, lo, hi, cmp) {
    var mid;
    if (lo == null) {
      lo = 0;
    }
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (lo < 0) {
      throw new Error('lo must be non-negative');
    }
    if (hi == null) {
      hi = a.length;
    }
    while (lo < hi) {
      mid = floor((lo + hi) / 2);
      if (cmp(x, a[mid]) < 0) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
  };


  /*
  Push item onto heap, maintaining the heap invariant.
   */

  heappush = function(array, item, cmp) {
    if (cmp == null) {
      cmp = defaultCmp;
    }
    array.push(item);
    return _siftdown(array, 0, array.length - 1, cmp);
  };


  /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */

  heappop = function(array, cmp) {
    var lastelt, returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    lastelt = array.pop();
    if (array.length) {
      returnitem = array[0];
      array[0] = lastelt;
      _siftup(array, 0, cmp);
    } else {
      returnitem = lastelt;
    }
    return returnitem;
  };


  /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */

  heapreplace = function(array, item, cmp) {
    var returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    returnitem = array[0];
    array[0] = item;
    _siftup(array, 0, cmp);
    return returnitem;
  };


  /*
  Fast version of a heappush followed by a heappop.
   */

  heappushpop = function(array, item, cmp) {
    var _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (array.length && cmp(array[0], item) < 0) {
      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
      _siftup(array, 0, cmp);
    }
    return item;
  };


  /*
  Transform list into a heap, in-place, in O(array.length) time.
   */

  heapify = function(array, cmp) {
    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    _ref1 = (function() {
      _results1 = [];
      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).reverse();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      _results.push(_siftup(array, i, cmp));
    }
    return _results;
  };


  /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */

  updateItem = function(array, item, cmp) {
    var pos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    pos = array.indexOf(item);
    if (pos === -1) {
      return;
    }
    _siftdown(array, 0, pos, cmp);
    return _siftup(array, pos, cmp);
  };


  /*
  Find the n largest elements in a dataset.
   */

  nlargest = function(array, n, cmp) {
    var elem, result, _i, _len, _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    result = array.slice(0, n);
    if (!result.length) {
      return result;
    }
    heapify(result, cmp);
    _ref = array.slice(n);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      heappushpop(result, elem, cmp);
    }
    return result.sort(cmp).reverse();
  };


  /*
  Find the n smallest elements in a dataset.
   */

  nsmallest = function(array, n, cmp) {
    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (n * 10 <= array.length) {
      result = array.slice(0, n).sort(cmp);
      if (!result.length) {
        return result;
      }
      los = result[result.length - 1];
      _ref = array.slice(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if (cmp(elem, los) < 0) {
          insort(result, elem, 0, null, cmp);
          result.pop();
          los = result[result.length - 1];
        }
      }
      return result;
    }
    heapify(array, cmp);
    _results = [];
    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(heappop(array, cmp));
    }
    return _results;
  };

  _siftdown = function(array, startpos, pos, cmp) {
    var newitem, parent, parentpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    newitem = array[pos];
    while (pos > startpos) {
      parentpos = (pos - 1) >> 1;
      parent = array[parentpos];
      if (cmp(newitem, parent) < 0) {
        array[pos] = parent;
        pos = parentpos;
        continue;
      }
      break;
    }
    return array[pos] = newitem;
  };

  _siftup = function(array, pos, cmp) {
    var childpos, endpos, newitem, rightpos, startpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    endpos = array.length;
    startpos = pos;
    newitem = array[pos];
    childpos = 2 * pos + 1;
    while (childpos < endpos) {
      rightpos = childpos + 1;
      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
        childpos = rightpos;
      }
      array[pos] = array[childpos];
      pos = childpos;
      childpos = 2 * pos + 1;
    }
    array[pos] = newitem;
    return _siftdown(array, startpos, pos, cmp);
  };

  Heap = (function() {
    Heap.push = heappush;

    Heap.pop = heappop;

    Heap.replace = heapreplace;

    Heap.pushpop = heappushpop;

    Heap.heapify = heapify;

    Heap.updateItem = updateItem;

    Heap.nlargest = nlargest;

    Heap.nsmallest = nsmallest;

    function Heap(cmp) {
      this.cmp = cmp != null ? cmp : defaultCmp;
      this.nodes = [];
    }

    Heap.prototype.push = function(x) {
      return heappush(this.nodes, x, this.cmp);
    };

    Heap.prototype.pop = function() {
      return heappop(this.nodes, this.cmp);
    };

    Heap.prototype.peek = function() {
      return this.nodes[0];
    };

    Heap.prototype.contains = function(x) {
      return this.nodes.indexOf(x) !== -1;
    };

    Heap.prototype.replace = function(x) {
      return heapreplace(this.nodes, x, this.cmp);
    };

    Heap.prototype.pushpop = function(x) {
      return heappushpop(this.nodes, x, this.cmp);
    };

    Heap.prototype.heapify = function() {
      return heapify(this.nodes, this.cmp);
    };

    Heap.prototype.updateItem = function(x) {
      return updateItem(this.nodes, x, this.cmp);
    };

    Heap.prototype.clear = function() {
      return this.nodes = [];
    };

    Heap.prototype.empty = function() {
      return this.nodes.length === 0;
    };

    Heap.prototype.size = function() {
      return this.nodes.length;
    };

    Heap.prototype.clone = function() {
      var heap;
      heap = new Heap();
      heap.nodes = this.nodes.slice(0);
      return heap;
    };

    Heap.prototype.toArray = function() {
      return this.nodes.slice(0);
    };

    Heap.prototype.insert = Heap.prototype.push;

    Heap.prototype.top = Heap.prototype.peek;

    Heap.prototype.front = Heap.prototype.peek;

    Heap.prototype.has = Heap.prototype.contains;

    Heap.prototype.copy = Heap.prototype.clone;

    return Heap;

  })();

  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else if (typeof exports === 'object') {
      return module.exports = factory();
    } else {
      return root.Heap = factory();
    }
  })(this, function() {
    return Heap;
  });

}).call(this);

},{}],331:[function(require,module,exports) {
module.exports = require('./lib/heap');

},{"./lib/heap":339}],257:[function(require,module,exports) {
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require("lodash.debounce"), require("heap"));else if (typeof define === 'function' && define.amd) define(["lodash.debounce", "heap"], factory);else if (typeof exports === 'object') exports["cytoscape"] = factory(require("lodash.debounce"), require("heap"));else root["cytoscape"] = factory(root["lodash.debounce"], root["heap"]);
})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE_26__, __WEBPACK_EXTERNAL_MODULE_32__) {
  return (/******/function (modules) {
      // webpackBootstrap
      /******/ // The module cache
      /******/var installedModules = {};
      /******/
      /******/ // The require function
      /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) {
          /******/return installedModules[moduleId].exports;
          /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
          /******/i: moduleId,
          /******/l: false,
          /******/exports: {}
          /******/ };
        /******/
        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
      }
      /******/
      /******/
      /******/ // expose the modules object (__webpack_modules__)
      /******/__webpack_require__.m = modules;
      /******/
      /******/ // expose the module cache
      /******/__webpack_require__.c = installedModules;
      /******/
      /******/ // define getter function for harmony exports
      /******/__webpack_require__.d = function (exports, name, getter) {
        /******/if (!__webpack_require__.o(exports, name)) {
          /******/Object.defineProperty(exports, name, {
            /******/configurable: false,
            /******/enumerable: true,
            /******/get: getter
            /******/ });
          /******/
        }
        /******/
      };
      /******/
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/__webpack_require__.n = function (module) {
        /******/var getter = module && module.__esModule ?
        /******/function getDefault() {
          return module['default'];
        } :
        /******/function getModuleExports() {
          return module;
        };
        /******/__webpack_require__.d(getter, 'a', getter);
        /******/return getter;
        /******/
      };
      /******/
      /******/ // Object.prototype.hasOwnProperty.call
      /******/__webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/
      /******/ // __webpack_public_path__
      /******/__webpack_require__.p = "";
      /******/
      /******/ // Load entry module and return exports
      /******/return __webpack_require__(__webpack_require__.s = 20);
      /******/
    }(
    /************************************************************************/
    /******/[
    /* 0 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      /*global HTMLElement DocumentTouch */

      var window = __webpack_require__(3);
      var navigator = window ? window.navigator : null;
      var document = window ? window.document : null;

      var typeofstr = _typeof('');
      var typeofobj = _typeof({});
      var typeoffn = _typeof(function () {});
      var typeofhtmlele = typeof HTMLElement === 'undefined' ? 'undefined' : _typeof(HTMLElement);

      var instanceStr = function instanceStr(obj) {
        return obj && obj.instanceString && is.fn(obj.instanceString) ? obj.instanceString() : null;
      };

      var is = {
        defined: function defined(obj) {
          return obj != null; // not undefined or null
        },

        string: function string(obj) {
          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == typeofstr;
        },

        fn: function fn(obj) {
          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeoffn;
        },

        array: function array(obj) {
          return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
        },

        plainObject: function plainObject(obj) {
          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeofobj && !is.array(obj) && obj.constructor === Object;
        },

        object: function object(obj) {
          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === typeofobj;
        },

        number: function number(obj) {
          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === _typeof(1) && !isNaN(obj);
        },

        integer: function integer(obj) {
          return is.number(obj) && Math.floor(obj) === obj;
        },

        bool: function bool(obj) {
          return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === _typeof(true);
        },

        htmlElement: function htmlElement(obj) {
          if ('undefined' === typeofhtmlele) {
            return undefined;
          } else {
            return null != obj && obj instanceof HTMLElement;
          }
        },

        elementOrCollection: function elementOrCollection(obj) {
          return is.element(obj) || is.collection(obj);
        },

        element: function element(obj) {
          return instanceStr(obj) === 'collection' && obj._private.single;
        },

        collection: function collection(obj) {
          return instanceStr(obj) === 'collection' && !obj._private.single;
        },

        core: function core(obj) {
          return instanceStr(obj) === 'core';
        },

        style: function style(obj) {
          return instanceStr(obj) === 'style';
        },

        stylesheet: function stylesheet(obj) {
          return instanceStr(obj) === 'stylesheet';
        },

        event: function event(obj) {
          return instanceStr(obj) === 'event';
        },

        thread: function thread(obj) {
          return instanceStr(obj) === 'thread';
        },

        fabric: function fabric(obj) {
          return instanceStr(obj) === 'fabric';
        },

        emptyString: function emptyString(obj) {
          if (obj === undefined || obj === null) {
            // null is empty
            return true;
          } else if (obj === '' || obj.match(/^\s+$/)) {
            return true; // empty string is empty
          }

          return false; // otherwise, we don't know what we've got
        },

        nonemptyString: function nonemptyString(obj) {
          if (obj && is.string(obj) && obj !== '' && !obj.match(/^\s+$/)) {
            return true;
          }

          return false;
        },

        domElement: function domElement(obj) {
          if (typeof HTMLElement === 'undefined') {
            return false; // we're not in a browser so it doesn't matter
          } else {
            return obj instanceof HTMLElement;
          }
        },

        boundingBox: function boundingBox(obj) {
          return is.plainObject(obj) && is.number(obj.x1) && is.number(obj.x2) && is.number(obj.y1) && is.number(obj.y2);
        },

        promise: function promise(obj) {
          return is.object(obj) && is.fn(obj.then);
        },

        touch: function touch() {
          return window && ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);
        },

        gecko: function gecko() {
          return window && (typeof InstallTrigger !== 'undefined' || 'MozAppearance' in document.documentElement.style);
        },

        webkit: function webkit() {
          return window && (typeof webkitURL !== 'undefined' || 'WebkitAppearance' in document.documentElement.style);
        },

        chromium: function chromium() {
          return window && typeof chrome !== 'undefined';
        },

        khtml: function khtml() {
          return navigator && navigator.vendor.match(/kde/i); // probably a better way to detect this...
        },

        khtmlEtc: function khtmlEtc() {
          return is.khtml() || is.webkit() || is.chromium();
        },

        ms: function ms() {
          return navigator && navigator.userAgent.match(/msie|trident|edge/i); // probably a better way to detect this...
        },

        windows: function windows() {
          return navigator && navigator.appVersion.match(/Win/i);
        },

        mac: function mac() {
          return navigator && navigator.appVersion.match(/Mac/i);
        },

        linux: function linux() {
          return navigator && navigator.appVersion.match(/Linux/i);
        },

        unix: function unix() {
          return navigator && navigator.appVersion.match(/X11/i);
        }
      };

      module.exports = is;

      /***/
    },
    /* 1 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /*global console */

      var is = __webpack_require__(0);
      var math = __webpack_require__(2);

      var util = {

        MAX_INT: Number.MAX_SAFE_INTEGER || 9007199254740991,

        trueify: function trueify() {
          return true;
        },

        falsify: function falsify() {
          return false;
        },

        zeroify: function zeroify() {
          return 0;
        },

        noop: function noop() {},

        error: function error(msg) {
          /* eslint-disable */
          if (console.error) {
            console.error.apply(console, arguments);

            if (console.trace) {
              console.trace();
            }
          } else {
            console.log.apply(console, arguments);

            if (console.trace) {
              console.trace();
            }
          }
          /* eslint-enable */
        },

        clone: function clone(obj) {
          return this.extend({}, obj);
        },

        // gets a shallow copy of the argument
        copy: function copy(obj) {
          if (obj == null) {
            return obj;
          }if (is.array(obj)) {
            return obj.slice();
          } else if (is.plainObject(obj)) {
            return this.clone(obj);
          } else {
            return obj;
          }
        },

        copyArray: function copyArray(arr) {
          return arr.slice();
        },

        clonePosition: function clonePosition(pos) {
          return { x: pos.x, y: pos.y };
        },

        uuid: function uuid(a, b // placeholders
        ) {
          for ( // loop :)
          b = a = ''; // b - result , a - numeric letiable
          a++ < 36; //
          b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
          ? //  return a random number or 4
          (a ^ 15 // if "a" is not 15
          ? // genetate a random number from 0 to 15
          8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
          : 4 //  otherwise 4
          ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
          ) {}
          return b;
        }

      };

      util.makeBoundingBox = math.makeBoundingBox.bind(math);

      util._staticEmptyObject = {};

      util.staticEmptyObject = function () {
        return util._staticEmptyObject;
      };

      util.extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
        var args = arguments;

        for (var i = 1; i < args.length; i++) {
          var obj = args[i];

          if (obj == null) {
            continue;
          }

          var keys = Object.keys(obj);

          for (var j = 0; j < keys.length; j++) {
            var k = keys[j];

            tgt[k] = obj[k];
          }
        }

        return tgt;
      };

      util.assign = util.extend;

      util.default = function (val, def) {
        if (val === undefined) {
          return def;
        } else {
          return val;
        }
      };

      util.removeFromArray = function (arr, ele, manyCopies) {
        for (var i = arr.length; i >= 0; i--) {
          if (arr[i] === ele) {
            arr.splice(i, 1);

            if (!manyCopies) {
              break;
            }
          }
        }
      };

      util.clearArray = function (arr) {
        arr.splice(0, arr.length);
      };

      util.push = function (arr, otherArr) {
        for (var i = 0; i < otherArr.length; i++) {
          var el = otherArr[i];

          arr.push(el);
        }
      };

      util.getPrefixedProperty = function (obj, propName, prefix) {
        if (prefix) {
          propName = this.prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
        }

        return obj[propName];
      };

      util.setPrefixedProperty = function (obj, propName, prefix, value) {
        if (prefix) {
          propName = this.prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
        }

        obj[propName] = value;
      };

      [__webpack_require__(21), __webpack_require__(22), { memoize: __webpack_require__(13) }, __webpack_require__(23), __webpack_require__(24), __webpack_require__(25), __webpack_require__(27)].forEach(function (req) {
        util.extend(util, req);
      });

      module.exports = util;

      /***/
    },
    /* 2 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = {};

      math.arePositionsSame = function (p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
      };

      math.copyPosition = function (p) {
        return { x: p.x, y: p.y };
      };

      math.modelToRenderedPosition = function (p, zoom, pan) {
        return {
          x: p.x * zoom + pan.x,
          y: p.y * zoom + pan.y
        };
      };

      math.renderedToModelPosition = function (p, zoom, pan) {
        return {
          x: (p.x - pan.x) / zoom,
          y: (p.y - pan.y) / zoom
        };
      };

      math.array2point = function (arr) {
        return {
          x: arr[0],
          y: arr[1]
        };
      };

      math.deg2rad = function (deg) {
        return Math.PI * deg / 180;
      };

      math.getAngleFromDisp = function (dispX, dispY) {
        return Math.atan2(dispY, dispX) - Math.PI / 2;
      };

      math.log2 = Math.log2 || function (n) {
        return Math.log(n) / Math.log(2);
      };

      math.signum = function (x) {
        if (x > 0) {
          return 1;
        } else if (x < 0) {
          return -1;
        } else {
          return 0;
        }
      };

      math.dist = function (p1, p2) {
        return Math.sqrt(math.sqdist(p1, p2));
      };

      math.sqdist = function (p1, p2) {
        var dx = p2.x - p1.x;
        var dy = p2.y - p1.y;

        return dx * dx + dy * dy;
      };

      // from http://en.wikipedia.org/wiki/Bézier_curve#Quadratic_curves
      math.qbezierAt = function (p0, p1, p2, t) {
        return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
      };

      math.qbezierPtAt = function (p0, p1, p2, t) {
        return {
          x: math.qbezierAt(p0.x, p1.x, p2.x, t),
          y: math.qbezierAt(p0.y, p1.y, p2.y, t)
        };
      };

      math.lineAt = function (p0, p1, t, d) {
        var vec = {
          x: p1.x - p0.x,
          y: p1.y - p0.y
        };

        var vecDist = math.dist(p0, p1);

        var normVec = {
          x: vec.x / vecDist,
          y: vec.y / vecDist
        };

        t = t == null ? 0 : t;

        d = d != null ? d : t * vecDist;

        return {
          x: p0.x + normVec.x * d,
          y: p0.y + normVec.y * d
        };
      };

      math.lineAtDist = function (p0, p1, d) {
        return math.lineAt(p0, p1, undefined, d);
      };

      // get angle at A via cosine law
      math.triangleAngle = function (A, B, C) {
        var a = math.dist(B, C);
        var b = math.dist(A, C);
        var c = math.dist(A, B);

        return Math.acos((a * a + b * b - c * c) / (2 * a * b));
      };

      math.bound = function (min, val, max) {
        return Math.max(min, Math.min(max, val));
      };

      // makes a full bb (x1, y1, x2, y2, w, h) from implicit params
      math.makeBoundingBox = function (bb) {
        if (bb == null) {
          return {
            x1: Infinity,
            y1: Infinity,
            x2: -Infinity,
            y2: -Infinity,
            w: 0,
            h: 0
          };
        } else if (bb.x1 != null && bb.y1 != null) {
          if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
            return {
              x1: bb.x1,
              y1: bb.y1,
              x2: bb.x2,
              y2: bb.y2,
              w: bb.x2 - bb.x1,
              h: bb.y2 - bb.y1
            };
          } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
            return {
              x1: bb.x1,
              y1: bb.y1,
              x2: bb.x1 + bb.w,
              y2: bb.y1 + bb.h,
              w: bb.w,
              h: bb.h
            };
          }
        }
      };

      math.updateBoundingBox = function (bb1, bb2) {
        // update bb1 with bb2 bounds

        bb1.x1 = Math.min(bb1.x1, bb2.x1);
        bb1.x2 = Math.max(bb1.x2, bb2.x2);
        bb1.w = bb1.x2 - bb1.x1;

        bb1.y1 = Math.min(bb1.y1, bb2.y1);
        bb1.y2 = Math.max(bb1.y2, bb2.y2);
        bb1.h = bb1.y2 - bb1.y1;
      };

      math.expandBoundingBoxByPoint = function (bb, x, y) {
        bb.x1 = Math.min(bb.x1, x);
        bb.x2 = Math.max(bb.x2, x);
        bb.w = bb.x2 - bb.x1;

        bb.y1 = Math.min(bb.y1, y);
        bb.y2 = Math.max(bb.y2, y);
        bb.h = bb.y2 - bb.y1;
      };

      math.expandBoundingBox = function (bb, padding) {
        bb.x1 -= padding;
        bb.x2 += padding;
        bb.y1 -= padding;
        bb.y2 += padding;
        bb.w = bb.x2 - bb.x1;
        bb.h = bb.y2 - bb.y1;

        return bb;
      };

      math.boundingBoxesIntersect = function (bb1, bb2) {
        // case: one bb to right of other
        if (bb1.x1 > bb2.x2) {
          return false;
        }
        if (bb2.x1 > bb1.x2) {
          return false;
        }

        // case: one bb to left of other
        if (bb1.x2 < bb2.x1) {
          return false;
        }
        if (bb2.x2 < bb1.x1) {
          return false;
        }

        // case: one bb above other
        if (bb1.y2 < bb2.y1) {
          return false;
        }
        if (bb2.y2 < bb1.y1) {
          return false;
        }

        // case: one bb below other
        if (bb1.y1 > bb2.y2) {
          return false;
        }
        if (bb2.y1 > bb1.y2) {
          return false;
        }

        // otherwise, must have some overlap
        return true;
      };

      math.inBoundingBox = function (bb, x, y) {
        return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
      };

      math.pointInBoundingBox = function (bb, pt) {
        return this.inBoundingBox(bb, pt.x, pt.y);
      };

      math.boundingBoxInBoundingBox = function (bb1, bb2) {
        return math.inBoundingBox(bb1, bb2.x1, bb2.y1) && math.inBoundingBox(bb1, bb2.x2, bb2.y2);
      };

      math.roundRectangleIntersectLine = function (x, y, nodeX, nodeY, width, height, padding) {

        var cornerRadius = this.getRoundRectangleRadius(width, height);

        var halfWidth = width / 2;
        var halfHeight = height / 2;

        // Check intersections with straight line segments
        var straightLineIntersections = void 0;

        // Top segment, left to right
        {
          var topStartX = nodeX - halfWidth + cornerRadius - padding;
          var topStartY = nodeY - halfHeight - padding;
          var topEndX = nodeX + halfWidth - cornerRadius + padding;
          var topEndY = topStartY;

          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

          if (straightLineIntersections.length > 0) {
            return straightLineIntersections;
          }
        }

        // Right segment, top to bottom
        {
          var rightStartX = nodeX + halfWidth + padding;
          var rightStartY = nodeY - halfHeight + cornerRadius - padding;
          var rightEndX = rightStartX;
          var rightEndY = nodeY + halfHeight - cornerRadius + padding;

          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

          if (straightLineIntersections.length > 0) {
            return straightLineIntersections;
          }
        }

        // Bottom segment, left to right
        {
          var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
          var bottomStartY = nodeY + halfHeight + padding;
          var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
          var bottomEndY = bottomStartY;

          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

          if (straightLineIntersections.length > 0) {
            return straightLineIntersections;
          }
        }

        // Left segment, top to bottom
        {
          var leftStartX = nodeX - halfWidth - padding;
          var leftStartY = nodeY - halfHeight + cornerRadius - padding;
          var leftEndX = leftStartX;
          var leftEndY = nodeY + halfHeight - cornerRadius + padding;

          straightLineIntersections = this.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

          if (straightLineIntersections.length > 0) {
            return straightLineIntersections;
          }
        }

        // Check intersections with arc segments
        var arcIntersections = void 0;

        // Top Left
        {
          var topLeftCenterX = nodeX - halfWidth + cornerRadius;
          var topLeftCenterY = nodeY - halfHeight + cornerRadius;
          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding);

          // Ensure the intersection is on the desired quarter of the circle
          if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
            return [arcIntersections[0], arcIntersections[1]];
          }
        }

        // Top Right
        {
          var topRightCenterX = nodeX + halfWidth - cornerRadius;
          var topRightCenterY = nodeY - halfHeight + cornerRadius;
          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding);

          // Ensure the intersection is on the desired quarter of the circle
          if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
            return [arcIntersections[0], arcIntersections[1]];
          }
        }

        // Bottom Right
        {
          var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
          var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding);

          // Ensure the intersection is on the desired quarter of the circle
          if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
            return [arcIntersections[0], arcIntersections[1]];
          }
        }

        // Bottom Left
        {
          var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
          var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
          arcIntersections = this.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding);

          // Ensure the intersection is on the desired quarter of the circle
          if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
            return [arcIntersections[0], arcIntersections[1]];
          }
        }

        return []; // if nothing
      };

      math.inLineVicinity = function (x, y, lx1, ly1, lx2, ly2, tolerance) {
        var t = tolerance;

        var x1 = Math.min(lx1, lx2);
        var x2 = Math.max(lx1, lx2);
        var y1 = Math.min(ly1, ly2);
        var y2 = Math.max(ly1, ly2);

        return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
      };

      math.inBezierVicinity = function (x, y, x1, y1, x2, y2, x3, y3, tolerance) {

        var bb = {
          x1: Math.min(x1, x3, x2) - tolerance,
          x2: Math.max(x1, x3, x2) + tolerance,
          y1: Math.min(y1, y3, y2) - tolerance,
          y2: Math.max(y1, y3, y2) + tolerance
        };

        // if outside the rough bounding box for the bezier, then it can't be a hit
        if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
          // console.log('bezier out of rough bb')
          return false;
        } else {
          // console.log('do more expensive check');
          return true;
        }
      };
      math.solveQuadratic = function (a, b, c, val) {
        c -= val;

        var r = b * b - 4 * a * c;

        if (r < 0) {
          return [];
        }

        var sqrtR = Math.sqrt(r);
        var denom = 2 * a;
        var root1 = (-b + sqrtR) / denom;
        var root2 = (-b - sqrtR) / denom;

        return [root1, root2];
      };

      math.solveCubic = function (a, b, c, d, result) {

        // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
        // r is the real component, i is the imaginary component

        // An implementation of the Cardano method from the year 1545
        // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots

        b /= a;
        c /= a;
        d /= a;

        var discriminant = void 0,
            q = void 0,
            r = void 0,
            dum1 = void 0,
            s = void 0,
            t = void 0,
            term1 = void 0,
            r13 = void 0;

        q = (3.0 * c - b * b) / 9.0;
        r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
        r /= 54.0;

        discriminant = q * q * q + r * r;
        result[1] = 0;
        term1 = b / 3.0;

        if (discriminant > 0) {
          s = r + Math.sqrt(discriminant);
          s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
          t = r - Math.sqrt(discriminant);
          t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
          result[0] = -term1 + s + t;
          term1 += (s + t) / 2.0;
          result[4] = result[2] = -term1;
          term1 = Math.sqrt(3.0) * (-t + s) / 2;
          result[3] = term1;
          result[5] = -term1;
          return;
        }

        result[5] = result[3] = 0;

        if (discriminant === 0) {
          r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
          result[0] = -term1 + 2.0 * r13;
          result[4] = result[2] = -(r13 + term1);
          return;
        }

        q = -q;
        dum1 = q * q * q;
        dum1 = Math.acos(r / Math.sqrt(dum1));
        r13 = 2.0 * Math.sqrt(q);
        result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
        result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
        result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);

        return;
      };

      math.sqdistToQuadraticBezier = function (x, y, x1, y1, x2, y2, x3, y3) {

        // Find minimum distance by using the minimum of the distance
        // function between the given point and the curve

        // This gives the coefficients of the resulting cubic equation
        // whose roots tell us where a possible minimum is
        // (Coefficients are divided by 4)

        var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;

        var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;

        var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;

        var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y;

        // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

        var roots = [];

        // Use the cubic solving algorithm
        this.solveCubic(a, b, c, d, roots);

        var zeroThreshold = 0.0000001;

        var params = [];

        for (var index = 0; index < 6; index += 2) {
          if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
            params.push(roots[index]);
          }
        }

        params.push(1.0);
        params.push(0.0);

        var minDistanceSquared = -1;

        var curX = void 0,
            curY = void 0,
            distSquared = void 0;
        for (var i = 0; i < params.length; i++) {
          curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;

          curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;

          distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2);
          // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));
          if (minDistanceSquared >= 0) {
            if (distSquared < minDistanceSquared) {
              minDistanceSquared = distSquared;
            }
          } else {
            minDistanceSquared = distSquared;
          }
        }

        return minDistanceSquared;
      };

      math.sqdistToFiniteLine = function (x, y, x1, y1, x2, y2) {
        var offset = [x - x1, y - y1];
        var line = [x2 - x1, y2 - y1];

        var lineSq = line[0] * line[0] + line[1] * line[1];
        var hypSq = offset[0] * offset[0] + offset[1] * offset[1];

        var dotProduct = offset[0] * line[0] + offset[1] * line[1];
        var adjSq = dotProduct * dotProduct / lineSq;

        if (dotProduct < 0) {
          return hypSq;
        }

        if (adjSq > lineSq) {
          return (x - x2) * (x - x2) + (y - y2) * (y - y2);
        }

        return hypSq - adjSq;
      };

      math.pointInsidePolygonPoints = function (x, y, points) {
        var x1 = void 0,
            y1 = void 0,
            x2 = void 0,
            y2 = void 0;
        var y3 = void 0;

        // Intersect with vertical line through (x, y)
        var up = 0;
        // let down = 0;
        for (var i = 0; i < points.length / 2; i++) {
          x1 = points[i * 2];
          y1 = points[i * 2 + 1];

          if (i + 1 < points.length / 2) {
            x2 = points[(i + 1) * 2];
            y2 = points[(i + 1) * 2 + 1];
          } else {
            x2 = points[(i + 1 - points.length / 2) * 2];
            y2 = points[(i + 1 - points.length / 2) * 2 + 1];
          }

          if (x1 == x && x2 == x) {
            // then ignore
          } else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {

            y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

            if (y3 > y) {
              up++;
            }

            // if( y3 < y ){
            // down++;
            // }
          } else {
            continue;
          }
        }

        if (up % 2 === 0) {
          return false;
        } else {
          return true;
        }
      };

      math.pointInsidePolygon = function (x, y, basePoints, centerX, centerY, width, height, direction, padding) {

        //let direction = arguments[6];
        var transformedPoints = new Array(basePoints.length);

        // Gives negative angle
        var angle = void 0;

        if (direction[0] != null) {
          angle = Math.atan(direction[1] / direction[0]);

          if (direction[0] < 0) {
            angle = angle + Math.PI / 2;
          } else {
            angle = -angle - Math.PI / 2;
          }
        } else {
          angle = direction;
        }

        var cos = Math.cos(-angle);
        var sin = Math.sin(-angle);

        //    console.log("base: " + basePoints);
        for (var i = 0; i < transformedPoints.length / 2; i++) {
          transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);

          transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);

          transformedPoints[i * 2] += centerX;
          transformedPoints[i * 2 + 1] += centerY;
        }

        var points = void 0;

        if (padding > 0) {
          var expandedLineSet = this.expandPolygon(transformedPoints, -padding);

          points = this.joinLines(expandedLineSet);
        } else {
          points = transformedPoints;
        }

        return math.pointInsidePolygonPoints(x, y, points);
      };

      math.joinLines = function (lineSet) {

        var vertices = new Array(lineSet.length / 2);

        var currentLineStartX = void 0,
            currentLineStartY = void 0,
            currentLineEndX = void 0,
            currentLineEndY = void 0;
        var nextLineStartX = void 0,
            nextLineStartY = void 0,
            nextLineEndX = void 0,
            nextLineEndY = void 0;

        for (var i = 0; i < lineSet.length / 4; i++) {
          currentLineStartX = lineSet[i * 4];
          currentLineStartY = lineSet[i * 4 + 1];
          currentLineEndX = lineSet[i * 4 + 2];
          currentLineEndY = lineSet[i * 4 + 3];

          if (i < lineSet.length / 4 - 1) {
            nextLineStartX = lineSet[(i + 1) * 4];
            nextLineStartY = lineSet[(i + 1) * 4 + 1];
            nextLineEndX = lineSet[(i + 1) * 4 + 2];
            nextLineEndY = lineSet[(i + 1) * 4 + 3];
          } else {
            nextLineStartX = lineSet[0];
            nextLineStartY = lineSet[1];
            nextLineEndX = lineSet[2];
            nextLineEndY = lineSet[3];
          }

          var intersection = this.finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);

          vertices[i * 2] = intersection[0];
          vertices[i * 2 + 1] = intersection[1];
        }

        return vertices;
      };

      math.expandPolygon = function (points, pad) {

        var expandedLineSet = new Array(points.length * 2);

        var currentPointX = void 0,
            currentPointY = void 0,
            nextPointX = void 0,
            nextPointY = void 0;

        for (var i = 0; i < points.length / 2; i++) {
          currentPointX = points[i * 2];
          currentPointY = points[i * 2 + 1];

          if (i < points.length / 2 - 1) {
            nextPointX = points[(i + 1) * 2];
            nextPointY = points[(i + 1) * 2 + 1];
          } else {
            nextPointX = points[0];
            nextPointY = points[1];
          }

          // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]

          // Assume CCW polygon winding

          var offsetX = nextPointY - currentPointY;
          var offsetY = -(nextPointX - currentPointX);

          // Normalize
          var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
          var normalizedOffsetX = offsetX / offsetLength;
          var normalizedOffsetY = offsetY / offsetLength;

          expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
          expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
          expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
          expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
        }

        return expandedLineSet;
      };

      math.intersectLineEllipse = function (x, y, centerX, centerY, ellipseWradius, ellipseHradius) {

        var dispX = centerX - x;
        var dispY = centerY - y;

        dispX /= ellipseWradius;
        dispY /= ellipseHradius;

        var len = Math.sqrt(dispX * dispX + dispY * dispY);

        var newLength = len - 1;

        if (newLength < 0) {
          return [];
        }

        var lenProportion = newLength / len;

        return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
      };

      math.checkInEllipse = function (x, y, width, height, centerX, centerY, padding) {
        x -= centerX;
        y -= centerY;

        x /= width / 2 + padding;
        y /= height / 2 + padding;

        return x * x + y * y <= 1;
      };

      // Returns intersections of increasing distance from line's start point
      math.intersectLineCircle = function (x1, y1, x2, y2, centerX, centerY, radius) {

        // Calculate d, direction vector of line
        var d = [x2 - x1, y2 - y1]; // Direction vector of line
        var f = [x1 - centerX, y1 - centerY];

        var a = d[0] * d[0] + d[1] * d[1];
        var b = 2 * (f[0] * d[0] + f[1] * d[1]);
        var c = f[0] * f[0] + f[1] * f[1] - radius * radius;

        var discriminant = b * b - 4 * a * c;

        if (discriminant < 0) {
          return [];
        }

        var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
        var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);

        var tMin = Math.min(t1, t2);
        var tMax = Math.max(t1, t2);
        var inRangeParams = [];

        if (tMin >= 0 && tMin <= 1) {
          inRangeParams.push(tMin);
        }

        if (tMax >= 0 && tMax <= 1) {
          inRangeParams.push(tMax);
        }

        if (inRangeParams.length === 0) {
          return [];
        }

        var nearIntersectionX = inRangeParams[0] * d[0] + x1;
        var nearIntersectionY = inRangeParams[0] * d[1] + y1;

        if (inRangeParams.length > 1) {

          if (inRangeParams[0] == inRangeParams[1]) {
            return [nearIntersectionX, nearIntersectionY];
          } else {

            var farIntersectionX = inRangeParams[1] * d[0] + x1;
            var farIntersectionY = inRangeParams[1] * d[1] + y1;

            return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
          }
        } else {
          return [nearIntersectionX, nearIntersectionY];
        }
      };

      math.findCircleNearPoint = function (centerX, centerY, radius, farX, farY) {

        var displacementX = farX - centerX;
        var displacementY = farY - centerY;
        var distance = Math.sqrt(displacementX * displacementX + displacementY * displacementY);

        var unitDisplacementX = displacementX / distance;
        var unitDisplacementY = displacementY / distance;

        return [centerX + unitDisplacementX * radius, centerY + unitDisplacementY * radius];
      };

      math.findMaxSqDistanceToOrigin = function (points) {
        var maxSqDistance = 0.000001;
        var sqDistance = void 0;

        for (var i = 0; i < points.length / 2; i++) {

          sqDistance = points[i * 2] * points[i * 2] + points[i * 2 + 1] * points[i * 2 + 1];

          if (sqDistance > maxSqDistance) {
            maxSqDistance = sqDistance;
          }
        }

        return maxSqDistance;
      };

      math.midOfThree = function (a, b, c) {
        if (b <= a && a <= c || c <= a && a <= b) {
          return a;
        } else if (a <= b && b <= c || c <= b && b <= a) {
          return b;
        } else {
          return c;
        }
      };

      // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)
      math.finiteLinesIntersect = function (x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {

        var dx13 = x1 - x3;
        var dx21 = x2 - x1;
        var dx43 = x4 - x3;

        var dy13 = y1 - y3;
        var dy21 = y2 - y1;
        var dy43 = y4 - y3;

        var ua_t = dx43 * dy13 - dy43 * dx13;
        var ub_t = dx21 * dy13 - dy21 * dx13;
        var u_b = dy43 * dx21 - dx43 * dy21;

        if (u_b !== 0) {
          var ua = ua_t / u_b;
          var ub = ub_t / u_b;

          var flptThreshold = 0.001;
          var min = 0 - flptThreshold;
          var max = 1 + flptThreshold;

          if (min <= ua && ua <= max && min <= ub && ub <= max) {
            return [x1 + ua * dx21, y1 + ua * dy21];
          } else {
            if (!infiniteLines) {
              return [];
            } else {
              return [x1 + ua * dx21, y1 + ua * dy21];
            }
          }
        } else {
          if (ua_t === 0 || ub_t === 0) {

            // Parallel, coincident lines. Check if overlap

            // Check endpoint of second line
            if (this.midOfThree(x1, x2, x4) === x4) {
              return [x4, y4];
            }

            // Check start point of second line
            if (this.midOfThree(x1, x2, x3) === x3) {
              return [x3, y3];
            }

            // Endpoint of first line
            if (this.midOfThree(x3, x4, x2) === x2) {
              return [x2, y2];
            }

            return [];
          } else {

            // Parallel, non-coincident
            return [];
          }
        }
      };

      // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
      // intersect a node polygon (pts transformed)
      //
      // math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
      // intersect the points (no transform)
      math.polygonIntersectLine = function (x, y, basePoints, centerX, centerY, width, height, padding) {

        var intersections = [];
        var intersection = void 0;

        var transformedPoints = new Array(basePoints.length);

        var doTransform = true;
        if (arguments.length === 5) {
          doTransform = false;
        }

        var points = void 0;

        if (doTransform) {
          for (var i = 0; i < transformedPoints.length / 2; i++) {
            transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
            transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
          }

          if (padding > 0) {
            var expandedLineSet = math.expandPolygon(transformedPoints, -padding);

            points = math.joinLines(expandedLineSet);
          } else {
            points = transformedPoints;
          }
        } else {
          points = basePoints;
        }

        var currentX = void 0,
            currentY = void 0,
            nextX = void 0,
            nextY = void 0;

        for (var _i = 0; _i < points.length / 2; _i++) {

          currentX = points[_i * 2];
          currentY = points[_i * 2 + 1];

          if (_i < points.length / 2 - 1) {
            nextX = points[(_i + 1) * 2];
            nextY = points[(_i + 1) * 2 + 1];
          } else {
            nextX = points[0];
            nextY = points[1];
          }

          intersection = this.finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

          if (intersection.length !== 0) {
            intersections.push(intersection[0], intersection[1]);
          }
        }

        return intersections;
      };

      math.shortenIntersection = function (intersection, offset, amount) {

        var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];

        var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);

        var lenRatio = (length - amount) / length;

        if (lenRatio < 0) {
          lenRatio = 0.00001;
        }

        return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
      };

      math.generateUnitNgonPointsFitToSquare = function (sides, rotationRadians) {
        var points = math.generateUnitNgonPoints(sides, rotationRadians);
        points = math.fitPolygonToSquare(points);

        return points;
      };

      math.fitPolygonToSquare = function (points) {
        var x = void 0,
            y = void 0;
        var sides = points.length / 2;
        var minX = Infinity,
            minY = Infinity,
            maxX = -Infinity,
            maxY = -Infinity;

        for (var i = 0; i < sides; i++) {
          x = points[2 * i];
          y = points[2 * i + 1];

          minX = Math.min(minX, x);
          maxX = Math.max(maxX, x);
          minY = Math.min(minY, y);
          maxY = Math.max(maxY, y);
        }

        // stretch factors
        var sx = 2 / (maxX - minX);
        var sy = 2 / (maxY - minY);

        for (var _i2 = 0; _i2 < sides; _i2++) {
          x = points[2 * _i2] = points[2 * _i2] * sx;
          y = points[2 * _i2 + 1] = points[2 * _i2 + 1] * sy;

          minX = Math.min(minX, x);
          maxX = Math.max(maxX, x);
          minY = Math.min(minY, y);
          maxY = Math.max(maxY, y);
        }

        if (minY < -1) {
          for (var _i3 = 0; _i3 < sides; _i3++) {
            y = points[2 * _i3 + 1] = points[2 * _i3 + 1] + (-1 - minY);
          }
        }

        return points;
      };

      math.generateUnitNgonPoints = function (sides, rotationRadians) {

        var increment = 1.0 / sides * 2 * Math.PI;
        var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;

        startAngle += rotationRadians;

        var points = new Array(sides * 2);

        var currentAngle = void 0;
        for (var i = 0; i < sides; i++) {
          currentAngle = i * increment + startAngle;

          points[2 * i] = Math.cos(currentAngle); // x
          points[2 * i + 1] = Math.sin(-currentAngle); // y
        }

        return points;
      };

      math.getRoundRectangleRadius = function (width, height) {

        // Set the default radius, unless half of width or height is smaller than default
        return Math.min(width / 4, height / 4, 8);
      };

      math.getCutRectangleCornerLength = function () {
        return 8;
      };

      math.bezierPtsToQuadCoeff = function (p0, p1, p2) {
        return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
      };

      math.getBarrelCurveConstants = function (width, height) {
        // get curve width, height, and control point position offsets as a percentage of node height / width
        return {
          heightOffset: Math.min(15, 0.05 * height),
          widthOffset: Math.min(100, 0.25 * width),
          ctrlPtOffsetPct: 0.05
        };
      };

      module.exports = math;

      /***/
    },
    /* 3 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

      /***/
    },
    /* 4 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // use this module to cherry pick functions into your prototype
      // (useful for functions shared between the core and collections, for example)

      // e.g.
      // let foo = define.foo({ /* params... */ })

      var util = __webpack_require__(1);

      var define = {};

      [__webpack_require__(43), __webpack_require__(45), __webpack_require__(46)].forEach(function (m) {
        util.assign(define, m);
      });

      module.exports = define;

      /***/
    },
    /* 5 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      /*!
      Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
      Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
      Licensed under The MIT License (http://opensource.org/licenses/MIT)
      */

      /*  promise states [Promises/A+ 2.1]  */
      var STATE_PENDING = 0; /*  [Promises/A+ 2.1.1]  */
      var STATE_FULFILLED = 1; /*  [Promises/A+ 2.1.2]  */
      var STATE_REJECTED = 2; /*  [Promises/A+ 2.1.3]  */

      /*  promise object constructor  */
      var api = function api(executor) {
        /*  optionally support non-constructor/plain-function call  */
        if (!(this instanceof api)) return new api(executor);

        /*  initialize object  */
        this.id = 'Thenable/1.0.7';
        this.state = STATE_PENDING; /*  initial state  */
        this.fulfillValue = undefined; /*  initial value  */ /*  [Promises/A+ 1.3, 2.1.2.2]  */
        this.rejectReason = undefined; /*  initial reason */ /*  [Promises/A+ 1.5, 2.1.3.2]  */
        this.onFulfilled = []; /*  initial handlers  */
        this.onRejected = []; /*  initial handlers  */

        /*  provide optional information-hiding proxy  */
        this.proxy = {
          then: this.then.bind(this)
        };

        /*  support optional executor function  */
        if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
      };

      /*  promise API methods  */
      api.prototype = {
        /*  promise resolving methods  */
        fulfill: function fulfill(value) {
          return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
        },
        reject: function reject(value) {
          return deliver(this, STATE_REJECTED, 'rejectReason', value);
        },

        /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
        then: function then(onFulfilled, onRejected) {
          var curr = this;
          var next = new api(); /*  [Promises/A+ 2.2.7]  */
          curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill')); /*  [Promises/A+ 2.2.2/2.2.6]  */
          curr.onRejected.push(resolver(onRejected, next, 'reject')); /*  [Promises/A+ 2.2.3/2.2.6]  */
          execute(curr);
          return next.proxy; /*  [Promises/A+ 2.2.7, 3.3]  */
        }
      };

      /*  deliver an action  */
      var deliver = function deliver(curr, state, name, value) {
        if (curr.state === STATE_PENDING) {
          curr.state = state; /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */
          curr[name] = value; /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */
          execute(curr);
        }
        return curr;
      };

      /*  execute all handlers  */
      var execute = function execute(curr) {
        if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
      };

      /*  execute particular set of handlers  */
      var execute_handlers = function execute_handlers(curr, name, value) {
        /* global setImmediate: true */
        /* global setTimeout: true */

        /*  short-circuit processing  */
        if (curr[name].length === 0) return;

        /*  iterate over all handlers, exactly once  */
        var handlers = curr[name];
        curr[name] = []; /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */
        var func = function func() {
          for (var i = 0; i < handlers.length; i++) {
            handlers[i](value);
          } /*  [Promises/A+ 2.2.5]  */
        };

        /*  execute procedure asynchronously  */ /*  [Promises/A+ 2.2.4, 3.1]  */
        if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
      };

      /*  generate a resolver function  */
      var resolver = function resolver(cb, next, method) {
        return function (value) {
          if (typeof cb !== 'function') /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
            next[method].call(next, value); /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
          else {
              var result;
              try {
                result = cb(value);
              } /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
              catch (e) {
                next.reject(e); /*  [Promises/A+ 2.2.7.2]  */
                return;
              }
              resolve(next, result); /*  [Promises/A+ 2.2.7.1]  */
            }
        };
      };

      /*  "Promise Resolution Procedure"  */ /*  [Promises/A+ 2.3]  */
      var resolve = function resolve(promise, x) {
        /*  sanity check arguments  */ /*  [Promises/A+ 2.3.1]  */
        if (promise === x || promise.proxy === x) {
          promise.reject(new TypeError('cannot resolve promise with itself'));
          return;
        }

        /*  surgically check for a "then" method
          (mainly to just call the "getter" of "then" only once)  */
        var then;
        if ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x !== null || typeof x === 'function') {
          try {
            then = x.then;
          } /*  [Promises/A+ 2.3.3.1, 3.5]  */
          catch (e) {
            promise.reject(e); /*  [Promises/A+ 2.3.3.2]  */
            return;
          }
        }

        /*  handle own Thenables    [Promises/A+ 2.3.2]
          and similar "thenables" [Promises/A+ 2.3.3]  */
        if (typeof then === 'function') {
          var resolved = false;
          try {
            /*  call retrieved "then" method */ /*  [Promises/A+ 2.3.3.3]  */
            then.call(x,
            /*  resolvePromise  */ /*  [Promises/A+ 2.3.3.3.1]  */
            function (y) {
              if (resolved) return;resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */
              if (y === x) /*  [Promises/A+ 3.6]  */
                promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
            },

            /*  rejectPromise  */ /*  [Promises/A+ 2.3.3.3.2]  */
            function (r) {
              if (resolved) return;resolved = true; /*  [Promises/A+ 2.3.3.3.3]  */
              promise.reject(r);
            });
          } catch (e) {
            if (!resolved) /*  [Promises/A+ 2.3.3.3.3]  */
              promise.reject(e); /*  [Promises/A+ 2.3.3.3.4]  */
          }
          return;
        }

        /*  handle other values  */
        promise.fulfill(x); /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
      };

      // so we always have Promise.all()
      api.all = function (ps) {
        return new api(function (resolveAll, rejectAll) {
          var vals = new Array(ps.length);
          var doneCount = 0;

          var fulfill = function fulfill(i, val) {
            vals[i] = val;
            doneCount++;

            if (doneCount === ps.length) {
              resolveAll(vals);
            }
          };

          for (var i = 0; i < ps.length; i++) {
            (function (i) {
              var p = ps[i];
              var isPromise = p != null && p.then != null;

              if (isPromise) {
                p.then(function (val) {
                  fulfill(i, val);
                }, function (err) {
                  rejectAll(err);
                });
              } else {
                var val = p;
                fulfill(i, val);
              }
            })(i);
          }
        });
      };

      api.resolve = function (val) {
        return new api(function (resolve, reject) {
          resolve(val);
        });
      };

      api.reject = function (val) {
        return new api(function (resolve, reject) {
          reject(val);
        });
      };

      module.exports = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

      /***/
    },
    /* 6 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var newQuery = __webpack_require__(10);

      var Selector = function Selector(selector) {
        var self = this;

        self._private = {
          selectorText: selector,
          invalid: true
        };

        if (selector == null || is.string(selector) && selector.match(/^\s*$/)) {

          self.length = 0;
        } else if (selector === '*' || selector === 'edge' || selector === 'node') {

          // make single, group-only selectors cheap to make and cheap to filter

          self[0] = newQuery();
          self[0].group = selector === '*' ? selector : selector + 's';
          self[0].groupOnly = true;
          self[0].length = 1;
          self._private.invalid = false;
          self.length = 1;
        } else if (is.elementOrCollection(selector)) {

          var collection = selector.collection();

          self[0] = newQuery();
          self[0].collection = collection;
          self[0].length = 1;
          self.length = 1;
        } else if (is.fn(selector)) {

          self[0] = newQuery();
          self[0].filter = selector;
          self[0].length = 1;
          self.length = 1;
        } else if (is.string(selector)) {
          if (!self.parse(selector)) {
            return;
          }
        } else {
          util.error('A selector must be created from a string; found ', selector);
          return;
        }

        self._private.invalid = false;
      };

      var selfn = Selector.prototype;

      selfn.valid = function () {
        return !this._private.invalid;
      };

      selfn.invalid = function () {
        return this._private.invalid;
      };

      selfn.text = function () {
        return this._private.selectorText;
      };

      selfn.size = function () {
        return this.length;
      };

      selfn.eq = function (i) {
        return this[i];
      };

      selfn.sameText = function (otherSel) {
        return this.text() === otherSel.text();
      };

      selfn.toString = selfn.selector = function () {

        if (this._private.toStringCache != null) {
          return this._private.toStringCache;
        }

        var i = void 0;
        var str = '';

        var clean = function clean(obj) {
          if (obj == null) {
            return '';
          } else {
            return obj;
          }
        };

        var cleanVal = function cleanVal(val) {
          if (is.string(val)) {
            return '"' + val + '"';
          } else {
            return clean(val);
          }
        };

        var space = function space(val) {
          return ' ' + val + ' ';
        };

        var queryToString = function queryToString(query) {
          var str = '';
          var j = void 0,
              sel = void 0;

          if (query.subject === query) {
            str += '$';
          }

          var group = clean(query.group);
          str += group.substring(0, group.length - 1);

          for (j = 0; j < query.data.length; j++) {
            var data = query.data[j];

            if (data.value) {
              str += '[' + data.field + space(clean(data.operator)) + cleanVal(data.value) + ']';
            } else {
              str += '[' + clean(data.operator) + data.field + ']';
            }
          }

          for (j = 0; j < query.meta.length; j++) {
            var meta = query.meta[j];
            str += '[[' + meta.field + space(clean(meta.operator)) + cleanVal(meta.value) + ']]';
          }

          for (j = 0; j < query.colonSelectors.length; j++) {
            sel = query.colonSelectors[i];
            str += sel;
          }

          for (j = 0; j < query.ids.length; j++) {
            sel = '#' + query.ids[i];
            str += sel;
          }

          for (j = 0; j < query.classes.length; j++) {
            sel = '.' + query.classes[j];
            str += sel;
          }

          if (query.source != null && query.target != null) {
            str = queryToString(query.source) + ' -> ' + queryToString(query.target);
          }

          if (query.connectedNodes != null) {
            var n = query.connectedNodes;

            str = queryToString(n[0]) + ' <-> ' + queryToString(n[1]);
          }

          if (query.parent != null) {
            str = queryToString(query.parent) + ' > ' + str;
          }

          if (query.ancestor != null) {
            str = queryToString(query.ancestor) + ' ' + str;
          }

          if (query.child != null) {
            str += ' > ' + queryToString(query.child);
          }

          if (query.descendant != null) {
            str += ' ' + queryToString(query.descendant);
          }

          return str;
        };

        for (i = 0; i < this.length; i++) {
          var query = this[i];

          str += queryToString(query);

          if (this.length > 1 && i < this.length - 1) {
            str += ', ';
          }
        }

        this._private.toStringCache = str;

        return str;
      };

      [__webpack_require__(49), __webpack_require__(52)].forEach(function (p) {
        return util.assign(selfn, p);
      });

      module.exports = Selector;

      /***/
    },
    /* 7 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var Map = __webpack_require__(28);
      var Set = __webpack_require__(8);

      var Element = __webpack_require__(14);

      // factory for generating edge ids when no id is specified for a new element
      var idFactory = {
        generate: function generate(cy, element, tryThisId) {
          var id = tryThisId != null ? tryThisId : util.uuid();

          while (cy.hasElementWithId(id)) {
            id = util.uuid();
          }

          return id;
        }
      };

      // represents a set of nodes, edges, or both together
      var Collection = function Collection(cy, elements, options) {
        if (cy === undefined || !is.core(cy)) {
          util.error('A collection must have a reference to the core');
          return;
        }

        var map = new Map();
        var createdElements = false;

        if (!elements) {
          elements = [];
        } else if (elements.length > 0 && is.plainObject(elements[0]) && !is.element(elements[0])) {
          createdElements = true;

          // make elements from json and restore all at once later
          var eles = [];
          var elesIds = new Set();

          for (var i = 0, l = elements.length; i < l; i++) {
            var json = elements[i];

            if (json.data == null) {
              json.data = {};
            }

            var data = json.data;

            // make sure newly created elements have valid ids
            if (data.id == null) {
              data.id = idFactory.generate(cy, json);
            } else if (cy.hasElementWithId(data.id) || elesIds.has(data.id)) {
              continue; // can't create element if prior id already exists
            }

            var ele = new Element(cy, json, false);
            eles.push(ele);
            elesIds.add(data.id);
          }

          elements = eles;
        }

        this.length = 0;

        for (var _i = 0, _l = elements.length; _i < _l; _i++) {
          var element = elements[_i];
          if (element == null) {
            continue;
          }

          var id = element._private.data.id;

          if (options == null || options.unique && !map.has(id)) {
            map.set(id, {
              index: this.length,
              ele: element
            });

            this[this.length] = element;
            this.length++;
          }
        }

        this._private = {
          cy: cy,
          map: map
        };

        // restore the elements if we created them from json
        if (createdElements) {
          this.restore();
        }
      };

      // Functions
      ////////////////////////////////////////////////////////////////////////////////////////////////////

      // keep the prototypes in sync (an element has the same functions as a collection)
      // and use elefn and elesfn as shorthands to the prototypes
      var elesfn = Element.prototype = Collection.prototype;

      elesfn.instanceString = function () {
        return 'collection';
      };

      elesfn.spawn = function (cy, eles, opts) {
        if (!is.core(cy)) {
          // cy is optional
          opts = eles;
          eles = cy;
          cy = this.cy();
        }

        return new Collection(cy, eles, opts);
      };

      elesfn.spawnSelf = function () {
        return this.spawn(this);
      };

      elesfn.cy = function () {
        return this._private.cy;
      };

      elesfn.renderer = function () {
        return this._private.cy.renderer();
      };

      elesfn.element = function () {
        return this[0];
      };

      elesfn.collection = function () {
        if (is.collection(this)) {
          return this;
        } else {
          // an element
          return new Collection(this._private.cy, [this]);
        }
      };

      elesfn.unique = function () {
        return new Collection(this._private.cy, this, { unique: true });
      };

      elesfn.hasElementWithId = function (id) {
        return this._private.map.has(id);
      };

      elesfn.getElementById = function (id) {
        var cy = this._private.cy;
        var entry = this._private.map.get(id);

        return entry ? entry.ele : new Collection(cy); // get ele or empty collection
      };

      elesfn.$id = elesfn.getElementById;

      elesfn.poolIndex = function () {
        var cy = this._private.cy;
        var eles = cy._private.elements;
        var id = this._private.data.id;

        return eles._private.map.get(id).index;
      };

      elesfn.json = function (obj) {
        var ele = this.element();
        var cy = this.cy();

        if (ele == null && obj) {
          return this;
        } // can't set to no eles

        if (ele == null) {
          return undefined;
        } // can't get from no eles

        var p = ele._private;

        if (is.plainObject(obj)) {
          // set

          cy.startBatch();

          if (obj.data) {
            ele.data(obj.data);
          }

          if (obj.position) {
            ele.position(obj.position);
          }

          // ignore group -- immutable

          var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
            var obj_k = obj[k];

            if (obj_k != null && obj_k !== p[k]) {
              if (obj_k) {
                ele[trueFnName]();
              } else {
                ele[falseFnName]();
              }
            }
          };

          checkSwitch('removed', 'remove', 'restore');

          checkSwitch('selected', 'select', 'unselect');

          checkSwitch('selectable', 'selectify', 'unselectify');

          checkSwitch('locked', 'lock', 'unlock');

          checkSwitch('grabbable', 'grabify', 'ungrabify');

          if (obj.classes != null) {
            ele.classes(obj.classes);
          }

          cy.endBatch();

          return this;
        } else if (obj === undefined) {
          // get

          var json = {
            data: util.copy(p.data),
            position: util.copy(p.position),
            group: p.group,
            removed: p.removed,
            selected: p.selected,
            selectable: p.selectable,
            locked: p.locked,
            grabbable: p.grabbable,
            classes: null
          };

          json.classes = '';

          var i = 0;
          p.classes.forEach(function (cls) {
            return json.classes += i++ === 0 ? cls : ' ' + cls;
          });

          return json;
        }
      };

      elesfn.jsons = function () {
        var jsons = [];

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var json = ele.json();

          jsons.push(json);
        }

        return jsons;
      };

      elesfn.clone = function () {
        var cy = this.cy();
        var elesArr = [];

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var json = ele.json();
          var clone = new Element(cy, json, false); // NB no restore

          elesArr.push(clone);
        }

        return new Collection(cy, elesArr);
      };
      elesfn.copy = elesfn.clone;

      elesfn.restore = function (notifyRenderer) {
        var self = this;
        var cy = self.cy();
        var cy_p = cy._private;

        if (notifyRenderer === undefined) {
          notifyRenderer = true;
        }

        // create arrays of nodes and edges, since we need to
        // restore the nodes first
        var nodes = [];
        var edges = [];
        var elements = void 0;
        for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {
          var ele = self[_i2];

          if (!ele.removed()) {
            // don't need to handle this ele
            continue;
          }

          // keep nodes first in the array and edges after
          if (ele.isNode()) {
            // put to front of array if node
            nodes.push(ele);
          } else {
            // put to end of array if edge
            edges.push(ele);
          }
        }

        elements = nodes.concat(edges);

        var i = void 0;
        var removeFromElements = function removeFromElements() {
          elements.splice(i, 1);
          i--;
        };

        // now, restore each element
        for (i = 0; i < elements.length; i++) {
          var _ele = elements[i];

          var _private = _ele._private;
          var data = _private.data;

          // the traversal cache should start fresh when ele is added
          _ele.clearTraversalCache();

          // set id and validate
          if (data.id === undefined) {
            data.id = idFactory.generate(cy, _ele);
          } else if (is.number(data.id)) {
            data.id = '' + data.id; // now it's a string
          } else if (is.emptyString(data.id) || !is.string(data.id)) {
            util.error('Can not create element with invalid string ID `' + data.id + '`');

            // can't create element if it has empty string as id or non-string id
            removeFromElements();
            continue;
          } else if (cy.hasElementWithId(data.id)) {
            util.error('Can not create second element with ID `' + data.id + '`');

            // can't create element if one already has that id
            removeFromElements();
            continue;
          }

          var id = data.id; // id is finalised, now let's keep a ref

          if (_ele.isNode()) {
            // extra checks for nodes
            var pos = _private.position;

            // make sure the nodes have a defined position

            if (pos.x == null) {
              pos.x = 0;
            }

            if (pos.y == null) {
              pos.y = 0;
            }
          }

          if (_ele.isEdge()) {
            // extra checks for edges

            var edge = _ele;
            var fields = ['source', 'target'];
            var fieldsLength = fields.length;
            var badSourceOrTarget = false;
            for (var j = 0; j < fieldsLength; j++) {

              var field = fields[j];
              var val = data[field];

              if (is.number(val)) {
                val = data[field] = '' + data[field]; // now string
              }

              if (val == null || val === '') {
                // can't create if source or target is not defined properly
                util.error('Can not create edge `' + id + '` with unspecified ' + field);
                badSourceOrTarget = true;
              } else if (!cy.hasElementWithId(val)) {
                // can't create edge if one of its nodes doesn't exist
                util.error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
                badSourceOrTarget = true;
              }
            }

            if (badSourceOrTarget) {
              removeFromElements();continue;
            } // can't create this

            var src = cy.getElementById(data.source);
            var tgt = cy.getElementById(data.target);

            src._private.edges.push(edge);
            tgt._private.edges.push(edge);

            edge._private.source = src;
            edge._private.target = tgt;
          } // if is edge

          // create mock ids / indexes maps for element so it can be used like collections
          _private.map = new Map();
          _private.map.set(id, { ele: _ele, index: 0 });

          _private.removed = false;
          cy.addToPool(_ele);
        } // for each element

        // do compound node sanity checks
        for (var _i3 = 0; _i3 < nodes.length; _i3++) {
          // each node
          var node = nodes[_i3];
          var _data = node._private.data;

          if (is.number(_data.parent)) {
            // then automake string
            _data.parent = '' + _data.parent;
          }

          var parentId = _data.parent;

          var specifiedParent = parentId != null;

          if (specifiedParent) {
            var parent = cy.getElementById(parentId);

            if (parent.empty()) {
              // non-existant parent; just remove it
              _data.parent = undefined;
            } else {
              var selfAsParent = false;
              var ancestor = parent;
              while (!ancestor.empty()) {
                if (node.same(ancestor)) {
                  // mark self as parent and remove from data
                  selfAsParent = true;
                  _data.parent = undefined; // remove parent reference

                  // exit or we loop forever
                  break;
                }

                ancestor = ancestor.parent();
              }

              if (!selfAsParent) {
                // connect with children
                parent[0]._private.children.push(node);
                node._private.parent = parent[0];

                // let the core know we have a compound graph
                cy_p.hasCompoundNodes = true;
              }
            } // else
          } // if specified parent
        } // for each node

        if (elements.length > 0) {
          var restored = new Collection(cy, elements);

          for (var _i4 = 0; _i4 < restored.length; _i4++) {
            var _ele2 = restored[_i4];

            if (_ele2.isNode()) {
              continue;
            }

            // adding an edge invalidates the traversal caches for the parallel edges
            _ele2.parallelEdges().clearTraversalCache();

            // adding an edge invalidates the traversal cache for the connected nodes
            _ele2.source().clearTraversalCache();
            _ele2.target().clearTraversalCache();
          }

          var toUpdateStyle = void 0;

          if (cy_p.hasCompoundNodes) {
            toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
          } else {
            toUpdateStyle = restored;
          }

          toUpdateStyle.dirtyCompoundBoundsCache().updateStyle(notifyRenderer);

          if (notifyRenderer) {
            restored.emitAndNotify('add');
          } else {
            restored.emit('add');
          }
        }

        return self; // chainability
      };

      elesfn.removed = function () {
        var ele = this[0];
        return ele && ele._private.removed;
      };

      elesfn.inside = function () {
        var ele = this[0];
        return ele && !ele._private.removed;
      };

      elesfn.remove = function (notifyRenderer) {
        var self = this;
        var removed = [];
        var elesToRemove = [];
        var elesToRemoveIds = {};
        var cy = self._private.cy;

        if (notifyRenderer === undefined) {
          notifyRenderer = true;
        }

        // add connected edges
        function addConnectedEdges(node) {
          var edges = node._private.edges;
          for (var i = 0; i < edges.length; i++) {
            add(edges[i]);
          }
        }

        // add descendant nodes
        function addChildren(node) {
          var children = node._private.children;

          for (var i = 0; i < children.length; i++) {
            add(children[i]);
          }
        }

        function add(ele) {
          var alreadyAdded = elesToRemoveIds[ele.id()];
          if (ele.removed() || alreadyAdded) {
            return;
          } else {
            elesToRemoveIds[ele.id()] = true;
          }

          if (ele.isNode()) {
            elesToRemove.push(ele); // nodes are removed last

            addConnectedEdges(ele);
            addChildren(ele);
          } else {
            elesToRemove.unshift(ele); // edges are removed first
          }
        }

        // make the list of elements to remove
        // (may be removing more than specified due to connected edges etc)

        for (var i = 0, l = self.length; i < l; i++) {
          var ele = self[i];

          add(ele);
        }

        function removeEdgeRef(node, edge) {
          var connectedEdges = node._private.edges;

          util.removeFromArray(connectedEdges, edge);

          // removing an edges invalidates the traversal cache for its nodes
          node.clearTraversalCache();
        }

        function removeParallelRefs(edge) {
          // removing an edge invalidates the traversal caches for the parallel edges
          edge.parallelEdges().clearTraversalCache();
        }

        var alteredParents = [];
        alteredParents.ids = {};

        function removeChildRef(parent, ele) {
          ele = ele[0];
          parent = parent[0];

          var children = parent._private.children;
          var pid = parent.id();

          util.removeFromArray(children, ele);

          if (!alteredParents.ids[pid]) {
            alteredParents.ids[pid] = true;
            alteredParents.push(parent);
          }
        }

        self.dirtyCompoundBoundsCache();

        cy.removeFromPool(elesToRemove); // remove from core pool

        for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {
          var _ele3 = elesToRemove[_i5];

          // mark as removed
          _ele3._private.removed = true;

          // add to list of removed elements
          removed.push(_ele3);

          if (_ele3.isEdge()) {
            // remove references to this edge in its connected nodes
            var src = _ele3.source()[0];
            var tgt = _ele3.target()[0];

            removeEdgeRef(src, _ele3);
            removeEdgeRef(tgt, _ele3);
            removeParallelRefs(_ele3);
          } else {
            // remove reference to parent
            var parent = _ele3.parent();

            if (parent.length !== 0) {
              removeChildRef(parent, _ele3);
            }
          }
        }

        // check to see if we have a compound graph or not
        var elesStillInside = cy._private.elements;
        cy._private.hasCompoundNodes = false;
        for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {
          var _ele4 = elesStillInside[_i6];

          if (_ele4.isParent()) {
            cy._private.hasCompoundNodes = true;
            break;
          }
        }

        var removedElements = new Collection(this.cy(), removed);
        if (removedElements.size() > 0) {
          // must manually notify since trigger won't do this automatically once removed

          if (notifyRenderer) {
            this.cy().notify({
              type: 'remove',
              eles: removedElements
            });
          }

          removedElements.emit('remove');
        }

        // the parents who were modified by the removal need their style updated
        for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {
          var _ele5 = alteredParents[_i7];

          if (!_ele5.removed()) {
            _ele5.updateStyle();
          }
        }

        return new Collection(cy, removed);
      };

      elesfn.move = function (struct) {
        var cy = this._private.cy;

        if (struct.source !== undefined || struct.target !== undefined) {
          var srcId = struct.source;
          var tgtId = struct.target;
          var srcExists = cy.hasElementWithId(srcId);
          var tgtExists = cy.hasElementWithId(tgtId);

          if (srcExists || tgtExists) {
            var jsons = this.jsons();

            this.remove();

            for (var i = 0; i < jsons.length; i++) {
              var json = jsons[i];
              var ele = this[i];

              if (json.group === 'edges') {
                if (srcExists) {
                  json.data.source = srcId;
                }

                if (tgtExists) {
                  json.data.target = tgtId;
                }

                json.scratch = ele._private.scratch;
              }
            }

            return cy.add(jsons);
          }
        } else if (struct.parent !== undefined) {
          // move node to new parent
          var parentId = struct.parent;
          var parentExists = parentId === null || cy.hasElementWithId(parentId);

          if (parentExists) {
            var _jsons = this.jsons();
            var descs = this.descendants();
            var descsEtcJsons = descs.union(descs.union(this).connectedEdges()).jsons();

            this.remove(); // NB: also removes descendants and their connected edges

            for (var _i8 = 0; _i8 < _jsons.length; _i8++) {
              var _json = _jsons[_i8];
              var _ele6 = this[_i8];

              if (_json.group === 'nodes') {
                _json.data.parent = parentId === null ? undefined : parentId;

                _json.scratch = _ele6._private.scratch;
              }
            }

            return cy.add(_jsons.concat(descsEtcJsons));
          }
        }

        return this; // if nothing done
      };

      [__webpack_require__(29), __webpack_require__(42), __webpack_require__(47), __webpack_require__(48), __webpack_require__(53), __webpack_require__(54), __webpack_require__(55), __webpack_require__(56), __webpack_require__(61), __webpack_require__(62), __webpack_require__(63), __webpack_require__(7), __webpack_require__(64), __webpack_require__(65), __webpack_require__(66), __webpack_require__(67), __webpack_require__(68)].forEach(function (props) {
        util.extend(elesfn, props);
      });

      module.exports = Collection;

      /***/
    },
    /* 8 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _createClass = function () {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
          }
        }return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
        };
      }();

      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      /* global Set */

      var undef = true ? 'undefined' : _typeof(undefined);

      var ObjectSet = function () {
        function ObjectSet(arrayOrObjectSet) {
          _classCallCheck(this, ObjectSet);

          this._obj = Object.create(null);

          if (arrayOrObjectSet != null) {
            var arr = void 0;

            if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
              arr = arrayOrObjectSet.toArray();
            } else {
              arr = arrayOrObjectSet;
            }

            for (var i = 0; i < arr.length; i++) {
              this.add(arr[i]);
            }
          }
        }

        _createClass(ObjectSet, [{
          key: 'instanceString',
          value: function instanceString() {
            return 'set';
          }
        }, {
          key: 'add',
          value: function add(val) {
            this._obj[val] = 1;
          }
        }, {
          key: 'delete',
          value: function _delete(val) {
            this._obj[val] = 0;
          }
        }, {
          key: 'clear',
          value: function clear() {
            this._obj = Object.create(null);
          }
        }, {
          key: 'has',
          value: function has(val) {
            return this._obj[val] === 1;
          }
        }, {
          key: 'toArray',
          value: function toArray() {
            var _this = this;

            return Object.keys(this._obj).filter(function (key) {
              return _this.has(key);
            });
          }
        }, {
          key: 'forEach',
          value: function forEach(callback, thisArg) {
            return this.toArray().forEach(callback, thisArg);
          }
        }, {
          key: 'size',
          get: function get() {
            return this.toArray().length;
          }
        }]);

        return ObjectSet;
      }();

      // TODO use the stdlib Set in future...
      // module.exports = typeof Set !== undef ? Set : ObjectSet;


      module.exports = ObjectSet;

      /***/
    },
    /* 9 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = __webpack_require__(32);

      /***/
    },
    /* 10 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      // storage for parsed queries

      var newQuery = function newQuery() {
        return {
          classes: [],
          colonSelectors: [],
          data: [],
          group: null,
          ids: [],
          meta: [],

          // fake selectors
          collection: null, // a collection to match against
          filter: null, // filter function

          // these are defined in the upward direction rather than down (e.g. child)
          // because we need to go up in Selector.filter()
          parent: null, // parent query obj
          ancestor: null, // ancestor query obj
          subject: null, // defines subject in compound query (subject query obj; points to self if subject)

          // use these only when subject has been defined
          child: null,
          descendant: null
        };
      };

      module.exports = newQuery;

      /***/
    },
    /* 11 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var Event = __webpack_require__(16);

      var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")
      var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

      var defaults = {
        qualifierCompare: function qualifierCompare(q1, q2) {
          return q1 === q2;
        },
        eventMatches: function eventMatches() /*context, listener, eventObj*/{
          return true;
        },
        eventFields: function eventFields() /*context*/{
          return {};
        },
        callbackContext: function callbackContext(context /*, listener, eventObj*/) {
          return context;
        },
        beforeEmit: function beforeEmit() /* context, listener, eventObj */{},
        afterEmit: function afterEmit() /* context, listener, eventObj */{},
        bubble: function bubble() /*context*/{
          return false;
        },
        parent: function parent() /*context*/{
          return null;
        },
        context: undefined
      };

      function Emitter(opts) {
        util.assign(this, defaults, opts);

        this.listeners = [];
        this.emitting = 0;
      }

      var p = Emitter.prototype;

      var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
        if (is.fn(qualifier)) {
          callback = qualifier;
          qualifier = null;
        }

        if (confOverrides) {
          if (conf == null) {
            conf = confOverrides;
          } else {
            conf = util.assign({}, conf, confOverrides);
          }
        }

        var eventList = events.split(/\s+/);

        for (var i = 0; i < eventList.length; i++) {
          var evt = eventList[i];

          if (is.emptyString(evt)) {
            continue;
          }

          var match = evt.match(eventRegex); // type[.namespace]

          if (match) {
            var type = match[1];
            var namespace = match[2] ? match[2] : null;
            var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

            if (ret === false) {
              break;
            } // allow exiting early
          }
        }
      };

      var makeEventObj = function makeEventObj(self, obj) {
        return new Event(obj.type, util.assign(obj, self.eventFields(self.context)));
      };

      var forEachEventObj = function forEachEventObj(self, handler, events) {
        if (is.event(events)) {
          handler(self, events);

          return;
        } else if (is.plainObject(events)) {
          handler(self, makeEventObj(self, events));

          return;
        }

        var eventList = events.split(/\s+/);

        for (var i = 0; i < eventList.length; i++) {
          var evt = eventList[i];

          if (is.emptyString(evt)) {
            continue;
          }

          var match = evt.match(eventRegex); // type[.namespace]

          if (match) {
            var type = match[1];
            var namespace = match[2] ? match[2] : null;
            var eventObj = makeEventObj(self, {
              type: type,
              namespace: namespace,
              target: self.context
            });

            handler(self, eventObj);
          }
        }
      };

      p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
        forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
          if (is.fn(callback)) {
            self.listeners.push({
              event: event, // full event string
              callback: callback, // callback to run
              type: type, // the event type (e.g. 'click')
              namespace: namespace, // the event namespace (e.g. ".foo")
              qualifier: qualifier, // a restriction on whether to match this emitter
              conf: conf // additional configuration
            });
          }
        }, events, qualifier, callback, conf, confOverrides);

        return this;
      };

      p.one = function (events, qualifier, callback, conf) {
        return this.on(events, qualifier, callback, conf, { one: true });
      };

      p.removeListener = p.off = function (events, qualifier, callback, conf) {
        var _this = this;

        if (this.emitting !== 0) {
          this.listeners = util.copyArray(this.listeners);
        }

        var listeners = this.listeners;

        var _loop = function _loop(i) {
          var listener = listeners[i];

          forEachEvent(_this, function (self, event, type, namespace, qualifier, callback /*, conf*/) {
            if (listener.type === type && (!namespace || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
              listeners.splice(i, 1);

              return false;
            }
          }, events, qualifier, callback, conf);
        };

        for (var i = listeners.length - 1; i >= 0; i--) {
          _loop(i);
        }

        return this;
      };

      p.emit = p.trigger = function (events, extraParams, manualCallback) {
        var listeners = this.listeners;
        var numListenersBeforeEmit = listeners.length;

        this.emitting++;

        if (!is.array(extraParams)) {
          extraParams = [extraParams];
        }

        forEachEventObj(this, function (self, eventObj) {
          if (manualCallback != null) {
            listeners = [{
              event: eventObj.event,
              type: eventObj.type,
              namespace: eventObj.namespace,
              callback: manualCallback
            }];

            numListenersBeforeEmit = listeners.length;
          }

          var _loop2 = function _loop2(i) {
            var listener = listeners[i];

            if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
              var args = [eventObj];

              if (extraParams != null) {
                util.push(args, extraParams);
              }

              self.beforeEmit(self.context, listener, eventObj);

              if (listener.conf && listener.conf.one) {
                self.listeners = self.listeners.filter(function (l) {
                  return l !== listener;
                });
              }

              var context = self.callbackContext(self.context, listener, eventObj);
              var ret = listener.callback.apply(context, args);

              self.afterEmit(self.context, listener, eventObj);

              if (ret === false) {
                eventObj.stopPropagation();
                eventObj.preventDefault();
              }
            } // if listener matches
          };

          for (var i = 0; i < numListenersBeforeEmit; i++) {
            _loop2(i);
          } // for listener

          if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
            self.parent(self.context).emit(eventObj, extraParams);
          }
        }, events);

        this.emitting--;

        return this;
      };

      module.exports = Emitter;

      /***/
    },
    /* 12 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var window = __webpack_require__(3);
      var util = __webpack_require__(1);
      var Collection = __webpack_require__(7);
      var is = __webpack_require__(0);
      var Promise = __webpack_require__(5);
      var define = __webpack_require__(4);

      var Core = function Core(opts) {
        var cy = this;

        opts = util.extend({}, opts);

        var container = opts.container;

        // allow for passing a wrapped jquery object
        // e.g. cytoscape({ container: $('#cy') })
        if (container && !is.htmlElement(container) && is.htmlElement(container[0])) {
          container = container[0];
        }

        var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery
        reg = reg || {};

        if (reg && reg.cy) {
          reg.cy.destroy();

          reg = {}; // old instance => replace reg completely
        }

        var readies = reg.readies = reg.readies || [];

        if (container) {
          container._cyreg = reg;
        } // make sure container assoc'd reg points to this cy
        reg.cy = cy;

        var head = window !== undefined && container !== undefined && !opts.headless;
        var options = opts;
        options.layout = util.extend({ name: head ? 'grid' : 'null' }, options.layout);
        options.renderer = util.extend({ name: head ? 'canvas' : 'null' }, options.renderer);

        var defVal = function defVal(def, val, altVal) {
          if (val !== undefined) {
            return val;
          } else if (altVal !== undefined) {
            return altVal;
          } else {
            return def;
          }
        };

        var _p = this._private = {
          container: container, // html dom ele container
          ready: false, // whether ready has been triggered
          options: options, // cached options
          elements: new Collection(this), // elements in the graph
          listeners: [], // list of listeners
          aniEles: new Collection(this), // elements being animated
          scratch: {}, // scratch object for core
          layout: null,
          renderer: null,
          destroyed: false, // whether destroy was called
          notificationsEnabled: true, // whether notifications are sent to the renderer
          minZoom: 1e-50,
          maxZoom: 1e50,
          zoomingEnabled: defVal(true, options.zoomingEnabled),
          userZoomingEnabled: defVal(true, options.userZoomingEnabled),
          panningEnabled: defVal(true, options.panningEnabled),
          userPanningEnabled: defVal(true, options.userPanningEnabled),
          boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
          autolock: defVal(false, options.autolock, options.autolockNodes),
          autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
          autounselectify: defVal(false, options.autounselectify),
          styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
          zoom: is.number(options.zoom) ? options.zoom : 1,
          pan: {
            x: is.plainObject(options.pan) && is.number(options.pan.x) ? options.pan.x : 0,
            y: is.plainObject(options.pan) && is.number(options.pan.y) ? options.pan.y : 0
          },
          animation: { // object for currently-running animations
            current: [],
            queue: []
          },
          hasCompoundNodes: false
        };

        this.createEmitter();

        // set selection type
        var selType = options.selectionType;
        if (selType === undefined || selType !== 'additive' && selType !== 'single') {
          // then set default

          _p.selectionType = 'single';
        } else {
          _p.selectionType = selType;
        }

        // init zoom bounds
        if (is.number(options.minZoom) && is.number(options.maxZoom) && options.minZoom < options.maxZoom) {
          _p.minZoom = options.minZoom;
          _p.maxZoom = options.maxZoom;
        } else if (is.number(options.minZoom) && options.maxZoom === undefined) {
          _p.minZoom = options.minZoom;
        } else if (is.number(options.maxZoom) && options.minZoom === undefined) {
          _p.maxZoom = options.maxZoom;
        }

        var loadExtData = function loadExtData(extData, next) {
          var anyIsPromise = extData.some(is.promise);

          if (anyIsPromise) {
            return Promise.all(extData).then(next); // load all data asynchronously, then exec rest of init
          } else {
            next(extData); // exec synchronously for convenience
          }
        };

        // start with the default stylesheet so we have something before loading an external stylesheet
        if (_p.styleEnabled) {
          cy.setStyle([]);
        }

        // create the renderer
        cy.initRenderer(util.extend({
          hideEdgesOnViewport: options.hideEdgesOnViewport,
          textureOnViewport: options.textureOnViewport,
          wheelSensitivity: is.number(options.wheelSensitivity) && options.wheelSensitivity > 0 ? options.wheelSensitivity : 1,
          motionBlur: options.motionBlur === undefined ? false : options.motionBlur, // off by default
          motionBlurOpacity: options.motionBlurOpacity === undefined ? 0.05 : options.motionBlurOpacity,
          pixelRatio: is.number(options.pixelRatio) && options.pixelRatio > 0 ? options.pixelRatio : undefined,
          desktopTapThreshold: options.desktopTapThreshold === undefined ? 4 : options.desktopTapThreshold,
          touchTapThreshold: options.touchTapThreshold === undefined ? 8 : options.touchTapThreshold
        }, options.renderer));

        var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
          cy.notifications(false);

          // remove old elements
          var oldEles = cy.mutableElements();
          if (oldEles.length > 0) {
            oldEles.remove();
          }

          if (elements != null) {
            if (is.plainObject(elements) || is.array(elements)) {
              cy.add(elements);
            }
          }

          cy.one('layoutready', function (e) {
            cy.notifications(true);
            cy.emit(e); // we missed this event by turning notifications off, so pass it on

            cy.notify({
              type: 'load',
              eles: cy.mutableElements()
            });

            cy.one('load', onload);
            cy.emit('load');
          }).one('layoutstop', function () {
            cy.one('done', ondone);
            cy.emit('done');
          });

          var layoutOpts = util.extend({}, cy._private.options.layout);
          layoutOpts.eles = cy.elements();

          cy.layout(layoutOpts).run();
        };

        loadExtData([options.style, options.elements], function (thens) {
          var initStyle = thens[0];
          var initEles = thens[1];

          // init style
          if (_p.styleEnabled) {
            cy.style().append(initStyle);
          }

          // initial load
          setElesAndLayout(initEles, function () {
            // onready
            cy.startAnimationLoop();
            _p.ready = true;

            // if a ready callback is specified as an option, the bind it
            if (is.fn(options.ready)) {
              cy.on('ready', options.ready);
            }

            // bind all the ready handlers registered before creating this instance
            for (var i = 0; i < readies.length; i++) {
              var fn = readies[i];
              cy.on('ready', fn);
            }
            if (reg) {
              reg.readies = [];
            } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc

            cy.emit('ready');
          }, options.done);
        });
      };

      var corefn = Core.prototype; // short alias

      util.extend(corefn, {
        instanceString: function instanceString() {
          return 'core';
        },

        isReady: function isReady() {
          return this._private.ready;
        },

        isDestroyed: function isDestroyed() {
          return this._private.destroyed;
        },

        ready: function ready(fn) {
          if (this.isReady()) {
            this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
          } else {
            this.on('ready', fn);
          }

          return this;
        },

        destroy: function destroy() {
          var cy = this;
          if (cy.isDestroyed()) return;

          cy.stopAnimationLoop();

          cy.destroyRenderer();

          this.emit('destroy');

          cy._private.destroyed = true;

          return cy;
        },

        hasElementWithId: function hasElementWithId(id) {
          return this._private.elements.hasElementWithId(id);
        },

        getElementById: function getElementById(id) {
          return this._private.elements.getElementById(id);
        },

        selectionType: function selectionType() {
          return this._private.selectionType;
        },

        hasCompoundNodes: function hasCompoundNodes() {
          return this._private.hasCompoundNodes;
        },

        headless: function headless() {
          return this._private.options.renderer.name === 'null';
        },

        styleEnabled: function styleEnabled() {
          return this._private.styleEnabled;
        },

        addToPool: function addToPool(eles) {
          this._private.elements.merge(eles);

          return this; // chaining
        },

        removeFromPool: function removeFromPool(eles) {
          this._private.elements.unmerge(eles);

          return this;
        },

        container: function container() {
          return this._private.container;
        },

        options: function options() {
          return util.copy(this._private.options);
        },

        json: function json(obj) {
          var cy = this;
          var _p = cy._private;
          var eles = cy.mutableElements();

          if (is.plainObject(obj)) {
            // set

            cy.startBatch();

            if (obj.elements) {
              var idInJson = {};

              var updateEles = function updateEles(jsons, gr) {
                for (var i = 0; i < jsons.length; i++) {
                  var json = jsons[i];
                  var id = json.data.id;
                  var ele = cy.getElementById(id);

                  idInJson[id] = true;

                  if (ele.length !== 0) {
                    // existing element should be updated
                    ele.json(json);
                  } else {
                    // otherwise should be added
                    if (gr) {
                      cy.add(util.extend({ group: gr }, json));
                    } else {
                      cy.add(json);
                    }
                  }
                }
              };

              if (is.array(obj.elements)) {
                // elements: []
                updateEles(obj.elements);
              } else {
                // elements: { nodes: [], edges: [] }
                var grs = ['nodes', 'edges'];
                for (var i = 0; i < grs.length; i++) {
                  var gr = grs[i];
                  var elements = obj.elements[gr];

                  if (is.array(elements)) {
                    updateEles(elements, gr);
                  }
                }
              }

              // elements not specified in json should be removed
              eles.stdFilter(function (ele) {
                return !idInJson[ele.id()];
              }).remove();
            }

            if (obj.style) {
              cy.style(obj.style);
            }

            if (obj.zoom != null && obj.zoom !== _p.zoom) {
              cy.zoom(obj.zoom);
            }

            if (obj.pan) {
              if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
                cy.pan(obj.pan);
              }
            }

            var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];

            for (var _i = 0; _i < fields.length; _i++) {
              var f = fields[_i];

              if (obj[f] != null) {
                cy[f](obj[f]);
              }
            }

            cy.endBatch();

            return this; // chaining
          } else if (obj === undefined) {
            // get
            var json = {};

            json.elements = {};
            eles.forEach(function (ele) {
              var group = ele.group();

              if (!json.elements[group]) {
                json.elements[group] = [];
              }

              json.elements[group].push(ele.json());
            });

            if (this._private.styleEnabled) {
              json.style = cy.style().json();
            }

            json.zoomingEnabled = cy._private.zoomingEnabled;
            json.userZoomingEnabled = cy._private.userZoomingEnabled;
            json.zoom = cy._private.zoom;
            json.minZoom = cy._private.minZoom;
            json.maxZoom = cy._private.maxZoom;
            json.panningEnabled = cy._private.panningEnabled;
            json.userPanningEnabled = cy._private.userPanningEnabled;
            json.pan = util.copy(cy._private.pan);
            json.boxSelectionEnabled = cy._private.boxSelectionEnabled;
            json.renderer = util.copy(cy._private.options.renderer);
            json.hideEdgesOnViewport = cy._private.options.hideEdgesOnViewport;
            json.textureOnViewport = cy._private.options.textureOnViewport;
            json.wheelSensitivity = cy._private.options.wheelSensitivity;
            json.motionBlur = cy._private.options.motionBlur;

            return json;
          }
        },

        scratch: define.data({
          field: 'scratch',
          bindingEvent: 'scratch',
          allowBinding: true,
          allowSetting: true,
          settingEvent: 'scratch',
          settingTriggersEvent: true,
          triggerFnName: 'trigger',
          allowGetting: true
        }),

        removeScratch: define.removeData({
          field: 'scratch',
          event: 'scratch',
          triggerFnName: 'trigger',
          triggerEvent: true
        })

      });

      corefn.$id = corefn.getElementById;

      [__webpack_require__(69), __webpack_require__(70), __webpack_require__(78), __webpack_require__(79), __webpack_require__(80), __webpack_require__(81), __webpack_require__(82), __webpack_require__(83), __webpack_require__(84), __webpack_require__(93)].forEach(function (props) {
        util.extend(corefn, props);
      });

      module.exports = Core;

      /***/
    },
    /* 13 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = function memoize(fn, keyFn) {
        if (!keyFn) {
          keyFn = function keyFn() {
            if (arguments.length === 1) {
              return arguments[0];
            } else if (arguments.length === 0) {
              return 'undefined';
            }

            var args = [];

            for (var i = 0; i < arguments.length; i++) {
              args.push(arguments[i]);
            }

            return args.join('$');
          };
        }

        var memoizedFn = function memoizedFn() {
          var self = this;
          var args = arguments;
          var ret = void 0;
          var k = keyFn.apply(self, args);
          var cache = memoizedFn.cache;

          if (!(ret = cache[k])) {
            ret = cache[k] = fn.apply(self, args);
          }

          return ret;
        };

        memoizedFn.cache = {};

        return memoizedFn;
      };

      /***/
    },
    /* 14 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var Set = __webpack_require__(8);

      // represents a node or an edge
      var Element = function Element(cy, params, restore) {
        restore = restore === undefined || restore ? true : false;

        if (cy === undefined || params === undefined || !is.core(cy)) {
          util.error('An element must have a core reference and parameters set');
          return;
        }

        var group = params.group;

        // try to automatically infer the group if unspecified
        if (group == null) {
          if (params.data && params.data.source != null && params.data.target != null) {
            group = 'edges';
          } else {
            group = 'nodes';
          }
        }

        // validate group
        if (group !== 'nodes' && group !== 'edges') {
          util.error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
          return;
        }

        // make the element array-like, just like a collection
        this.length = 1;
        this[0] = this;

        // NOTE: when something is added here, add also to ele.json()
        var _p = this._private = {
          cy: cy,
          single: true, // indicates this is an element
          data: params.data || {}, // data object
          position: params.position || {}, // (x, y) position pair
          autoWidth: undefined, // width and height of nodes calculated by the renderer when set to special 'auto' value
          autoHeight: undefined,
          autoPadding: undefined,
          compoundBoundsClean: false, // whether the compound dimensions need to be recalculated the next time dimensions are read
          listeners: [], // array of bound listeners
          group: group, // string; 'nodes' or 'edges'
          style: {}, // properties as set by the style
          rstyle: {}, // properties for style sent from the renderer to the core
          styleCxts: [], // applied style contexts from the styler
          removed: true, // whether it's inside the vis; true if removed (set true here since we call restore)
          selected: params.selected ? true : false, // whether it's selected
          selectable: params.selectable === undefined ? true : params.selectable ? true : false, // whether it's selectable
          locked: params.locked ? true : false, // whether the element is locked (cannot be moved)
          grabbed: false, // whether the element is grabbed by the mouse; renderer sets this privately
          grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false, // whether the element can be grabbed
          active: false, // whether the element is active from user interaction
          classes: new Set(), // map ( className => true )
          animation: { // object for currently-running animations
            current: [],
            queue: []
          },
          rscratch: {}, // object in which the renderer can store information
          scratch: params.scratch || {}, // scratch objects
          edges: [], // array of connected edges
          children: [], // array of children
          parent: null, // parent ref
          traversalCache: {}, // cache of output of traversal functions
          backgrounding: false // whether background images are loading
        };

        // renderedPosition overrides if specified
        if (params.renderedPosition) {
          var rpos = params.renderedPosition;
          var pan = cy.pan();
          var zoom = cy.zoom();

          _p.position = {
            x: (rpos.x - pan.x) / zoom,
            y: (rpos.y - pan.y) / zoom
          };
        }

        if (is.string(params.classes)) {
          var classes = params.classes.split(/\s+/);
          for (var i = 0, l = classes.length; i < l; i++) {
            var cls = classes[i];
            if (!cls || cls === '') {
              continue;
            }

            _p.classes.add(cls);
          }
        }

        if (params.style || params.css) {
          cy.style().applyBypass(this, params.style || params.css);
        }

        this.createEmitter();

        if (restore === undefined || restore) {
          this.restore();
        }
      };

      module.exports = Element;

      /***/
    },
    /* 15 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var stateSelectors = [{
        selector: ':selected',
        matches: function matches(ele) {
          return ele.selected();
        }
      }, {
        selector: ':unselected',
        matches: function matches(ele) {
          return !ele.selected();
        }
      }, {
        selector: ':selectable',
        matches: function matches(ele) {
          return ele.selectable();
        }
      }, {
        selector: ':unselectable',
        matches: function matches(ele) {
          return !ele.selectable();
        }
      }, {
        selector: ':locked',
        matches: function matches(ele) {
          return ele.locked();
        }
      }, {
        selector: ':unlocked',
        matches: function matches(ele) {
          return !ele.locked();
        }
      }, {
        selector: ':visible',
        matches: function matches(ele) {
          return ele.visible();
        }
      }, {
        selector: ':hidden',
        matches: function matches(ele) {
          return !ele.visible();
        }
      }, {
        selector: ':transparent',
        matches: function matches(ele) {
          return ele.transparent();
        }
      }, {
        selector: ':grabbed',
        matches: function matches(ele) {
          return ele.grabbed();
        }
      }, {
        selector: ':free',
        matches: function matches(ele) {
          return !ele.grabbed();
        }
      }, {
        selector: ':removed',
        matches: function matches(ele) {
          return ele.removed();
        }
      }, {
        selector: ':inside',
        matches: function matches(ele) {
          return !ele.removed();
        }
      }, {
        selector: ':grabbable',
        matches: function matches(ele) {
          return ele.grabbable();
        }
      }, {
        selector: ':ungrabbable',
        matches: function matches(ele) {
          return !ele.grabbable();
        }
      }, {
        selector: ':animated',
        matches: function matches(ele) {
          return ele.animated();
        }
      }, {
        selector: ':unanimated',
        matches: function matches(ele) {
          return !ele.animated();
        }
      }, {
        selector: ':parent',
        matches: function matches(ele) {
          return ele.isParent();
        }
      }, {
        selector: ':childless',
        matches: function matches(ele) {
          return ele.isChildless();
        }
      }, {
        selector: ':child',
        matches: function matches(ele) {
          return ele.isChild();
        }
      }, {
        selector: ':orphan',
        matches: function matches(ele) {
          return ele.isOrphan();
        }
      }, {
        selector: ':nonorphan',
        matches: function matches(ele) {
          return ele.isChild();
        }
      }, {
        selector: ':loop',
        matches: function matches(ele) {
          return ele.isLoop();
        }
      }, {
        selector: ':simple',
        matches: function matches(ele) {
          return ele.isSimple();
        }
      }, {
        selector: ':active',
        matches: function matches(ele) {
          return ele.active();
        }
      }, {
        selector: ':inactive',
        matches: function matches(ele) {
          return !ele.active();
        }
      }, {
        selector: ':backgrounding',
        matches: function matches(ele) {
          return ele.backgrounding();
        }
      }, {
        selector: ':nonbackgrounding',
        matches: function matches(ele) {
          return !ele.backgrounding();
        }
      }].sort(function (a, b) {
        // n.b. selectors that are starting substrings of others must have the longer ones first
        return util.sort.descending(a.selector, b.selector);
      });

      var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
        var lookup = stateSelectorMatches.lookup = stateSelectorMatches.lookup || function () {
          var selToFn = {};
          var s = void 0;

          for (var i = 0; i < stateSelectors.length; i++) {
            s = stateSelectors[i];

            selToFn[s.selector] = s.matches;
          }

          return selToFn;
        }();

        return lookup[sel](ele);
      };

      var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
        return s.selector;
      }).join('|') + ')';

      module.exports = { stateSelectors: stateSelectors, stateSelectorMatches: stateSelectorMatches, stateSelectorRegex: stateSelectorRegex };

      /***/
    },
    /* 16 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /*!
      Event object based on jQuery events, MIT license
      
      https://jquery.org/license/
      https://tldrlegal.com/license/mit-license
      https://github.com/jquery/jquery/blob/master/src/event.js
      */

      var Event = function Event(src, props) {
        this.recycle(src, props);
      };

      function returnFalse() {
        return false;
      }

      function returnTrue() {
        return true;
      }

      // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
      Event.prototype = {
        instanceString: function instanceString() {
          return 'event';
        },

        recycle: function recycle(src, props) {
          this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

          if (src != null && src.preventDefault) {
            // Browser Event object
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
          } else if (src != null && src.type) {
            // Plain object containing all event details
            props = src;
          } else {
            // Event string
            this.type = src;
          }

          // Put explicitly provided properties onto the event object
          if (props != null) {
            // more efficient to manually copy fields we use
            this.originalEvent = props.originalEvent;
            this.type = props.type != null ? props.type : this.type;
            this.cy = props.cy;
            this.target = props.target;
            this.position = props.position;
            this.renderedPosition = props.renderedPosition;
            this.namespace = props.namespace;
            this.layout = props.layout;
          }

          if (this.cy != null && this.position != null && this.renderedPosition == null) {
            // create a rendered position based on the passed position
            var pos = this.position;
            var zoom = this.cy.zoom();
            var pan = this.cy.pan();

            this.renderedPosition = {
              x: pos.x * zoom + pan.x,
              y: pos.y * zoom + pan.y
            };
          }

          // Create a timestamp if incoming event doesn't have one
          this.timeStamp = src && src.timeStamp || Date.now();
        },

        preventDefault: function preventDefault() {
          this.isDefaultPrevented = returnTrue;

          var e = this.originalEvent;
          if (!e) {
            return;
          }

          // if preventDefault exists run it on the original event
          if (e.preventDefault) {
            e.preventDefault();
          }
        },

        stopPropagation: function stopPropagation() {
          this.isPropagationStopped = returnTrue;

          var e = this.originalEvent;
          if (!e) {
            return;
          }

          // if stopPropagation exists run it on the original event
          if (e.stopPropagation) {
            e.stopPropagation();
          }
        },

        stopImmediatePropagation: function stopImmediatePropagation() {
          this.isImmediatePropagationStopped = returnTrue;
          this.stopPropagation();
        },

        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse
      };

      module.exports = Event;

      /***/
    },
    /* 17 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /**
       *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
       *  and z-index (low to high).  These styles affect how this applies:
       *
       *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
       *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
       *      root to leaves of the compound graph.  The last drawn is `top`.
       *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
       *      `manual` ignores this convention and draws based on the `z-index` value setting.
       *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
       *      `z-index` will be drawn on top of an element with a lower `z-index`.
       */

      var util = __webpack_require__(1);

      var zIndexSort = function zIndexSort(a, b) {
        var cy = a.cy();
        var hasCompoundNodes = cy.hasCompoundNodes();

        function getDepth(ele) {
          var style = ele.pstyle('z-compound-depth');
          if (style.value === 'auto') {
            return hasCompoundNodes ? ele.zDepth() : 0;
          } else if (style.value === 'bottom') {
            return -1;
          } else if (style.value === 'top') {
            return util.MAX_INT;
          }
          // 'orphan'
          return 0;
        }
        var depthDiff = getDepth(a) - getDepth(b);
        if (depthDiff !== 0) {
          return depthDiff;
        }

        function getEleDepth(ele) {
          var style = ele.pstyle('z-index-compare');
          if (style.value === 'auto') {
            return ele.isNode() ? 1 : 0;
          }
          // 'manual'
          return 0;
        }
        var eleDiff = getEleDepth(a) - getEleDepth(b);
        if (eleDiff !== 0) {
          return eleDiff;
        }

        var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;
        if (zDiff !== 0) {
          return zDiff;
        }
        // compare indices in the core (order added to graph w/ last on top)
        return a.poolIndex() - b.poolIndex();
      };

      module.exports = zIndexSort;

      /***/
    },
    /* 18 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var Selector = __webpack_require__(6);

      var Style = function Style(cy) {

        if (!(this instanceof Style)) {
          return new Style(cy);
        }

        if (!is.core(cy)) {
          util.error('A style must have a core reference');
          return;
        }

        this._private = {
          cy: cy,
          coreStyle: {}
        };

        this.length = 0;

        this.resetToDefault();
      };

      var styfn = Style.prototype;

      styfn.instanceString = function () {
        return 'style';
      };

      // remove all contexts
      styfn.clear = function () {
        for (var i = 0; i < this.length; i++) {
          this[i] = undefined;
        }
        this.length = 0;

        var _p = this._private;

        _p.newStyle = true;

        return this; // chaining
      };

      styfn.resetToDefault = function () {
        this.clear();
        this.addDefaultStylesheet();

        return this;
      };

      // builds a style object for the 'core' selector
      styfn.core = function () {
        return this._private.coreStyle;
      };

      // create a new context from the specified selector string and switch to that context
      styfn.selector = function (selectorStr) {
        // 'core' is a special case and does not need a selector
        var selector = selectorStr === 'core' ? null : new Selector(selectorStr);

        var i = this.length++; // new context means new index
        this[i] = {
          selector: selector,
          properties: [],
          mappedProperties: [],
          index: i
        };

        return this; // chaining
      };

      // add one or many css rules to the current context
      styfn.css = function () {
        var self = this;
        var args = arguments;

        switch (args.length) {
          case 1:
            var map = args[0];

            for (var i = 0; i < self.properties.length; i++) {
              var prop = self.properties[i];
              var mapVal = map[prop.name];

              if (mapVal === undefined) {
                mapVal = map[util.dash2camel(prop.name)];
              }

              if (mapVal !== undefined) {
                this.cssRule(prop.name, mapVal);
              }
            }

            break;

          case 2:
            this.cssRule(args[0], args[1]);
            break;

          default:
            break; // do nothing if args are invalid
        }

        return this; // chaining
      };
      styfn.style = styfn.css;

      // add a single css rule to the current context
      styfn.cssRule = function (name, value) {
        // name-value pair
        var property = this.parse(name, value);

        // add property to current context if valid
        if (property) {
          var i = this.length - 1;
          this[i].properties.push(property);
          this[i].properties[property.name] = property; // allow access by name as well

          if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
            this._private.hasPie = true;
          }

          if (property.mapped) {
            this[i].mappedProperties.push(property);
          }

          // add to core style if necessary
          var currentSelectorIsCore = !this[i].selector;
          if (currentSelectorIsCore) {
            this._private.coreStyle[property.name] = property;
          }
        }

        return this; // chaining
      };

      styfn.append = function (style) {
        if (is.stylesheet(style)) {
          style.appendToStyle(this);
        } else if (is.array(style)) {
          this.appendFromJson(style);
        } else if (is.string(style)) {
          this.appendFromString(style);
        } // you probably wouldn't want to append a Style, since you'd duplicate the default parts

        return this;
      };

      // static function
      Style.fromJson = function (cy, json) {
        var style = new Style(cy);

        style.fromJson(json);

        return style;
      };

      Style.fromString = function (cy, string) {
        return new Style(cy).fromString(string);
      };

      [__webpack_require__(85), __webpack_require__(86), __webpack_require__(87), __webpack_require__(88), __webpack_require__(89), __webpack_require__(90), __webpack_require__(91), __webpack_require__(92)].forEach(function (props) {
        util.extend(styfn, props);
      });

      Style.types = styfn.types;
      Style.properties = styfn.properties;

      module.exports = Style;

      /***/
    },
    /* 19 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var fullFpsTime = 1000 / 60; // assume 60 frames per second

      module.exports = {
        setupDequeueing: function setupDequeueing(opts) {
          return function setupDequeueingImpl() {
            var self = this;
            var r = this.renderer;

            if (self.dequeueingSetup) {
              return;
            } else {
              self.dequeueingSetup = true;
            }

            var queueRedraw = util.debounce(function () {
              r.redrawHint('eles', true);
              r.redrawHint('drag', true);

              r.redraw();
            }, opts.deqRedrawThreshold);

            var dequeue = function dequeue(willDraw, frameStartTime) {
              var startTime = util.performanceNow();
              var avgRenderTime = r.averageRedrawTime;
              var renderTime = r.lastRedrawTime;
              var deqd = [];
              var extent = r.cy.extent();
              var pixelRatio = r.getPixelRatio();

              while (true) {
                var now = util.performanceNow();
                var duration = now - startTime;
                var frameDuration = now - frameStartTime;

                if (renderTime < fullFpsTime) {
                  // if we're rendering faster than the ideal fps, then do dequeueing
                  // during all of the remaining frame time

                  var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

                  if (frameDuration >= opts.deqFastCost * timeAvailable) {
                    break;
                  }
                } else {
                  if (willDraw) {
                    if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
                      break;
                    }
                  } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
                    break;
                  }
                }

                var thisDeqd = opts.deq(self, pixelRatio, extent);

                if (thisDeqd.length > 0) {
                  for (var i = 0; i < thisDeqd.length; i++) {
                    deqd.push(thisDeqd[i]);
                  }
                } else {
                  break;
                }
              }

              // callbacks on dequeue
              if (deqd.length > 0) {
                opts.onDeqd(self, deqd);

                if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
                  queueRedraw();
                }
              }
            };

            var priority = opts.priority || util.noop;

            r.beforeRender(dequeue, priority(self));
          };
        }
      };

      /***/
    },
    /* 20 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Core = __webpack_require__(12);
      var extension = __webpack_require__(94);
      var Stylesheet = __webpack_require__(136);

      var cytoscape = function cytoscape(options) {
        // jshint ignore:line
        // if no options specified, use default
        if (options === undefined) {
          options = {};
        }

        // create instance
        if (is.plainObject(options)) {
          return new Core(options);
        }

        // allow for registration of extensions
        else if (is.string(options)) {
            return extension.apply(extension, arguments);
          }
      };

      // e.g. cytoscape.use( require('cytoscape-foo'), bar )
      cytoscape.use = function (ext) {
        var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

        args.unshift(cytoscape); // cytoscape is first arg to ext

        ext.apply(null, args);

        return this;
      };

      // replaced by build system
      cytoscape.version = __webpack_require__(137);

      // expose public apis (mostly for extensions)
      cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;

      module.exports = cytoscape;

      /***/
    },
    /* 21 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      module.exports = {
        // get [r, g, b] from #abc or #aabbcc
        hex2tuple: function hex2tuple(hex) {
          if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
            return;
          }

          var shortHex = hex.length === 4;
          var r = void 0,
              g = void 0,
              b = void 0;
          var base = 16;

          if (shortHex) {
            r = parseInt(hex[1] + hex[1], base);
            g = parseInt(hex[2] + hex[2], base);
            b = parseInt(hex[3] + hex[3], base);
          } else {
            r = parseInt(hex[1] + hex[2], base);
            g = parseInt(hex[3] + hex[4], base);
            b = parseInt(hex[5] + hex[6], base);
          }

          return [r, g, b];
        },

        // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)
        hsl2tuple: function hsl2tuple(hsl) {
          var ret = void 0;
          var h = void 0,
              s = void 0,
              l = void 0,
              a = void 0,
              r = void 0,
              g = void 0,
              b = void 0;
          function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
          }

          var m = new RegExp('^' + this.regex.hsla + '$').exec(hsl);
          if (m) {

            // get hue
            h = parseInt(m[1]);
            if (h < 0) {
              h = (360 - -1 * h % 360) % 360;
            } else if (h > 360) {
              h = h % 360;
            }
            h /= 360; // normalise on [0, 1]

            s = parseFloat(m[2]);
            if (s < 0 || s > 100) {
              return;
            } // saturation is [0, 100]
            s = s / 100; // normalise on [0, 1]

            l = parseFloat(m[3]);
            if (l < 0 || l > 100) {
              return;
            } // lightness is [0, 100]
            l = l / 100; // normalise on [0, 1]

            a = m[4];
            if (a !== undefined) {
              a = parseFloat(a);

              if (a < 0 || a > 1) {
                return;
              } // alpha is [0, 1]
            }

            // now, convert to rgb
            // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
            if (s === 0) {
              r = g = b = Math.round(l * 255); // achromatic
            } else {
              var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
              var p = 2 * l - q;
              r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
              g = Math.round(255 * hue2rgb(p, q, h));
              b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
            }

            ret = [r, g, b, a];
          }

          return ret;
        },

        // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)
        rgb2tuple: function rgb2tuple(rgb) {
          var ret = void 0;

          var m = new RegExp('^' + this.regex.rgba + '$').exec(rgb);
          if (m) {
            ret = [];

            var isPct = [];
            for (var i = 1; i <= 3; i++) {
              var channel = m[i];

              if (channel[channel.length - 1] === '%') {
                isPct[i] = true;
              }
              channel = parseFloat(channel);

              if (isPct[i]) {
                channel = channel / 100 * 255; // normalise to [0, 255]
              }

              if (channel < 0 || channel > 255) {
                return;
              } // invalid channel value

              ret.push(Math.floor(channel));
            }

            var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
            var allArePct = isPct[1] && isPct[2] && isPct[3];
            if (atLeastOneIsPct && !allArePct) {
              return;
            } // must all be percent values if one is

            var alpha = m[4];
            if (alpha !== undefined) {
              alpha = parseFloat(alpha);

              if (alpha < 0 || alpha > 1) {
                return;
              } // invalid alpha value

              ret.push(alpha);
            }
          }

          return ret;
        },

        colorname2tuple: function colorname2tuple(color) {
          return this.colors[color.toLowerCase()];
        },

        color2tuple: function color2tuple(color) {
          return (is.array(color) ? color : null) || this.colorname2tuple(color) || this.hex2tuple(color) || this.rgb2tuple(color) || this.hsl2tuple(color);
        },

        colors: {
          // special colour names
          transparent: [0, 0, 0, 0], // NB alpha === 0

          // regular colours
          aliceblue: [240, 248, 255],
          antiquewhite: [250, 235, 215],
          aqua: [0, 255, 255],
          aquamarine: [127, 255, 212],
          azure: [240, 255, 255],
          beige: [245, 245, 220],
          bisque: [255, 228, 196],
          black: [0, 0, 0],
          blanchedalmond: [255, 235, 205],
          blue: [0, 0, 255],
          blueviolet: [138, 43, 226],
          brown: [165, 42, 42],
          burlywood: [222, 184, 135],
          cadetblue: [95, 158, 160],
          chartreuse: [127, 255, 0],
          chocolate: [210, 105, 30],
          coral: [255, 127, 80],
          cornflowerblue: [100, 149, 237],
          cornsilk: [255, 248, 220],
          crimson: [220, 20, 60],
          cyan: [0, 255, 255],
          darkblue: [0, 0, 139],
          darkcyan: [0, 139, 139],
          darkgoldenrod: [184, 134, 11],
          darkgray: [169, 169, 169],
          darkgreen: [0, 100, 0],
          darkgrey: [169, 169, 169],
          darkkhaki: [189, 183, 107],
          darkmagenta: [139, 0, 139],
          darkolivegreen: [85, 107, 47],
          darkorange: [255, 140, 0],
          darkorchid: [153, 50, 204],
          darkred: [139, 0, 0],
          darksalmon: [233, 150, 122],
          darkseagreen: [143, 188, 143],
          darkslateblue: [72, 61, 139],
          darkslategray: [47, 79, 79],
          darkslategrey: [47, 79, 79],
          darkturquoise: [0, 206, 209],
          darkviolet: [148, 0, 211],
          deeppink: [255, 20, 147],
          deepskyblue: [0, 191, 255],
          dimgray: [105, 105, 105],
          dimgrey: [105, 105, 105],
          dodgerblue: [30, 144, 255],
          firebrick: [178, 34, 34],
          floralwhite: [255, 250, 240],
          forestgreen: [34, 139, 34],
          fuchsia: [255, 0, 255],
          gainsboro: [220, 220, 220],
          ghostwhite: [248, 248, 255],
          gold: [255, 215, 0],
          goldenrod: [218, 165, 32],
          gray: [128, 128, 128],
          grey: [128, 128, 128],
          green: [0, 128, 0],
          greenyellow: [173, 255, 47],
          honeydew: [240, 255, 240],
          hotpink: [255, 105, 180],
          indianred: [205, 92, 92],
          indigo: [75, 0, 130],
          ivory: [255, 255, 240],
          khaki: [240, 230, 140],
          lavender: [230, 230, 250],
          lavenderblush: [255, 240, 245],
          lawngreen: [124, 252, 0],
          lemonchiffon: [255, 250, 205],
          lightblue: [173, 216, 230],
          lightcoral: [240, 128, 128],
          lightcyan: [224, 255, 255],
          lightgoldenrodyellow: [250, 250, 210],
          lightgray: [211, 211, 211],
          lightgreen: [144, 238, 144],
          lightgrey: [211, 211, 211],
          lightpink: [255, 182, 193],
          lightsalmon: [255, 160, 122],
          lightseagreen: [32, 178, 170],
          lightskyblue: [135, 206, 250],
          lightslategray: [119, 136, 153],
          lightslategrey: [119, 136, 153],
          lightsteelblue: [176, 196, 222],
          lightyellow: [255, 255, 224],
          lime: [0, 255, 0],
          limegreen: [50, 205, 50],
          linen: [250, 240, 230],
          magenta: [255, 0, 255],
          maroon: [128, 0, 0],
          mediumaquamarine: [102, 205, 170],
          mediumblue: [0, 0, 205],
          mediumorchid: [186, 85, 211],
          mediumpurple: [147, 112, 219],
          mediumseagreen: [60, 179, 113],
          mediumslateblue: [123, 104, 238],
          mediumspringgreen: [0, 250, 154],
          mediumturquoise: [72, 209, 204],
          mediumvioletred: [199, 21, 133],
          midnightblue: [25, 25, 112],
          mintcream: [245, 255, 250],
          mistyrose: [255, 228, 225],
          moccasin: [255, 228, 181],
          navajowhite: [255, 222, 173],
          navy: [0, 0, 128],
          oldlace: [253, 245, 230],
          olive: [128, 128, 0],
          olivedrab: [107, 142, 35],
          orange: [255, 165, 0],
          orangered: [255, 69, 0],
          orchid: [218, 112, 214],
          palegoldenrod: [238, 232, 170],
          palegreen: [152, 251, 152],
          paleturquoise: [175, 238, 238],
          palevioletred: [219, 112, 147],
          papayawhip: [255, 239, 213],
          peachpuff: [255, 218, 185],
          peru: [205, 133, 63],
          pink: [255, 192, 203],
          plum: [221, 160, 221],
          powderblue: [176, 224, 230],
          purple: [128, 0, 128],
          red: [255, 0, 0],
          rosybrown: [188, 143, 143],
          royalblue: [65, 105, 225],
          saddlebrown: [139, 69, 19],
          salmon: [250, 128, 114],
          sandybrown: [244, 164, 96],
          seagreen: [46, 139, 87],
          seashell: [255, 245, 238],
          sienna: [160, 82, 45],
          silver: [192, 192, 192],
          skyblue: [135, 206, 235],
          slateblue: [106, 90, 205],
          slategray: [112, 128, 144],
          slategrey: [112, 128, 144],
          snow: [255, 250, 250],
          springgreen: [0, 255, 127],
          steelblue: [70, 130, 180],
          tan: [210, 180, 140],
          teal: [0, 128, 128],
          thistle: [216, 191, 216],
          tomato: [255, 99, 71],
          turquoise: [64, 224, 208],
          violet: [238, 130, 238],
          wheat: [245, 222, 179],
          white: [255, 255, 255],
          whitesmoke: [245, 245, 245],
          yellow: [255, 255, 0],
          yellowgreen: [154, 205, 50]
        }
      };

      /***/
    },
    /* 22 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      module.exports = {
        // has anything been set in the map
        mapEmpty: function mapEmpty(map) {
          var empty = true;

          if (map != null) {
            return Object.keys(map).length === 0;
          }

          return empty;
        },

        // pushes to the array at the end of a map (map may not be built)
        pushMap: function pushMap(options) {
          var array = this.getMap(options);

          if (array == null) {
            // if empty, put initial array
            this.setMap(this.extend({}, options, {
              value: [options.value]
            }));
          } else {
            array.push(options.value);
          }
        },

        // sets the value in a map (map may not be built)
        setMap: function setMap(options) {
          var obj = options.map;
          var key = void 0;
          var keys = options.keys;
          var l = keys.length;

          for (var i = 0; i < l; i++) {
            var _key = keys[i];

            if (is.plainObject(_key)) {
              this.error('Tried to set map with object key');
            }

            if (i < keys.length - 1) {

              // extend the map if necessary
              if (obj[_key] == null) {
                obj[_key] = {};
              }

              obj = obj[_key];
            } else {
              // set the value
              obj[_key] = options.value;
            }
          }
        },

        // gets the value in a map even if it's not built in places
        getMap: function getMap(options) {
          var obj = options.map;
          var keys = options.keys;
          var l = keys.length;

          for (var i = 0; i < l; i++) {
            var key = keys[i];

            if (is.plainObject(key)) {
              this.error('Tried to get map with object key');
            }

            obj = obj[key];

            if (obj == null) {
              return obj;
            }
          }

          return obj;
        },

        // deletes the entry in the map
        deleteMap: function deleteMap(options) {
          var obj = options.map;
          var keys = options.keys;
          var l = keys.length;
          var keepChildren = options.keepChildren;

          for (var i = 0; i < l; i++) {
            var key = keys[i];

            if (is.plainObject(key)) {
              this.error('Tried to delete map with object key');
            }

            var lastKey = i === options.keys.length - 1;
            if (lastKey) {

              if (keepChildren) {
                // then only delete child fields not in keepChildren
                var children = Object.keys(obj);

                for (var j = 0; j < children.length; j++) {
                  var child = children[j];

                  if (!keepChildren[child]) {
                    obj[child] = undefined;
                  }
                }
              } else {
                obj[key] = undefined;
              }
            } else {
              obj = obj[key];
            }
          }
        }
      };

      /***/
    },
    /* 23 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var number = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';

      var rgba = 'rgb[a]?\\((' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)\\s*,\\s*(' + number + '[%]?)(?:\\s*,\\s*(' + number + '))?\\)';
      var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)\\s*,\\s*(?:' + number + '[%]?)(?:\\s*,\\s*(?:' + number + '))?\\)';

      var hsla = 'hsl[a]?\\((' + number + ')\\s*,\\s*(' + number + '[%])\\s*,\\s*(' + number + '[%])(?:\\s*,\\s*(' + number + '))?\\)';
      var hslaNoBackRefs = 'hsl[a]?\\((?:' + number + ')\\s*,\\s*(?:' + number + '[%])\\s*,\\s*(?:' + number + '[%])(?:\\s*,\\s*(?:' + number + '))?\\)';

      var hex3 = '\\#[0-9a-fA-F]{3}';
      var hex6 = '\\#[0-9a-fA-F]{6}';

      module.exports = {
        regex: {
          number: number,
          rgba: rgba,
          rgbaNoBackRefs: rgbaNoBackRefs,
          hsla: hsla,
          hslaNoBackRefs: hslaNoBackRefs,
          hex3: hex3,
          hex6: hex6
        }
      };

      /***/
    },
    /* 24 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var memoize = __webpack_require__(13);
      var is = __webpack_require__(0);

      module.exports = {

        camel2dash: memoize(function (str) {
          return str.replace(/([A-Z])/g, function (v) {
            return '-' + v.toLowerCase();
          });
        }),

        dash2camel: memoize(function (str) {
          return str.replace(/(-\w)/g, function (v) {
            return v[1].toUpperCase();
          });
        }),

        prependCamel: memoize(function (prefix, str) {
          return prefix + str[0].toUpperCase() + str.substring(1);
        }, function (prefix, str) {
          return prefix + '$' + str;
        }),

        capitalize: function capitalize(str) {
          if (is.emptyString(str)) {
            return str;
          }

          return str.charAt(0).toUpperCase() + str.substring(1);
        }

      };

      /***/
    },
    /* 25 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var window = __webpack_require__(3);
      var performance = window ? window.performance : null;

      var util = {};

      var pnow = performance && performance.now ? function () {
        return performance.now();
      } : function () {
        return Date.now();
      };

      var raf = function () {
        if (window) {
          if (window.requestAnimationFrame) {
            return function (fn) {
              window.requestAnimationFrame(fn);
            };
          } else if (window.mozRequestAnimationFrame) {
            return function (fn) {
              window.mozRequestAnimationFrame(fn);
            };
          } else if (window.webkitRequestAnimationFrame) {
            return function (fn) {
              window.webkitRequestAnimationFrame(fn);
            };
          } else if (window.msRequestAnimationFrame) {
            return function (fn) {
              window.msRequestAnimationFrame(fn);
            };
          }
        }

        return function (fn) {
          if (fn) {
            setTimeout(function () {
              fn(pnow());
            }, 1000 / 60);
          }
        };
      }();

      util.requestAnimationFrame = function (fn) {
        raf(fn);
      };

      util.performanceNow = pnow;

      util.debounce = __webpack_require__(26);

      util.now = function () {
        return Date.now();
      };

      module.exports = util;

      /***/
    },
    /* 26 */
    /***/function (module, exports) {

      module.exports = __WEBPACK_EXTERNAL_MODULE_26__;

      /***/
    },
    /* 27 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      function ascending(a, b) {
        if (a < b) {
          return -1;
        } else if (a > b) {
          return 1;
        } else {
          return 0;
        }
      }

      function descending(a, b) {
        return -1 * ascending(a, b);
      }

      module.exports = {
        sort: {
          ascending: ascending,
          descending: descending
        }
      };

      /***/
    },
    /* 28 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      function ObjectMap() {
        this._obj = {};
      }

      var p = ObjectMap.prototype;

      p.set = function (key, val) {
        this._obj[key] = val;
      };

      p.delete = function (key) {
        this._obj[key] = null;
      };

      p.has = function (key) {
        return this._obj[key] != null;
      };

      p.get = function (key) {
        return this._obj[key];
      };

      // TODO use the stdlib Map in future...
      // module.exports = typeof Map !== 'undefined' ? Map : ObjectMap;
      module.exports = ObjectMap;

      /***/
    },
    /* 29 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var elesfn = {};

      [__webpack_require__(30), __webpack_require__(31), __webpack_require__(33), __webpack_require__(34), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(39), __webpack_require__(40), __webpack_require__(41)].forEach(function (props) {
        util.extend(elesfn, props);
      });

      module.exports = elesfn;

      /***/
    },
    /* 30 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      var defineSearch = function defineSearch(params) {
        params = {
          bfs: params.bfs || !params.dfs,
          dfs: params.dfs || !params.bfs
        };

        // from pseudocode on wikipedia
        return function searchFn(roots, fn, directed) {
          var options;
          if (is.plainObject(roots) && !is.elementOrCollection(roots)) {
            options = roots;
            roots = options.roots || options.root;
            fn = options.visit;
            directed = options.directed;
          }

          directed = arguments.length === 2 && !is.fn(fn) ? fn : directed;
          fn = is.fn(fn) ? fn : function () {};

          var cy = this._private.cy;
          var v = roots = is.string(roots) ? this.filter(roots) : roots;
          var Q = [];
          var connectedNodes = [];
          var connectedBy = {};
          var id2depth = {};
          var V = {};
          var j = 0;
          var found;
          var nodes = this.nodes();
          var edges = this.edges();

          // enqueue v
          for (var i = 0; i < v.length; i++) {
            if (v[i].isNode()) {
              Q.unshift(v[i]);

              if (params.bfs) {
                V[v[i].id()] = true;

                connectedNodes.push(v[i]);
              }

              id2depth[v[i].id()] = 0;
            }
          }

          while (Q.length !== 0) {
            var v = params.bfs ? Q.shift() : Q.pop();

            if (params.dfs) {
              if (V[v.id()]) {
                continue;
              }

              V[v.id()] = true;

              connectedNodes.push(v);
            }

            var depth = id2depth[v.id()];
            var prevEdge = connectedBy[v.id()];
            var prevNode = prevEdge == null ? undefined : prevEdge.connectedNodes().not(v)[0];
            var ret;

            ret = fn(v, prevEdge, prevNode, j++, depth);

            if (ret === true) {
              found = v;
              break;
            }

            if (ret === false) {
              break;
            }

            var vwEdges = v.connectedEdges(directed ? function (ele) {
              return ele.data('source') === v.id();
            } : undefined).intersect(edges);
            for (var i = 0; i < vwEdges.length; i++) {
              var e = vwEdges[i];
              var w = e.connectedNodes(function (n) {
                return n.id() !== v.id();
              }).intersect(nodes);

              if (w.length !== 0 && !V[w.id()]) {
                w = w[0];

                Q.push(w);

                if (params.bfs) {
                  V[w.id()] = true;

                  connectedNodes.push(w);
                }

                connectedBy[w.id()] = e;

                id2depth[w.id()] = id2depth[v.id()] + 1;
              }
            }
          }

          var connectedEles = [];

          for (var i = 0; i < connectedNodes.length; i++) {
            var node = connectedNodes[i];
            var edge = connectedBy[node.id()];

            if (edge) {
              connectedEles.push(edge);
            }

            connectedEles.push(node);
          }

          return {
            path: cy.collection(connectedEles, { unique: true }),
            found: cy.collection(found)
          };
        };
      };

      // search, spanning trees, etc
      var elesfn = {
        breadthFirstSearch: defineSearch({ bfs: true }),
        depthFirstSearch: defineSearch({ dfs: true })
      };

      // nice, short mathemathical alias
      elesfn.bfs = elesfn.breadthFirstSearch;
      elesfn.dfs = elesfn.depthFirstSearch;

      module.exports = elesfn;

      /***/
    },
    /* 31 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Heap = __webpack_require__(9);

      var elesfn = {

        dijkstra: function dijkstra(root, weightFn, directed) {
          var options;
          if (is.plainObject(root) && !is.elementOrCollection(root)) {
            options = root;
            root = options.root;
            weightFn = options.weight;
            directed = options.directed;
          }

          var cy = this._private.cy;
          weightFn = is.fn(weightFn) ? weightFn : function () {
            return 1;
          }; // if not specified, assume each edge has equal weight (1)

          var source = is.string(root) ? this.filter(root)[0] : root[0];
          var dist = {};
          var prev = {};
          var knownDist = {};

          var edges = this.edges().filter(function (ele) {
            return !ele.isLoop();
          });
          var nodes = this.nodes();

          var getDist = function getDist(node) {
            return dist[node.id()];
          };

          var setDist = function setDist(node, d) {
            dist[node.id()] = d;

            Q.updateItem(node);
          };

          var Q = new Heap(function (a, b) {
            return getDist(a) - getDist(b);
          });

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];

            dist[node.id()] = node.same(source) ? 0 : Infinity;
            Q.push(node);
          }

          var distBetween = function distBetween(u, v) {
            var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
            var smallestDistance = Infinity;
            var smallestEdge;

            for (var i = 0; i < uvs.length; i++) {
              var edge = uvs[i];
              var weight = weightFn(edge);

              if (weight < smallestDistance || !smallestEdge) {
                smallestDistance = weight;
                smallestEdge = edge;
              }
            }

            return {
              edge: smallestEdge,
              dist: smallestDistance
            };
          };

          while (Q.size() > 0) {
            var u = Q.pop();
            var smalletsDist = getDist(u);
            var uid = u.id();

            knownDist[uid] = smalletsDist;

            if (smalletsDist === Infinity) {
              continue;
            }

            var neighbors = u.neighborhood().intersect(nodes);
            for (var i = 0; i < neighbors.length; i++) {
              var v = neighbors[i];
              var vid = v.id();
              var vDist = distBetween(u, v);

              var alt = smalletsDist + vDist.dist;

              if (alt < getDist(v)) {
                setDist(v, alt);

                prev[vid] = {
                  node: u,
                  edge: vDist.edge
                };
              }
            } // for
          } // while

          return {
            distanceTo: function distanceTo(node) {
              var target = is.string(node) ? nodes.filter(node)[0] : node[0];

              return knownDist[target.id()];
            },

            pathTo: function pathTo(node) {
              var target = is.string(node) ? nodes.filter(node)[0] : node[0];
              var S = [];
              var u = target;

              if (target.length > 0) {
                S.unshift(target);

                while (prev[u.id()]) {
                  var p = prev[u.id()];

                  S.unshift(p.edge);
                  S.unshift(p.node);

                  u = p.node;
                }
              }

              return cy.collection(S);
            }
          };
        }
      };

      module.exports = elesfn;

      /***/
    },
    /* 32 */
    /***/function (module, exports) {

      module.exports = __WEBPACK_EXTERNAL_MODULE_32__;

      /***/
    },
    /* 33 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      // search, spanning trees, etc
      var elesfn = {

        // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
        // implemented from pseudocode from wikipedia
        kruskal: function kruskal(weightFn) {
          var cy = this.cy();

          weightFn = is.fn(weightFn) ? weightFn : function () {
            return 1;
          }; // if not specified, assume each edge has equal weight (1)

          function findSet(ele) {
            for (var i = 0; i < forest.length; i++) {
              var eles = forest[i];

              if (eles.anySame(ele)) {
                return {
                  eles: eles,
                  index: i
                };
              }
            }
          }

          var A = cy.collection(cy, []);
          var forest = [];
          var nodes = this.nodes();

          for (var i = 0; i < nodes.length; i++) {
            forest.push(nodes[i].collection());
          }

          var edges = this.edges();
          var S = edges.toArray().sort(function (a, b) {
            var weightA = weightFn(a);
            var weightB = weightFn(b);

            return weightA - weightB;
          });

          for (var i = 0; i < S.length; i++) {
            var edge = S[i];
            var u = edge.source()[0];
            var v = edge.target()[0];
            var setU = findSet(u);
            var setV = findSet(v);

            if (setU.index !== setV.index) {
              A = A.add(edge);

              // combine forests for u and v
              forest[setU.index] = setU.eles.add(setV.eles);
              forest.splice(setV.index, 1);
            }
          }

          return nodes.add(A);
        }
      };

      module.exports = elesfn;

      /***/
    },
    /* 34 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      var elesfn = {

        // Implemented from pseudocode from wikipedia
        aStar: function aStar(options) {
          var eles = this;

          options = options || {};

          // Reconstructs the path from Start to End, acumulating the result in pathAcum
          var reconstructPath = function reconstructPath(start, end, cameFromMap, pathAcum) {
            // Base case
            if (start == end) {
              pathAcum.unshift(cy.getElementById(end));
              return pathAcum;
            }

            if (end in cameFromMap) {
              // We know which node is before the last one
              var previous = cameFromMap[end];
              var previousEdge = cameFromEdge[end];

              pathAcum.unshift(cy.getElementById(previousEdge));
              pathAcum.unshift(cy.getElementById(end));

              return reconstructPath(start, previous, cameFromMap, pathAcum);
            }

            // We should not reach here!
            return undefined;
          };

          // Returns the index of the element in openSet which has minimum fScore
          var findMin = function findMin(openSet, fScore) {
            if (openSet.length === 0) {
              // Should never be the case
              return undefined;
            }
            var minPos = 0;
            var tempScore = fScore[openSet[0]];
            for (var i = 1; i < openSet.length; i++) {
              var s = fScore[openSet[i]];
              if (s < tempScore) {
                tempScore = s;
                minPos = i;
              }
            }
            return minPos;
          };

          var cy = this._private.cy;

          // root - mandatory!
          if (options != null && options.root != null) {
            var source = is.string(options.root) ?
            // use it as a selector, e.g. "#rootID
            this.filter(options.root)[0] : options.root[0];
          } else {
            return undefined;
          }

          // goal - mandatory!
          if (options.goal != null) {
            var target = is.string(options.goal) ?
            // use it as a selector, e.g. "#goalID
            this.filter(options.goal)[0] : options.goal[0];
          } else {
            return undefined;
          }

          // Heuristic function - optional
          if (options.heuristic != null && is.fn(options.heuristic)) {
            var heuristic = options.heuristic;
          } else {
            var heuristic = function heuristic() {
              return 0;
            }; // use constant if unspecified
          }

          // Weight function - optional
          if (options.weight != null && is.fn(options.weight)) {
            var weightFn = options.weight;
          } else {
            // If not specified, assume each edge has equal weight (1)
            var weightFn = function weightFn(e) {
              return 1;
            };
          }

          // directed - optional
          if (options.directed != null) {
            var directed = options.directed;
          } else {
            var directed = false;
          }

          var sid = source.id();
          var tid = target.id();

          var closedSet = [];
          var openSet = [sid];
          var cameFrom = {};
          var cameFromEdge = {};
          var gScore = {};
          var fScore = {};

          gScore[sid] = 0;
          fScore[sid] = heuristic(source);

          // Counter
          var steps = 0;

          // Main loop
          while (openSet.length > 0) {
            var minPos = findMin(openSet, fScore);
            var cMin = cy.getElementById(openSet[minPos]);
            var cMinId = cMin.id();
            steps++;

            // If we've found our goal, then we are done
            if (cMinId == tid) {
              var rPath = reconstructPath(sid, tid, cameFrom, []);

              return {
                found: true,
                distance: gScore[cMinId],
                path: eles.spawn(rPath),
                steps: steps
              };
            }

            // Add cMin to processed nodes
            closedSet.push(cMinId);
            // Remove cMin from boundary nodes
            openSet.splice(minPos, 1);

            // Update scores for neighbors of cMin
            // Take into account if graph is directed or not
            var vwEdges = cMin._private.edges;

            for (var i = 0; i < vwEdges.length; i++) {
              var e = vwEdges[i];

              // edge must be in set of calling eles
              if (!this.hasElementWithId(e.id())) {
                continue;
              }

              // cMin must be the source of edge if directed
              if (directed && e.data('source') !== cMinId) {
                continue;
              }

              var wSrc = e.source();
              var wTgt = e.target();

              var w = wSrc.id() !== cMinId ? wSrc : wTgt;
              var wid = w.id();

              // node must be in set of calling eles
              if (!this.hasElementWithId(wid)) {
                continue;
              }

              // if node is in closedSet, ignore it
              if (closedSet.indexOf(wid) != -1) {
                continue;
              }

              // New tentative score for node w
              var tempScore = gScore[cMinId] + weightFn(e);

              // Update gScore for node w if:
              //   w not present in openSet
              // OR
              //   tentative gScore is less than previous value

              // w not in openSet
              if (openSet.indexOf(wid) == -1) {
                gScore[wid] = tempScore;
                fScore[wid] = tempScore + heuristic(w);
                openSet.push(wid); // Add node to openSet
                cameFrom[wid] = cMinId;
                cameFromEdge[wid] = e.id();
                continue;
              }
              // w already in openSet, but with greater gScore
              if (tempScore < gScore[wid]) {
                gScore[wid] = tempScore;
                fScore[wid] = tempScore + heuristic(w);
                cameFrom[wid] = cMinId;
              }
            } // End of neighbors update
          } // End of main loop

          // If we've reached here, then we've not reached our goal
          return {
            found: false,
            distance: undefined,
            path: undefined,
            steps: steps
          };
        }

      }; // elesfn


      module.exports = elesfn;

      /***/
    },
    /* 35 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      var elesfn = {

        // Implemented from pseudocode from wikipedia
        floydWarshall: function floydWarshall(options) {
          options = options || {};

          var cy = this.cy();

          // Weight function - optional
          if (options.weight != null && is.fn(options.weight)) {
            var weightFn = options.weight;
          } else {
            // If not specified, assume each edge has equal weight (1)
            var weightFn = function weightFn(e) {
              return 1;
            };
          }

          // directed - optional
          if (options.directed != null) {
            var directed = options.directed;
          } else {
            var directed = false;
          }

          var edges = this.edges().stdFilter(function (e) {
            return !e.isLoop();
          });
          var nodes = this.nodes();
          var numNodes = nodes.length;

          // mapping: node id -> position in nodes array
          var id2position = {};
          for (var i = 0; i < numNodes; i++) {
            id2position[nodes[i].id()] = i;
          }

          // Initialize distance matrix
          var dist = [];
          for (var i = 0; i < numNodes; i++) {
            var newRow = new Array(numNodes);
            for (var j = 0; j < numNodes; j++) {
              if (i == j) {
                newRow[j] = 0;
              } else {
                newRow[j] = Infinity;
              }
            }
            dist.push(newRow);
          }

          // Initialize matrix used for path reconstruction
          // Initialize distance matrix
          var next = [];
          var edgeNext = [];

          var initMatrix = function initMatrix(next) {
            for (var i = 0; i < numNodes; i++) {
              var newRow = new Array(numNodes);
              for (var j = 0; j < numNodes; j++) {
                newRow[j] = undefined;
              }
              next.push(newRow);
            }
          };

          initMatrix(next);
          initMatrix(edgeNext);

          // Process edges
          for (var i = 0; i < edges.length; i++) {
            var sourceIndex = id2position[edges[i].source().id()];
            var targetIndex = id2position[edges[i].target().id()];
            var weight = weightFn(edges[i]);

            // Check if already process another edge between same 2 nodes
            if (dist[sourceIndex][targetIndex] > weight) {
              dist[sourceIndex][targetIndex] = weight;
              next[sourceIndex][targetIndex] = targetIndex;
              edgeNext[sourceIndex][targetIndex] = edges[i];
            }
          }

          // If undirected graph, process 'reversed' edges
          if (!directed) {
            for (var i = 0; i < edges.length; i++) {
              var sourceIndex = id2position[edges[i].target().id()];
              var targetIndex = id2position[edges[i].source().id()];
              var weight = weightFn(edges[i]);

              // Check if already process another edge between same 2 nodes
              if (dist[sourceIndex][targetIndex] > weight) {
                dist[sourceIndex][targetIndex] = weight;
                next[sourceIndex][targetIndex] = targetIndex;
                edgeNext[sourceIndex][targetIndex] = edges[i];
              }
            }
          }

          // Main loop
          for (var k = 0; k < numNodes; k++) {
            for (var i = 0; i < numNodes; i++) {
              for (var j = 0; j < numNodes; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                  dist[i][j] = dist[i][k] + dist[k][j];
                  next[i][j] = next[i][k];
                }
              }
            }
          }

          // Build result object
          var position2id = [];
          for (var i = 0; i < numNodes; i++) {
            position2id.push(nodes[i].id());
          }

          var res = {
            distance: function distance(from, to) {
              if (is.string(from)) {
                // from is a selector string
                var fromId = cy.filter(from)[0].id();
              } else {
                // from is a node
                var fromId = from.id();
              }

              if (is.string(to)) {
                // to is a selector string
                var toId = cy.filter(to)[0].id();
              } else {
                // to is a node
                var toId = to.id();
              }

              return dist[id2position[fromId]][id2position[toId]];
            },

            path: function path(from, to) {
              var reconstructPathAux = function reconstructPathAux(from, to, next, position2id, edgeNext) {
                if (from === to) {
                  return cy.getElementById(position2id[from]);
                }
                if (next[from][to] === undefined) {
                  return undefined;
                }

                var path = [cy.getElementById(position2id[from])];
                var prev = from;
                while (from !== to) {
                  prev = from;
                  from = next[from][to];

                  var edge = edgeNext[prev][from];
                  path.push(edge);

                  path.push(cy.getElementById(position2id[from]));
                }
                return path;
              };

              if (is.string(from)) {
                // from is a selector string
                var fromId = cy.filter(from)[0].id();
              } else {
                // from is a node
                var fromId = from.id();
              }

              if (is.string(to)) {
                // to is a selector string
                var toId = cy.filter(to)[0].id();
              } else {
                // to is a node
                var toId = to.id();
              }

              var pathArr = reconstructPathAux(id2position[fromId], id2position[toId], next, position2id, edgeNext);

              return cy.collection(pathArr);
            }
          };

          return res;
        } // floydWarshall

      }; // elesfn

      module.exports = elesfn;

      /***/
    },
    /* 36 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);

      var elesfn = {

        // Implemented from pseudocode from wikipedia
        bellmanFord: function bellmanFord(options) {
          var eles = this;

          options = options || {};

          // Weight function - optional
          if (options.weight != null && is.fn(options.weight)) {
            var weightFn = options.weight;
          } else {
            // If not specified, assume each edge has equal weight (1)
            var weightFn = function weightFn(e) {
              return 1;
            };
          }

          // directed - optional
          if (options.directed != null) {
            var directed = options.directed;
          } else {
            var directed = false;
          }

          // root - mandatory!
          if (options.root != null) {
            if (is.string(options.root)) {
              // use it as a selector, e.g. "#rootID
              var source = this.filter(options.root)[0];
            } else {
              var source = options.root[0];
            }
          } else {
            return undefined;
          }

          var cy = this._private.cy;
          var edges = this.edges().stdFilter(function (e) {
            return !e.isLoop();
          });
          var nodes = this.nodes();
          var numNodes = nodes.length;

          // mapping: node id -> position in nodes array
          var id2position = {};
          for (var i = 0; i < numNodes; i++) {
            id2position[nodes[i].id()] = i;
          }

          // Initializations
          var cost = [];
          var predecessor = [];
          var predEdge = [];

          for (var i = 0; i < numNodes; i++) {
            if (nodes[i].id() === source.id()) {
              cost[i] = 0;
            } else {
              cost[i] = Infinity;
            }
            predecessor[i] = undefined;
          }

          // Edges relaxation
          var flag = false;
          for (var i = 1; i < numNodes; i++) {
            flag = false;
            for (var e = 0; e < edges.length; e++) {
              var sourceIndex = id2position[edges[e].source().id()];
              var targetIndex = id2position[edges[e].target().id()];
              var weight = weightFn(edges[e]);

              var temp = cost[sourceIndex] + weight;
              if (temp < cost[targetIndex]) {
                cost[targetIndex] = temp;
                predecessor[targetIndex] = sourceIndex;
                predEdge[targetIndex] = edges[e];
                flag = true;
              }

              // If undirected graph, we need to take into account the 'reverse' edge
              if (!directed) {
                var temp = cost[targetIndex] + weight;
                if (temp < cost[sourceIndex]) {
                  cost[sourceIndex] = temp;
                  predecessor[sourceIndex] = targetIndex;
                  predEdge[sourceIndex] = edges[e];
                  flag = true;
                }
              }
            }

            if (!flag) {
              break;
            }
          }

          if (flag) {
            // Check for negative weight cycles
            for (var e = 0; e < edges.length; e++) {
              var sourceIndex = id2position[edges[e].source().id()];
              var targetIndex = id2position[edges[e].target().id()];
              var weight = weightFn(edges[e]);

              if (cost[sourceIndex] + weight < cost[targetIndex]) {
                util.error('Graph contains a negative weight cycle for Bellman-Ford');
                return { pathTo: undefined,
                  distanceTo: undefined,
                  hasNegativeWeightCycle: true };
              }
            }
          }

          // Build result object
          var position2id = [];
          for (var i = 0; i < numNodes; i++) {
            position2id.push(nodes[i].id());
          }

          var res = {
            distanceTo: function distanceTo(to) {
              if (is.string(to)) {
                // to is a selector string
                var toId = cy.filter(to)[0].id();
              } else {
                // to is a node
                var toId = to.id();
              }

              return cost[id2position[toId]];
            },

            pathTo: function pathTo(to) {

              var reconstructPathAux = function reconstructPathAux(predecessor, fromPos, toPos, position2id, acumPath, predEdge) {
                for (;;) {
                  // Add toId to path
                  acumPath.push(cy.getElementById(position2id[toPos]));
                  acumPath.push(predEdge[toPos]);

                  if (fromPos === toPos) {
                    // reached starting node
                    return acumPath;
                  }

                  // If no path exists, discart acumulated path and return undefined
                  var predPos = predecessor[toPos];
                  if (typeof predPos === 'undefined') {
                    return undefined;
                  }

                  toPos = predPos;
                }
              };

              if (is.string(to)) {
                // to is a selector string
                var toId = cy.filter(to)[0].id();
              } else {
                // to is a node
                var toId = to.id();
              }
              var path = [];

              // This returns a reversed path
              var res = reconstructPathAux(predecessor, id2position[source.id()], id2position[toId], position2id, path, predEdge);

              // Get it in the correct order and return it
              if (res != null) {
                res.reverse();
              }

              return eles.spawn(res);
            },

            hasNegativeWeightCycle: false
          };

          return res;
        } // bellmanFord

      }; // elesfn

      module.exports = elesfn;

      /***/
    },
    /* 37 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var elesfn = {

        // Computes the minimum cut of an undirected graph
        // Returns the correct answer with high probability
        kargerStein: function kargerStein(options) {
          var eles = this;

          options = options || {};

          // Function which colapses 2 (meta) nodes into one
          // Updates the remaining edge lists
          // Receives as a paramater the edge which causes the collapse
          var colapse = function colapse(edgeIndex, nodeMap, remainingEdges) {
            var edgeInfo = remainingEdges[edgeIndex];
            var sourceIn = edgeInfo[1];
            var targetIn = edgeInfo[2];
            var partition1 = nodeMap[sourceIn];
            var partition2 = nodeMap[targetIn];

            // Delete all edges between partition1 and partition2
            var newEdges = remainingEdges.filter(function (edge) {
              if (nodeMap[edge[1]] === partition1 && nodeMap[edge[2]] === partition2) {
                return false;
              }
              if (nodeMap[edge[1]] === partition2 && nodeMap[edge[2]] === partition1) {
                return false;
              }
              return true;
            });

            // All edges pointing to partition2 should now point to partition1
            for (var i = 0; i < newEdges.length; i++) {
              var edge = newEdges[i];
              if (edge[1] === partition2) {
                // Check source
                newEdges[i] = edge.slice(0);
                newEdges[i][1] = partition1;
              } else if (edge[2] === partition2) {
                // Check target
                newEdges[i] = edge.slice(0);
                newEdges[i][2] = partition1;
              }
            }

            // Move all nodes from partition2 to partition1
            for (var i = 0; i < nodeMap.length; i++) {
              if (nodeMap[i] === partition2) {
                nodeMap[i] = partition1;
              }
            }

            return newEdges;
          };

          // Contracts a graph until we reach a certain number of meta nodes
          var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
            // Stop condition
            if (size <= sizeLimit) {
              return remainingEdges;
            }

            // Choose an edge randomly
            var edgeIndex = Math.floor(Math.random() * remainingEdges.length);

            // Colapse graph based on edge
            var newEdges = colapse(edgeIndex, metaNodeMap, remainingEdges);

            return contractUntil(metaNodeMap, newEdges, size - 1, sizeLimit);
          };

          var cy = this._private.cy;
          var edges = this.edges().stdFilter(function (e) {
            return !e.isLoop();
          });
          var nodes = this.nodes();
          var numNodes = nodes.length;
          var numEdges = edges.length;
          var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
          var stopSize = Math.floor(numNodes / Math.sqrt(2));

          if (numNodes < 2) {
            util.error('At least 2 nodes are required for Karger-Stein algorithm');
            return undefined;
          }

          // Create numerical identifiers for each node
          // mapping: node id -> position in nodes array
          // for reverse mapping, simply use nodes array
          var id2position = {};
          for (var i = 0; i < numNodes; i++) {
            id2position[nodes[i].id()] = i;
          }

          // Now store edge destination as indexes
          // Format for each edge (edge index, source node index, target node index)
          var edgeIndexes = [];
          for (var i = 0; i < numEdges; i++) {
            var e = edges[i];
            edgeIndexes.push([i, id2position[e.source().id()], id2position[e.target().id()]]);
          }

          // We will store the best cut found here
          var minCutSize = Infinity;
          var minCut;

          // Initial meta node partition
          var originalMetaNode = [];
          for (var i = 0; i < numNodes; i++) {
            originalMetaNode.push(i);
          }

          // Main loop
          for (var iter = 0; iter <= numIter; iter++) {
            // Create new meta node partition
            var metaNodeMap = originalMetaNode.slice(0);

            // Contract until stop point (stopSize nodes)
            var edgesState = contractUntil(metaNodeMap, edgeIndexes, numNodes, stopSize);

            // Create a copy of the colapsed nodes state
            var metaNodeMap2 = metaNodeMap.slice(0);

            // Run 2 iterations starting in the stop state
            var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
            var res2 = contractUntil(metaNodeMap2, edgesState, stopSize, 2);

            // Is any of the 2 results the best cut so far?
            if (res1.length <= res2.length && res1.length < minCutSize) {
              minCutSize = res1.length;
              minCut = [res1, metaNodeMap];
            } else if (res2.length <= res1.length && res2.length < minCutSize) {
              minCutSize = res2.length;
              minCut = [res2, metaNodeMap2];
            }
          } // end of main loop


          // Construct result
          var resEdges = minCut[0].map(function (e) {
            return edges[e[0]];
          });
          var partition1 = [];
          var partition2 = [];

          // traverse metaNodeMap for best cut
          var witnessNodePartition = minCut[1][0];
          for (var i = 0; i < minCut[1].length; i++) {
            var partitionId = minCut[1][i];
            if (partitionId === witnessNodePartition) {
              partition1.push(nodes[i]);
            } else {
              partition2.push(nodes[i]);
            }
          }

          var ret = {
            cut: eles.spawn(cy, resEdges),
            partition1: eles.spawn(partition1),
            partition2: eles.spawn(partition2)
          };

          return ret;
        }
      }; // elesfn


      module.exports = elesfn;

      /***/
    },
    /* 38 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      var elesfn = {

        pageRank: function pageRank(options) {
          options = options || {};

          var normalizeVector = function normalizeVector(vector) {
            var length = vector.length;

            // First, get sum of all elements
            var total = 0;
            for (var i = 0; i < length; i++) {
              total += vector[i];
            }

            // Now, divide each by the sum of all elements
            for (var i = 0; i < length; i++) {
              vector[i] = vector[i] / total;
            }
          };

          // dampingFactor - optional
          if (options != null && options.dampingFactor != null) {
            var dampingFactor = options.dampingFactor;
          } else {
            var dampingFactor = 0.8; // Default damping factor
          }

          // desired precision - optional
          if (options != null && options.precision != null) {
            var epsilon = options.precision;
          } else {
            var epsilon = 0.000001; // Default precision
          }

          // Max number of iterations - optional
          if (options != null && options.iterations != null) {
            var numIter = options.iterations;
          } else {
            var numIter = 200; // Default number of iterations
          }

          // Weight function - optional
          if (options != null && options.weight != null && is.fn(options.weight)) {
            var weightFn = options.weight;
          } else {
            // If not specified, assume each edge has equal weight (1)
            var weightFn = function weightFn(e) {
              return 1;
            };
          }

          var cy = this._private.cy;
          var edges = this.edges().stdFilter(function (e) {
            return !e.isLoop();
          });
          var nodes = this.nodes();
          var numNodes = nodes.length;
          var numEdges = edges.length;

          // Create numerical identifiers for each node
          // mapping: node id -> position in nodes array
          // for reverse mapping, simply use nodes array
          var id2position = {};
          for (var i = 0; i < numNodes; i++) {
            id2position[nodes[i].id()] = i;
          }

          // Construct transposed adjacency matrix
          // First lets have a zeroed matrix of the right size
          // We'll also keep track of the sum of each column
          var matrix = [];
          var columnSum = [];
          var additionalProb = (1 - dampingFactor) / numNodes;

          // Create null matric
          for (var i = 0; i < numNodes; i++) {
            var newRow = [];
            for (var j = 0; j < numNodes; j++) {
              newRow.push(0.0);
            }
            matrix.push(newRow);
            columnSum.push(0.0);
          }

          // Now, process edges
          for (var i = 0; i < numEdges; i++) {
            var edge = edges[i];
            var s = id2position[edge.source().id()];
            var t = id2position[edge.target().id()];
            var w = weightFn(edge);

            // Update matrix
            matrix[t][s] += w;

            // Update column sum
            columnSum[s] += w;
          }

          // Add additional probability based on damping factor
          // Also, take into account columns that have sum = 0
          var p = 1.0 / numNodes + additionalProb; // Shorthand
          // Traverse matrix, column by column
          for (var j = 0; j < numNodes; j++) {
            if (columnSum[j] === 0) {
              // No 'links' out from node jth, assume equal probability for each possible node
              for (var i = 0; i < numNodes; i++) {
                matrix[i][j] = p;
              }
            } else {
              // Node jth has outgoing link, compute normalized probabilities
              for (var i = 0; i < numNodes; i++) {
                matrix[i][j] = matrix[i][j] / columnSum[j] + additionalProb;
              }
            }
          }

          // Compute dominant eigenvector using power method
          var eigenvector = [];
          var nullVector = [];
          var previous;

          // Start with a vector of all 1's
          // Also, initialize a null vector which will be used as shorthand
          for (var i = 0; i < numNodes; i++) {
            eigenvector.push(1.0);
            nullVector.push(0.0);
          }

          for (var iter = 0; iter < numIter; iter++) {
            // New array with all 0's
            var temp = nullVector.slice(0);

            // Multiply matrix with previous result
            for (var i = 0; i < numNodes; i++) {
              for (var j = 0; j < numNodes; j++) {
                temp[i] += matrix[i][j] * eigenvector[j];
              }
            }

            normalizeVector(temp);
            previous = eigenvector;
            eigenvector = temp;

            var diff = 0;
            // Compute difference (squared module) of both vectors
            for (var i = 0; i < numNodes; i++) {
              diff += Math.pow(previous[i] - eigenvector[i], 2);
            }

            // If difference is less than the desired threshold, stop iterating
            if (diff < epsilon) {
              break;
            }
          }

          // Construct result
          var res = {
            rank: function rank(node) {
              if (is.string(node)) {
                // is a selector string
                var nodeId = cy.filter(node)[0].id();
              } else {
                // is a node object
                var nodeId = node.id();
              }
              return eigenvector[id2position[nodeId]];
            }
          };

          return res;
        } // pageRank

      }; // elesfn

      module.exports = elesfn;

      /***/
    },
    /* 39 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);

      var elesfn = {

        degreeCentralityNormalized: function degreeCentralityNormalized(options) {
          options = options || {};

          var cy = this.cy();

          // directed - optional
          if (options.directed != null) {
            var directed = options.directed;
          } else {
            var directed = false;
          }

          var nodes = this.nodes();
          var numNodes = nodes.length;

          if (!directed) {
            var degrees = {};
            var maxDegree = 0;

            for (var i = 0; i < numNodes; i++) {
              var node = nodes[i];
              // add current node to the current options object and call degreeCentrality
              var currDegree = this.degreeCentrality(util.extend({}, options, { root: node }));
              if (maxDegree < currDegree.degree) maxDegree = currDegree.degree;

              degrees[node.id()] = currDegree.degree;
            }

            return {
              degree: function degree(node) {
                if (maxDegree == 0) return 0;

                if (is.string(node)) {
                  // from is a selector string
                  var node = cy.filter(node)[0].id();
                } else {
                  // from is a node
                  var node = node.id();
                }

                return degrees[node] / maxDegree;
              }
            };
          } else {
            var indegrees = {};
            var outdegrees = {};
            var maxIndegree = 0;
            var maxOutdegree = 0;

            for (var i = 0; i < numNodes; i++) {
              var node = nodes[i];
              // add current node to the current options object and call degreeCentrality
              var currDegree = this.degreeCentrality(util.extend({}, options, { root: node }));

              if (maxIndegree < currDegree.indegree) maxIndegree = currDegree.indegree;

              if (maxOutdegree < currDegree.outdegree) maxOutdegree = currDegree.outdegree;

              indegrees[node.id()] = currDegree.indegree;
              outdegrees[node.id()] = currDegree.outdegree;
            }

            return {
              indegree: function indegree(node) {
                if (maxIndegree == 0) return 0;

                if (is.string(node)) {
                  // from is a selector string
                  var node = cy.filter(node)[0].id();
                } else {
                  // from is a node
                  var node = node.id();
                }

                return indegrees[node] / maxIndegree;
              },
              outdegree: function outdegree(node) {
                if (maxOutdegree == 0) return 0;

                if (is.string(node)) {
                  // from is a selector string
                  var node = cy.filter(node)[0].id();
                } else {
                  // from is a node
                  var node = node.id();
                }

                return outdegrees[node] / maxOutdegree;
              }

            };
          }
        }, // degreeCentralityNormalized

        // Implemented from the algorithm in Opsahl's paper
        // "Node centrality in weighted networks: Generalizing degree and shortest paths"
        // check the heading 2 "Degree"
        degreeCentrality: function degreeCentrality(options) {
          options = options || {};

          var callingEles = this;

          // root - mandatory!
          if (options != null && options.root != null) {
            var root = is.string(options.root) ? this.filter(options.root)[0] : options.root[0];
          } else {
            return undefined;
          }

          // weight - optional
          if (options.weight != null && is.fn(options.weight)) {
            var weightFn = options.weight;
          } else {
            // If not specified, assume each edge has equal weight (1)
            var weightFn = function weightFn(e) {
              return 1;
            };
          }

          // directed - optional
          if (options.directed != null) {
            var directed = options.directed;
          } else {
            var directed = false;
          }

          // alpha - optional
          if (options.alpha != null && is.number(options.alpha)) {
            var alpha = options.alpha;
          } else {
            alpha = 0;
          }

          if (!directed) {
            var connEdges = root.connectedEdges().intersection(callingEles);
            var k = connEdges.length;
            var s = 0;

            // Now, sum edge weights
            for (var i = 0; i < connEdges.length; i++) {
              var edge = connEdges[i];
              s += weightFn(edge);
            }

            return {
              degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
            };
          } else {
            var incoming = root.connectedEdges('edge[target = "' + root.id() + '"]').intersection(callingEles);
            var outgoing = root.connectedEdges('edge[source = "' + root.id() + '"]').intersection(callingEles);
            var k_in = incoming.length;
            var k_out = outgoing.length;
            var s_in = 0;
            var s_out = 0;

            // Now, sum incoming edge weights
            for (var i = 0; i < incoming.length; i++) {
              var edge = incoming[i];
              s_in += weightFn(edge);
            }

            // Now, sum outgoing edge weights
            for (var i = 0; i < outgoing.length; i++) {
              var edge = outgoing[i];
              s_out += weightFn(edge);
            }

            return {
              indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
              outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
            };
          }
        } // degreeCentrality

      }; // elesfn

      // nice, short mathemathical alias
      elesfn.dc = elesfn.degreeCentrality;
      elesfn.dcn = elesfn.degreeCentralityNormalised = elesfn.degreeCentralityNormalized;

      module.exports = elesfn;

      /***/
    },
    /* 40 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      var elesfn = {

        closenessCentralityNormalized: function closenessCentralityNormalized(options) {
          options = options || {};

          var cy = this.cy();

          var harmonic = options.harmonic;
          if (harmonic === undefined) {
            harmonic = true;
          }

          var closenesses = {};
          var maxCloseness = 0;
          var nodes = this.nodes();
          var fw = this.floydWarshall({ weight: options.weight, directed: options.directed });

          // Compute closeness for every node and find the maximum closeness
          for (var i = 0; i < nodes.length; i++) {
            var currCloseness = 0;
            for (var j = 0; j < nodes.length; j++) {
              if (i != j) {
                var d = fw.distance(nodes[i], nodes[j]);

                if (harmonic) {
                  currCloseness += 1 / d;
                } else {
                  currCloseness += d;
                }
              }
            }

            if (!harmonic) {
              currCloseness = 1 / currCloseness;
            }

            if (maxCloseness < currCloseness) {
              maxCloseness = currCloseness;
            }

            closenesses[nodes[i].id()] = currCloseness;
          }

          return {
            closeness: function closeness(node) {
              if (maxCloseness == 0) {
                return 0;
              }

              if (is.string(node)) {
                // from is a selector string
                var node = cy.filter(node)[0].id();
              } else {
                // from is a node
                var node = node.id();
              }

              return closenesses[node] / maxCloseness;
            }
          };
        },

        // Implemented from pseudocode from wikipedia
        closenessCentrality: function closenessCentrality(options) {
          options = options || {};

          // root - mandatory!
          if (options.root != null) {
            if (is.string(options.root)) {
              // use it as a selector, e.g. "#rootID
              var root = this.filter(options.root)[0];
            } else {
              var root = options.root[0];
            }
          } else {
            return undefined;
          }

          // weight - optional
          if (options.weight != null && is.fn(options.weight)) {
            var weight = options.weight;
          } else {
            var weight = function weight() {
              return 1;
            };
          }

          // directed - optional
          if (options.directed != null && is.bool(options.directed)) {
            var directed = options.directed;
          } else {
            var directed = false;
          }

          var harmonic = options.harmonic;
          if (harmonic === undefined) {
            harmonic = true;
          }

          // we need distance from this node to every other node
          var dijkstra = this.dijkstra({
            root: root,
            weight: weight,
            directed: directed
          });
          var totalDistance = 0;

          var nodes = this.nodes();
          for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].id() != root.id()) {
              var d = dijkstra.distanceTo(nodes[i]);

              if (harmonic) {
                totalDistance += 1 / d;
              } else {
                totalDistance += d;
              }
            }
          }

          return harmonic ? totalDistance : 1 / totalDistance;
        } // closenessCentrality

      }; // elesfn

      // nice, short mathemathical alias
      elesfn.cc = elesfn.closenessCentrality;
      elesfn.ccn = elesfn.closenessCentralityNormalised = elesfn.closenessCentralityNormalized;

      module.exports = elesfn;

      /***/
    },
    /* 41 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Heap = __webpack_require__(9);

      var elesfn = {

        // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
        betweennessCentrality: function betweennessCentrality(options) {
          options = options || {};

          // Weight - optional
          var weighted, weightFn;
          if (is.fn(options.weight)) {
            weightFn = options.weight;
            weighted = true;
          } else {
            weighted = false;
          }

          // Directed - default false
          var directed = options.directed != null ? options.directed : false;

          var cy = this._private.cy;

          // starting
          var V = this.nodes();
          var A = {};
          var _C = {};
          var max = 0;
          var C = {
            set: function set(key, val) {
              _C[key] = val;

              if (val > max) {
                max = val;
              }
            },

            get: function get(key) {
              return _C[key];
            }
          };

          // A contains the neighborhoods of every node
          for (var i = 0; i < V.length; i++) {
            var v = V[i];
            var vid = v.id();

            if (directed) {
              A[vid] = v.outgoers().nodes(); // get outgoers of every node
            } else {
              A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
            }

            C.set(vid, 0);
          }

          for (var s = 0; s < V.length; s++) {
            var sid = V[s].id();
            var S = []; // stack
            var P = {};
            var g = {};
            var d = {};
            var Q = new Heap(function (a, b) {
              return d[a] - d[b];
            }); // queue

            // init dictionaries
            for (var i = 0; i < V.length; i++) {
              var vid = V[i].id();

              P[vid] = [];
              g[vid] = 0;
              d[vid] = Infinity;
            }

            g[sid] = 1; // sigma
            d[sid] = 0; // distance to s

            Q.push(sid);

            while (!Q.empty()) {
              var v = Q.pop();

              S.push(v);

              if (weighted) {
                for (var j = 0; j < A[v].length; j++) {
                  var w = A[v][j];
                  var vEle = cy.getElementById(v);

                  var edge;
                  if (vEle.edgesTo(w).length > 0) {
                    edge = vEle.edgesTo(w)[0];
                  } else {
                    edge = w.edgesTo(vEle)[0];
                  }

                  var edgeWeight = weightFn(edge);

                  w = w.id();

                  if (d[w] > d[v] + edgeWeight) {
                    d[w] = d[v] + edgeWeight;

                    if (Q.nodes.indexOf(w) < 0) {
                      //if w is not in Q
                      Q.push(w);
                    } else {
                      // update position if w is in Q
                      Q.updateItem(w);
                    }

                    g[w] = 0;
                    P[w] = [];
                  }

                  if (d[w] == d[v] + edgeWeight) {
                    g[w] = g[w] + g[v];
                    P[w].push(v);
                  }
                }
              } else {
                for (var j = 0; j < A[v].length; j++) {
                  var w = A[v][j].id();

                  if (d[w] == Infinity) {
                    Q.push(w);

                    d[w] = d[v] + 1;
                  }

                  if (d[w] == d[v] + 1) {
                    g[w] = g[w] + g[v];
                    P[w].push(v);
                  }
                }
              }
            }

            var e = {};
            for (var i = 0; i < V.length; i++) {
              e[V[i].id()] = 0;
            }

            while (S.length > 0) {
              var w = S.pop();

              for (var j = 0; j < P[w].length; j++) {
                var v = P[w][j];

                e[v] = e[v] + g[v] / g[w] * (1 + e[w]);

                if (w != V[s].id()) {
                  C.set(w, C.get(w) + e[w]);
                }
              }
            }
          }

          var ret = {
            betweenness: function betweenness(node) {
              if (is.string(node)) {
                var node = cy.filter(node).id();
              } else {
                var node = node.id();
              }

              return C.get(node);
            },

            betweennessNormalized: function betweennessNormalized(node) {
              if (max == 0) return 0;

              if (is.string(node)) {
                var node = cy.filter(node).id();
              } else {
                var node = node.id();
              }

              return C.get(node) / max;
            }
          };

          // alias
          ret.betweennessNormalised = ret.betweennessNormalized;

          return ret;
        } // betweennessCentrality

      }; // elesfn

      // nice, short mathemathical alias
      elesfn.bc = elesfn.betweennessCentrality;

      module.exports = elesfn;

      /***/
    },
    /* 42 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var define = __webpack_require__(4);

      var elesfn = {
        animate: define.animate(),
        animation: define.animation(),
        animated: define.animated(),
        clearQueue: define.clearQueue(),
        delay: define.delay(),
        delayAnimation: define.delayAnimation(),
        stop: define.stop()
      };

      module.exports = elesfn;

      /***/
    },
    /* 43 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var Animation = __webpack_require__(44);
      var math = __webpack_require__(2);
      var is = __webpack_require__(0);

      var define = {

        animated: function animated() {
          return function animatedImpl() {
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
            var cy = this._private.cy || this;

            if (!cy.styleEnabled()) {
              return false;
            }

            var ele = all[0];

            if (ele) {
              return ele._private.animation.current.length > 0;
            }
          };
        }, // animated

        clearQueue: function clearQueue() {
          return function clearQueueImpl() {
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
            var cy = this._private.cy || this;

            if (!cy.styleEnabled()) {
              return this;
            }

            for (var i = 0; i < all.length; i++) {
              var ele = all[i];
              ele._private.animation.queue = [];
            }

            return this;
          };
        }, // clearQueue

        delay: function delay() {
          return function delayImpl(time, complete) {
            var cy = this._private.cy || this;

            if (!cy.styleEnabled()) {
              return this;
            }

            return this.animate({
              delay: time,
              duration: time,
              complete: complete
            });
          };
        }, // delay

        delayAnimation: function delayAnimation() {
          return function delayAnimationImpl(time, complete) {
            var cy = this._private.cy || this;

            if (!cy.styleEnabled()) {
              return this;
            }

            return this.animation({
              delay: time,
              duration: time,
              complete: complete
            });
          };
        }, // delay

        animation: function animation() {
          return function animationImpl(properties, params) {
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
            var cy = this._private.cy || this;
            var isCore = !selfIsArrayLike;
            var isEles = !isCore;

            if (!cy.styleEnabled()) {
              return this;
            }

            var style = cy.style();

            properties = util.assign({}, properties, params);

            var propertiesEmpty = Object.keys(properties).length === 0;

            if (propertiesEmpty) {
              return new Animation(all[0], properties); // nothing to animate
            }

            if (properties.duration === undefined) {
              properties.duration = 400;
            }

            switch (properties.duration) {
              case 'slow':
                properties.duration = 600;
                break;
              case 'fast':
                properties.duration = 200;
                break;
            }

            if (isEles) {
              properties.style = style.getPropsList(properties.style || properties.css);

              properties.css = undefined;
            }

            if (isEles && properties.renderedPosition != null) {
              var rpos = properties.renderedPosition;
              var pan = cy.pan();
              var zoom = cy.zoom();

              properties.position = math.renderedToModelPosition(rpos, zoom, pan);
            }

            // override pan w/ panBy if set
            if (isCore && properties.panBy != null) {
              var panBy = properties.panBy;
              var cyPan = cy.pan();

              properties.pan = {
                x: cyPan.x + panBy.x,
                y: cyPan.y + panBy.y
              };
            }

            // override pan w/ center if set
            var center = properties.center || properties.centre;
            if (isCore && center != null) {
              var centerPan = cy.getCenterPan(center.eles, properties.zoom);

              if (centerPan != null) {
                properties.pan = centerPan;
              }
            }

            // override pan & zoom w/ fit if set
            if (isCore && properties.fit != null) {
              var fit = properties.fit;
              var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

              if (fitVp != null) {
                properties.pan = fitVp.pan;
                properties.zoom = fitVp.zoom;
              }
            }

            // override zoom (& potentially pan) w/ zoom obj if set
            if (isCore && is.plainObject(properties.zoom)) {
              var vp = cy.getZoomedViewport(properties.zoom);

              if (vp != null) {
                if (vp.zoomed) {
                  properties.zoom = vp.zoom;
                }

                if (vp.panned) {
                  properties.pan = vp.pan;
                }
              }
            }

            return new Animation(all[0], properties);
          };
        }, // animate

        animate: function animate() {
          return function animateImpl(properties, params) {
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
            var cy = this._private.cy || this;

            if (!cy.styleEnabled()) {
              return this;
            }

            if (params) {
              properties = util.extend({}, properties, params);
            }

            // manually hook and run the animation
            for (var i = 0; i < all.length; i++) {
              var ele = all[i];
              var queue = ele.animated() && (properties.queue === undefined || properties.queue);

              var ani = ele.animation(properties, queue ? { queue: true } : undefined);

              ani.play();
            }

            return this; // chaining
          };
        }, // animate

        stop: function stop() {
          return function stopImpl(clearQueue, jumpToEnd) {
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
            var cy = this._private.cy || this;

            if (!cy.styleEnabled()) {
              return this;
            }

            for (var i = 0; i < all.length; i++) {
              var ele = all[i];
              var _p = ele._private;
              var anis = _p.animation.current;

              for (var j = 0; j < anis.length; j++) {
                var ani = anis[j];
                var ani_p = ani._private;

                if (jumpToEnd) {
                  // next iteration of the animation loop, the animation
                  // will go straight to the end and be removed
                  ani_p.duration = 0;
                }
              }

              // clear the queue of future animations
              if (clearQueue) {
                _p.animation.queue = [];
              }

              if (!jumpToEnd) {
                _p.animation.current = [];
              }
            }

            // we have to notify (the animation loop doesn't do it for us on `stop`)
            cy.notify({
              eles: this,
              type: 'draw'
            });

            return this;
          };
        } // stop

      }; // define

      module.exports = define;

      /***/
    },
    /* 44 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var Promise = __webpack_require__(5);

      var Animation = function Animation(target, opts, opts2) {
        var _p = this._private = util.extend({
          duration: 1000
        }, opts, opts2);

        _p.target = target;
        _p.style = _p.style || _p.css;
        _p.started = false;
        _p.playing = false;
        _p.hooked = false;
        _p.applying = false;
        _p.progress = 0;
        _p.completes = [];
        _p.frames = [];

        if (_p.complete && is.fn(_p.complete)) {
          _p.completes.push(_p.complete);
        }

        // for future timeline/animations impl
        this.length = 1;
        this[0] = this;
      };

      var anifn = Animation.prototype;

      util.extend(anifn, {

        instanceString: function instanceString() {
          return 'animation';
        },

        hook: function hook() {
          var _p = this._private;

          if (!_p.hooked) {
            // add to target's animation queue
            var q = void 0;
            var tAni = _p.target._private.animation;
            if (_p.queue) {
              q = tAni.queue;
            } else {
              q = tAni.current;
            }
            q.push(this);

            // add to the animation loop pool
            if (is.elementOrCollection(_p.target)) {
              _p.target.cy().addToAnimationPool(_p.target);
            }

            _p.hooked = true;
          }

          return this;
        },

        play: function play() {
          var _p = this._private;

          // autorewind
          if (_p.progress === 1) {
            _p.progress = 0;
          }

          _p.playing = true;
          _p.started = false; // needs to be started by animation loop
          _p.stopped = false;

          this.hook();

          // the animation loop will start the animation...

          return this;
        },

        playing: function playing() {
          return this._private.playing;
        },

        apply: function apply() {
          var _p = this._private;

          _p.applying = true;
          _p.started = false; // needs to be started by animation loop
          _p.stopped = false;

          this.hook();

          // the animation loop will apply the animation at this progress

          return this;
        },

        applying: function applying() {
          return this._private.applying;
        },

        pause: function pause() {
          var _p = this._private;

          _p.playing = false;
          _p.started = false;

          return this;
        },

        stop: function stop() {
          var _p = this._private;

          _p.playing = false;
          _p.started = false;
          _p.stopped = true; // to be removed from animation queues

          return this;
        },

        rewind: function rewind() {
          return this.progress(0);
        },

        fastforward: function fastforward() {
          return this.progress(1);
        },

        time: function time(t) {
          var _p = this._private;

          if (t === undefined) {
            return _p.progress * _p.duration;
          } else {
            return this.progress(t / _p.duration);
          }
        },

        progress: function progress(p) {
          var _p = this._private;
          var wasPlaying = _p.playing;

          if (p === undefined) {
            return _p.progress;
          } else {
            if (wasPlaying) {
              this.pause();
            }

            _p.progress = p;
            _p.started = false;

            if (wasPlaying) {
              this.play();
            }
          }

          return this;
        },

        completed: function completed() {
          return this._private.progress === 1;
        },

        reverse: function reverse() {
          var _p = this._private;
          var wasPlaying = _p.playing;

          if (wasPlaying) {
            this.pause();
          }

          _p.progress = 1 - _p.progress;
          _p.started = false;

          var swap = function swap(a, b) {
            var _pa = _p[a];

            if (_pa == null) {
              return;
            }

            _p[a] = _p[b];
            _p[b] = _pa;
          };

          swap('zoom', 'startZoom');
          swap('pan', 'startPan');
          swap('position', 'startPosition');

          // swap styles
          if (_p.style) {
            for (var i = 0; i < _p.style.length; i++) {
              var prop = _p.style[i];
              var name = prop.name;
              var startStyleProp = _p.startStyle[name];

              _p.startStyle[name] = prop;
              _p.style[i] = startStyleProp;
            }
          }

          if (wasPlaying) {
            this.play();
          }

          return this;
        },

        promise: function promise(type) {
          var _p = this._private;

          var arr = void 0;

          switch (type) {
            case 'frame':
              arr = _p.frames;
              break;
            default:
            case 'complete':
            case 'completed':
              arr = _p.completes;
          }

          return new Promise(function (resolve, reject) {
            arr.push(function () {
              resolve();
            });
          });
        }

      });

      anifn.complete = anifn.completed;

      module.exports = Animation;

      /***/
    },
    /* 45 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }return obj;
      }

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);

      var define = {

        // access data field
        data: function data(params) {
          var defaults = {
            field: 'data',
            bindingEvent: 'data',
            allowBinding: false,
            allowSetting: false,
            allowGetting: false,
            settingEvent: 'data',
            settingTriggersEvent: false,
            triggerFnName: 'trigger',
            immutableKeys: {}, // key => true if immutable
            updateStyle: false,
            beforeGet: function beforeGet(self) {},
            beforeSet: function beforeSet(self, obj) {},
            onSet: function onSet(self) {},
            canSet: function canSet(self) {
              return true;
            }
          };
          params = util.extend({}, defaults, params);

          return function dataImpl(name, value) {
            var p = params;
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
            var single = selfIsArrayLike ? self[0] : self;

            // .data('foo', ...)
            if (is.string(name)) {
              // set or get property

              // .data('foo')
              if (p.allowGetting && value === undefined) {
                // get

                var ret = void 0;
                if (single) {
                  p.beforeGet(single);

                  ret = single._private[p.field][name];
                }
                return ret;

                // .data('foo', 'bar')
              } else if (p.allowSetting && value !== undefined) {
                // set
                var valid = !p.immutableKeys[name];
                if (valid) {
                  var change = _defineProperty({}, name, value);

                  p.beforeSet(self, change);

                  for (var i = 0, l = all.length; i < l; i++) {
                    var ele = all[i];

                    if (p.canSet(ele)) {
                      ele._private[p.field][name] = value;
                    }
                  }

                  // update mappers if asked
                  if (p.updateStyle) {
                    self.updateStyle();
                  }

                  // call onSet callback
                  p.onSet(self);

                  if (p.settingTriggersEvent) {
                    self[p.triggerFnName](p.settingEvent);
                  }
                }
              }

              // .data({ 'foo': 'bar' })
            } else if (p.allowSetting && is.plainObject(name)) {
              // extend
              var obj = name;
              var k = void 0,
                  v = void 0;
              var keys = Object.keys(obj);

              p.beforeSet(self, obj);

              for (var _i = 0; _i < keys.length; _i++) {
                k = keys[_i];
                v = obj[k];

                var _valid = !p.immutableKeys[k];
                if (_valid) {
                  for (var j = 0; j < all.length; j++) {
                    var _ele = all[j];

                    if (p.canSet(_ele)) {
                      _ele._private[p.field][k] = v;
                    }
                  }
                }
              }

              // update mappers if asked
              if (p.updateStyle) {
                self.updateStyle();
              }

              // call onSet callback
              p.onSet(self);

              if (p.settingTriggersEvent) {
                self[p.triggerFnName](p.settingEvent);
              }

              // .data(function(){ ... })
            } else if (p.allowBinding && is.fn(name)) {
              // bind to event
              var fn = name;
              self.on(p.bindingEvent, fn);

              // .data()
            } else if (p.allowGetting && name === undefined) {
              // get whole object
              var _ret = void 0;
              if (single) {
                p.beforeGet(single);

                _ret = single._private[p.field];
              }
              return _ret;
            }

            return self; // maintain chainability
          }; // function
        }, // data

        // remove data field
        removeData: function removeData(params) {
          var defaults = {
            field: 'data',
            event: 'data',
            triggerFnName: 'trigger',
            triggerEvent: false,
            immutableKeys: {} // key => true if immutable
          };
          params = util.extend({}, defaults, params);

          return function removeDataImpl(names) {
            var p = params;
            var self = this;
            var selfIsArrayLike = self.length !== undefined;
            var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

            // .removeData('foo bar')
            if (is.string(names)) {
              // then get the list of keys, and delete them
              var keys = names.split(/\s+/);
              var l = keys.length;

              for (var i = 0; i < l; i++) {
                // delete each non-empty key
                var key = keys[i];
                if (is.emptyString(key)) {
                  continue;
                }

                var valid = !p.immutableKeys[key]; // not valid if immutable
                if (valid) {
                  for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
                    all[i_a]._private[p.field][key] = undefined;
                  }
                }
              }

              if (p.triggerEvent) {
                self[p.triggerFnName](p.event);
              }

              // .removeData()
            } else if (names === undefined) {
              // then delete all keys

              for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
                var _privateFields = all[_i_a]._private[p.field];
                var _keys = Object.keys(_privateFields);

                for (var _i2 = 0; _i2 < _keys.length; _i2++) {
                  var _key = _keys[_i2];
                  var validKeyToDelete = !p.immutableKeys[_key];

                  if (validKeyToDelete) {
                    _privateFields[_key] = undefined;
                  }
                }
              }

              if (p.triggerEvent) {
                self[p.triggerFnName](p.event);
              }
            }

            return self; // maintain chaining
          }; // function
        } // removeData
      }; // define

      module.exports = define;

      /***/
    },
    /* 46 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Promise = __webpack_require__(5);

      var define = {

        eventAliasesOn: function eventAliasesOn(proto) {
          var p = proto;

          p.addListener = p.listen = p.bind = p.on;
          p.unlisten = p.unbind = p.off = p.removeListener;
          p.trigger = p.emit;

          // this is just a wrapper alias of .on()
          p.pon = p.promiseOn = function (events, selector) {
            var self = this;
            var args = Array.prototype.slice.call(arguments, 0);

            return new Promise(function (resolve, reject) {
              var callback = function callback(e) {
                self.off.apply(self, offArgs);

                resolve(e);
              };

              var onArgs = args.concat([callback]);
              var offArgs = onArgs.concat([]);

              self.on.apply(self, onArgs);
            });
          };
        }

      }; // define

      module.exports = define;

      /***/
    },
    /* 47 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Set = __webpack_require__(8);

      var elesfn = {
        classes: function classes(_classes) {
          _classes = (_classes || '').match(/\S+/g) || [];
          var self = this;
          var changed = [];
          var classesMap = new Set(_classes);

          // check and update each ele

          var _loop = function _loop(j) {
            var ele = self[j];
            var _p = ele._private;
            var eleClasses = _p.classes;
            var changedEle = false;

            // check if ele has all of the passed classes
            classesMap.forEach(function (cls) {
              var eleHasClass = eleClasses.has(cls);

              if (!eleHasClass) {
                changedEle = true;
              }
            });

            // check if ele has classes outside of those passed
            if (!changedEle) {
              eleClasses.forEach(function (eleCls) {
                var specdClass = classesMap.has(eleCls);

                if (!specdClass) {
                  changedEle = true;
                }
              });
            }

            if (changedEle) {
              _p.classes = new Set(classesMap);

              changed.push(ele);
            }
          };

          for (var j = 0; j < self.length; j++) {
            _loop(j);
          }

          // trigger update style on those eles that had class changes
          if (changed.length > 0) {
            this.spawn(changed).updateStyle().emit('class');
          }

          return self;
        },

        addClass: function addClass(classes) {
          return this.toggleClass(classes, true);
        },

        hasClass: function hasClass(className) {
          var ele = this[0];
          return ele != null && ele._private.classes.has(className);
        },

        toggleClass: function toggleClass(classesStr, toggle) {
          var classes = classesStr.match(/\S+/g) || [];
          var self = this;
          var changed = []; // eles who had classes changed

          for (var i = 0, il = self.length; i < il; i++) {
            var _ele = self[i];
            var _changedEle = false;

            for (var j = 0; j < classes.length; j++) {
              var cls = classes[j];
              var _eleClasses = _ele._private.classes;
              var hasClass = _eleClasses.has(cls);
              var shouldAdd = toggle || toggle === undefined && !hasClass;

              if (shouldAdd) {
                _eleClasses.add(cls);

                if (!hasClass && !_changedEle) {
                  changed.push(_ele);
                  _changedEle = true;
                }
              } else {
                // then remove
                _eleClasses.delete(cls);

                if (hasClass && !_changedEle) {
                  changed.push(_ele);
                  _changedEle = true;
                }
              }
            } // for j classes
          } // for i eles

          // trigger update style on those eles that had class changes
          if (changed.length > 0) {
            this.spawn(changed).updateStyle().emit('class');
          }

          return self;
        },

        removeClass: function removeClass(classes) {
          return this.toggleClass(classes, false);
        },

        flashClass: function flashClass(classes, duration) {
          var self = this;

          if (duration == null) {
            duration = 250;
          } else if (duration === 0) {
            return self; // nothing to do really
          }

          self.addClass(classes);
          setTimeout(function () {
            self.removeClass(classes);
          }, duration);

          return self;
        }
      };

      module.exports = elesfn;

      /***/
    },
    /* 48 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Selector = __webpack_require__(6);

      var elesfn = {
        allAre: function allAre(selector) {
          var selObj = new Selector(selector);

          return this.every(function (ele) {
            return selObj.matches(ele);
          });
        },

        is: function is(selector) {
          var selObj = new Selector(selector);

          return this.some(function (ele) {
            return selObj.matches(ele);
          });
        },

        some: function some(fn, thisArg) {
          for (var i = 0; i < this.length; i++) {
            var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

            if (ret) {
              return true;
            }
          }

          return false;
        },

        every: function every(fn, thisArg) {
          for (var i = 0; i < this.length; i++) {
            var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

            if (!ret) {
              return false;
            }
          }

          return true;
        },

        same: function same(collection) {
          collection = this.cy().collection(collection);

          // cheap extra check
          if (this.length !== collection.length) {
            return false;
          }

          return this.every(function (ele) {
            return collection.hasElementWithId(ele.id());
          });
        },

        anySame: function anySame(collection) {
          collection = this.cy().collection(collection);

          return this.some(function (ele) {
            return collection.hasElementWithId(ele.id());
          });
        },

        allAreNeighbors: function allAreNeighbors(collection) {
          collection = this.cy().collection(collection);

          var nhood = this.neighborhood();

          return collection.every(function (ele) {
            return nhood.hasElementWithId(ele.id());
          });
        },

        contains: function contains(collection) {
          collection = this.cy().collection(collection);

          var self = this;

          return collection.every(function (ele) {
            return self.hasElementWithId(ele.id());
          });
        }
      };

      elesfn.allAreNeighbours = elesfn.allAreNeighbors;
      elesfn.has = elesfn.contains;

      module.exports = elesfn;

      /***/
    },
    /* 49 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var exprs = __webpack_require__(50);
      var newQuery = __webpack_require__(10);

      // of all the expressions, find the first match in the remaining text
      var consumeExpr = function consumeExpr(remaining) {
        var expr = void 0;
        var match = void 0;
        var name = void 0;

        for (var j = 0; j < exprs.length; j++) {
          var e = exprs[j];
          var n = e.name;

          var m = remaining.match(e.regexObj);

          if (m != null) {
            match = m;
            expr = e;
            name = n;

            var consumed = m[0];
            remaining = remaining.substring(consumed.length);

            break; // we've consumed one expr, so we can return now
          }
        }

        return {
          expr: expr,
          match: match,
          name: name,
          remaining: remaining
        };
      };

      // consume all leading whitespace
      var consumeWhitespace = function consumeWhitespace(remaining) {
        var match = remaining.match(/^\s+/);

        if (match) {
          var consumed = match[0];
          remaining = remaining.substring(consumed.length);
        }

        return remaining;
      };

      var parse = function parse(selector) {
        var self = this;

        var remaining = self._private.selectorText = selector;

        var currentQuery = self[0] = newQuery();
        self.length = 1;

        remaining = consumeWhitespace(remaining); // get rid of leading whitespace

        for (;;) {
          var check = consumeExpr(remaining);

          if (check.expr == null) {
            util.error('The selector `' + selector + '`is invalid');
            return false;
          } else {
            var args = check.match.slice(1);

            // let the token populate the selector object in currentQuery
            var ret = check.expr.populate(self, currentQuery, args);

            if (ret === false) {
              return false; // exit if population failed
            } else if (ret != null) {
              currentQuery = ret; // change the current query to be filled if the expr specifies
            }
          }

          remaining = check.remaining;

          // we're done when there's nothing left to parse
          if (remaining.match(/^\s*$/)) {
            break;
          }
        }

        // adjust references for subject
        for (var j = 0; j < self.length; j++) {
          var query = self[j];

          if (query.subject != null) {
            // go up the tree until we reach the subject
            for (;;) {
              if (query.subject === query) {
                break;
              } // done if subject is self

              if (query.parent != null) {
                // swap parent/child reference
                var parent = query.parent;
                var child = query;

                child.parent = null;
                parent.child = child;

                query = parent; // go up the tree
              } else if (query.ancestor != null) {
                // swap ancestor/descendant
                var ancestor = query.ancestor;
                var descendant = query;

                descendant.ancestor = null;
                ancestor.descendant = descendant;

                query = ancestor; // go up the tree
              } else if (query.source || query.target || query.connectedNodes) {
                util.error('The selector `' + self.text() + '` can not contain a subject selector that applies to the source or target of an edge selector');
                return false;
              } else {
                util.error('When adjusting references for the selector `' + self.text() + '`, neither parent nor ancestor was found');
                return false;
              }
            } // for

            self[j] = query.subject; // subject should be the root query
          } // if
        } // for

        return true; // success
      };

      module.exports = { parse: parse };

      /***/
    },
    /* 50 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _slicedToArray = function () {
        function sliceIterator(arr, i) {
          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;_e = err;
          } finally {
            try {
              if (!_n && _i["return"]) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }return _arr;
        }return function (arr, i) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      }();

      var _require = __webpack_require__(15),
          stateSelectorRegex = _require.stateSelectorRegex;

      var tokens = __webpack_require__(51);
      var util = __webpack_require__(1);
      var newQuery = __webpack_require__(10);

      // when a token like a variable has escaped meta characters, we need to clean the backslashes out
      // so that values get compared properly in Selector.filter()
      var cleanMetaChars = function cleanMetaChars(str) {
        return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
          return $1;
        });
      };

      var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
        if (examiningQuery === selector[selector.length - 1]) {
          selector[selector.length - 1] = replacementQuery;
        }
      };

      // NOTE: add new expression syntax here to have it recognised by the parser;
      // - a query contains all adjacent (i.e. no separator in between) expressions;
      // - the current query is stored in selector[i] --- you can use the reference to `this` in the populate function;
      // - you need to check the query objects in Selector.filter() for it actually filter properly, but that's pretty straight forward
      // - when you add something here, also add to Selector.toString()
      var exprs = [{
        name: 'group',
        query: true,
        regex: '(' + tokens.group + ')',
        populate: function populate(selector, query, _ref) {
          var _ref2 = _slicedToArray(_ref, 1),
              group = _ref2[0];

          query.group = group === '*' ? group : group + 's';
        }
      }, {
        name: 'state',
        query: true,
        regex: stateSelectorRegex,
        populate: function populate(selector, query, _ref3) {
          var _ref4 = _slicedToArray(_ref3, 1),
              state = _ref4[0];

          query.colonSelectors.push(state);
        }
      }, {
        name: 'id',
        query: true,
        regex: '\\#(' + tokens.id + ')',
        populate: function populate(selector, query, _ref5) {
          var _ref6 = _slicedToArray(_ref5, 1),
              id = _ref6[0];

          query.ids.push(cleanMetaChars(id));
        }
      }, {
        name: 'className',
        query: true,
        regex: '\\.(' + tokens.className + ')',
        populate: function populate(selector, query, _ref7) {
          var _ref8 = _slicedToArray(_ref7, 1),
              className = _ref8[0];

          query.classes.push(cleanMetaChars(className));
        }
      }, {
        name: 'dataExists',
        query: true,
        regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
        populate: function populate(selector, query, _ref9) {
          var _ref10 = _slicedToArray(_ref9, 1),
              variable = _ref10[0];

          query.data.push({
            field: cleanMetaChars(variable)
          });
        }
      }, {
        name: 'dataCompare',
        query: true,
        regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
        populate: function populate(selector, query, _ref11) {
          var _ref12 = _slicedToArray(_ref11, 3),
              variable = _ref12[0],
              comparatorOp = _ref12[1],
              value = _ref12[2];

          var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

          if (valueIsString) {
            value = value.substring(1, value.length - 1);
          } else {
            value = parseFloat(value);
          }

          query.data.push({
            field: cleanMetaChars(variable),
            operator: comparatorOp,
            value: value
          });
        }
      }, {
        name: 'dataBool',
        query: true,
        regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
        populate: function populate(selector, query, _ref13) {
          var _ref14 = _slicedToArray(_ref13, 2),
              boolOp = _ref14[0],
              variable = _ref14[1];

          query.data.push({
            field: cleanMetaChars(variable),
            operator: boolOp
          });
        }
      }, {
        name: 'metaCompare',
        query: true,
        regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
        populate: function populate(selector, query, _ref15) {
          var _ref16 = _slicedToArray(_ref15, 3),
              meta = _ref16[0],
              comparatorOp = _ref16[1],
              number = _ref16[2];

          query.meta.push({
            field: cleanMetaChars(meta),
            operator: comparatorOp,
            value: parseFloat(number)
          });
        }
      }, {
        name: 'nextQuery',
        separator: true,
        regex: tokens.separator,
        populate: function populate(selector) {
          // go on to next query
          var nextQuery = selector[selector.length++] = newQuery();
          selector.currentSubject = null;

          return nextQuery;
        }
      }, {
        name: 'directedEdge',
        separator: true,
        regex: tokens.directedEdge,
        populate: function populate(selector, query) {
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();

          edgeQuery.group = 'edges';
          edgeQuery.target = target;
          edgeQuery.source = source;
          edgeQuery.subject = selector.currentSubject;

          // the query in the selector should be the edge rather than the source
          replaceLastQuery(selector, query, edgeQuery);

          // we're now populating the target query with expressions that follow
          return target;
        }
      }, {
        name: 'undirectedEdge',
        separator: true,
        regex: tokens.undirectedEdge,
        populate: function populate(selector, query) {
          var edgeQuery = newQuery();
          var source = query;
          var target = newQuery();

          edgeQuery.group = 'edges';
          edgeQuery.connectedNodes = [source, target];
          edgeQuery.subject = selector.currentSubject;

          // the query in the selector should be the edge rather than the source
          replaceLastQuery(selector, query, edgeQuery);

          // we're now populating the target query with expressions that follow
          return target;
        }
      }, {
        name: 'child',
        separator: true,
        regex: tokens.child,
        populate: function populate(selector, query) {
          // this query is the parent of the following query
          var childQuery = newQuery();
          childQuery.parent = query;
          childQuery.subject = selector.currentSubject;

          // it's cheaper to compare children first and go up so replace the parent
          replaceLastQuery(selector, query, childQuery);

          // we're now populating the child query with expressions that follow
          return childQuery;
        }
      }, {
        name: 'descendant',
        separator: true,
        regex: tokens.descendant,
        populate: function populate(selector, query) {
          // this query is the ancestor of the following query
          var descendantQuery = newQuery();
          descendantQuery.ancestor = query;
          descendantQuery.subject = selector.currentSubject;

          // it's cheaper to compare descendants first and go up so replace the ancestor
          replaceLastQuery(selector, query, descendantQuery);

          // we're now populating the descendant query with expressions that follow
          return descendantQuery;
        }
      }, {
        name: 'subject',
        modifier: true,
        regex: tokens.subject,
        populate: function populate(selector, query) {
          if (selector.currentSubject != null && query.subject != query) {
            util.error('Redefinition of subject in selector `' + selector.toString() + '`');
            return false;
          }

          selector.currentSubject = query;
          query.subject = query;
          selector[selector.length - 1].subject = query;
        }
      }];

      exprs.forEach(function (e) {
        return e.regexObj = new RegExp('^' + e.regex);
      });

      module.exports = exprs;

      /***/
    },
    /* 51 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      // tokens in the query language
      var tokens = {
        metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]', // chars we need to escape in let names, etc
        comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=', // binary comparison op (used in data selectors)
        boolOp: '\\?|\\!|\\^', // boolean (unary) operators (used in data selectors)
        string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'", // string literals (used in data selectors) -- doublequotes | singlequotes
        number: util.regex.number, // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
        meta: 'degree|indegree|outdegree', // allowed metadata fields (i.e. allowed functions to use from Collection)
        separator: '\\s*,\\s*', // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
        descendant: '\\s+',
        child: '\\s+>\\s+',
        subject: '\\$',
        group: 'node|edge|\\*',
        directedEdge: '\\s+->\\s+',
        undirectedEdge: '\\s+<->\\s+'
      };
      tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name
      tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number
      tokens.className = tokens.variable; // a class name (follows variable conventions)
      tokens.id = tokens.variable; // an element id (follows variable conventions)

      (function () {
        var ops = void 0,
            op = void 0,
            i = void 0;

        // add @ variants to comparatorOp
        ops = tokens.comparatorOp.split('|');
        for (i = 0; i < ops.length; i++) {
          op = ops[i];
          tokens.comparatorOp += '|@' + op;
        }

        // add ! variants to comparatorOp
        ops = tokens.comparatorOp.split('|');
        for (i = 0; i < ops.length; i++) {
          op = ops[i];

          if (op.indexOf('!') >= 0) {
            continue;
          } // skip ops that explicitly contain !
          if (op === '=') {
            continue;
          } // skip = b/c != is explicitly defined

          tokens.comparatorOp += '|\\!' + op;
        }
      })();

      module.exports = tokens;

      /***/
    },
    /* 52 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var _require = __webpack_require__(15),
          stateSelectorMatches = _require.stateSelectorMatches;

      var is = __webpack_require__(0);

      // generic checking for data/metadata
      var operandsMatch = function operandsMatch(query, params) {
        var allDataMatches = true;
        for (var k = 0; k < query[params.name].length; k++) {
          var data = query[params.name][k];
          var operator = data.operator;
          var value = data.value;
          var field = data.field;
          var _matches = void 0;
          var fieldVal = params.fieldValue(field);

          if (operator != null && value != null) {
            var fieldStr = !is.string(fieldVal) && !is.number(fieldVal) ? '' : '' + fieldVal;
            var valStr = '' + value;

            var caseInsensitive = false;
            if (operator.indexOf('@') >= 0) {
              fieldStr = fieldStr.toLowerCase();
              valStr = valStr.toLowerCase();

              operator = operator.replace('@', '');
              caseInsensitive = true;
            }

            var notExpr = false;
            if (operator.indexOf('!') >= 0) {
              operator = operator.replace('!', '');
              notExpr = true;
            }

            // if we're doing a case insensitive comparison, then we're using a STRING comparison
            // even if we're comparing numbers
            if (caseInsensitive) {
              value = valStr.toLowerCase();
              fieldVal = fieldStr.toLowerCase();
            }

            var isIneqCmp = false;

            switch (operator) {
              case '*=':
                _matches = fieldStr.indexOf(valStr) >= 0;
                break;
              case '$=':
                _matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
                break;
              case '^=':
                _matches = fieldStr.indexOf(valStr) === 0;
                break;
              case '=':
                _matches = fieldVal === value;
                break;
              case '>':
                isIneqCmp = true;
                _matches = fieldVal > value;
                break;
              case '>=':
                isIneqCmp = true;
                _matches = fieldVal >= value;
                break;
              case '<':
                isIneqCmp = true;
                _matches = fieldVal < value;
                break;
              case '<=':
                isIneqCmp = true;
                _matches = fieldVal <= value;
                break;
              default:
                _matches = false;
                break;
            }

            // apply the not op, but null vals for inequalities should always stay non-matching
            if (notExpr && (fieldVal != null || !isIneqCmp)) {
              _matches = !_matches;
            }
          } else if (operator != null) {
            switch (operator) {
              case '?':
                _matches = fieldVal ? true : false;
                break;
              case '!':
                _matches = fieldVal ? false : true;
                break;
              case '^':
                _matches = fieldVal === undefined;
                break;
            }
          } else {
            _matches = fieldVal !== undefined;
          }

          if (!_matches) {
            allDataMatches = false;
            break;
          }
        } // for

        return allDataMatches;
      }; // operandsMatch

      // check parent/child relations
      var confirmRelations = function confirmRelations(query, isNecessary, eles) {
        if (query != null) {
          var _matches2 = false;

          if (!isNecessary) {
            return false;
          }

          eles = eles(); // save cycles if query == null

          // query must match for at least one element (may be recursive)
          for (var i = 0; i < eles.length; i++) {
            if (queryMatches(query, eles[i])) {
              _matches2 = true;
              break;
            }
          }

          return _matches2;
        } else {
          return true;
        }
      };

      var queryMatches = function queryMatches(query, ele) {
        // make single group-only selectors really cheap to check since they're the most common ones
        if (query.groupOnly) {
          return query.group === '*' || query.group === ele.group();
        }

        // check group
        if (query.group != null && query.group != '*' && query.group != ele.group()) {
          return false;
        }

        var cy = ele.cy();
        var k = void 0;

        // check colon selectors
        var allColonSelectorsMatch = true;
        for (k = 0; k < query.colonSelectors.length; k++) {
          var sel = query.colonSelectors[k];

          allColonSelectorsMatch = stateSelectorMatches(sel, ele);

          if (!allColonSelectorsMatch) break;
        }
        if (!allColonSelectorsMatch) return false;

        // check id
        var allIdsMatch = true;
        for (k = 0; k < query.ids.length; k++) {
          var id = query.ids[k];
          var actualId = ele.id();

          allIdsMatch = allIdsMatch && id == actualId;

          if (!allIdsMatch) break;
        }
        if (!allIdsMatch) return false;

        // check classes
        var allClassesMatch = true;
        for (k = 0; k < query.classes.length; k++) {
          var cls = query.classes[k];

          allClassesMatch = allClassesMatch && ele.hasClass(cls);

          if (!allClassesMatch) break;
        }
        if (!allClassesMatch) return false;

        // check data matches
        var allDataMatches = operandsMatch(query, {
          name: 'data',
          fieldValue: function fieldValue(field) {
            return ele.data(field);
          }
        });

        if (!allDataMatches) {
          return false;
        }

        // check metadata matches
        var allMetaMatches = operandsMatch(query, {
          name: 'meta',
          fieldValue: function fieldValue(field) {
            return ele[field]();
          }
        });

        if (!allMetaMatches) {
          return false;
        }

        // check collection
        if (query.collection != null) {
          var matchesAny = query.collection.hasElementWithId(ele.id());

          if (!matchesAny) {
            return false;
          }
        }

        // check filter function
        if (query.filter != null && ele.collection().some(query.filter)) {
          return false;
        }

        var isCompound = cy.hasCompoundNodes();
        var getSource = function getSource() {
          return ele.source();
        };
        var getTarget = function getTarget() {
          return ele.target();
        };

        if (!confirmRelations(query.parent, isCompound, function () {
          return ele.parent();
        })) {
          return false;
        }

        if (!confirmRelations(query.ancestor, isCompound, function () {
          return ele.parents();
        })) {
          return false;
        }

        if (!confirmRelations(query.child, isCompound, function () {
          return ele.children();
        })) {
          return false;
        }

        if (!confirmRelations(query.descendant, isCompound, function () {
          return ele.descendants();
        })) {
          return false;
        }

        if (!confirmRelations(query.source, true, getSource)) {
          return false;
        }

        if (!confirmRelations(query.target, true, getTarget)) {
          return false;
        }

        if (query.connectedNodes) {
          var q0 = query.connectedNodes[0];
          var q1 = query.connectedNodes[1];

          if (confirmRelations(q0, true, getSource) && confirmRelations(q1, true, getTarget)) {
            // match
          } else if (confirmRelations(q0, true, getTarget) && confirmRelations(q1, true, getSource)) {
            // match
          } else {
            return false;
          }
        }

        // we've reached the end, so we've matched everything for this query
        return true;
      }; // queryMatches

      // filter an existing collection
      var filter = function filter(collection) {
        var self = this;
        var cy = collection.cy();

        // don't bother trying if it's invalid
        if (self.invalid()) {
          return cy.collection();
        }

        // for 1 id #foo queries, just get the element
        if (self.length === 1 && self[0].length === 1 && self[0].ids.length === 1) {
          return collection.getElementById(self[0].ids[0]).collection();
        }

        var selectorFunction = function selectorFunction(element) {
          for (var j = 0; j < self.length; j++) {
            var query = self[j];

            if (queryMatches(query, element)) {
              return true;
            }
          }

          return false;
        };

        if (self.text() == null) {
          selectorFunction = function selectorFunction() {
            return true;
          };
        }

        var filteredCollection = collection.filter(selectorFunction);

        return filteredCollection;
      }; // filter

      // does selector match a single element?
      var matches = function matches(ele) {
        var self = this;

        // don't bother trying if it's invalid
        if (self.invalid()) {
          return false;
        }

        for (var j = 0; j < self.length; j++) {
          var query = self[j];

          if (queryMatches(query, ele)) {
            return true;
          }
        }

        return false;
      }; // filter

      module.exports = { matches: matches, filter: filter };

      /***/
    },
    /* 53 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Set = __webpack_require__(8);

      var elesfn = {
        parent: function parent(selector) {
          var parents = [];

          // optimisation for single ele call
          if (this.length === 1) {
            var parent = this[0]._private.parent;

            if (parent) {
              return parent;
            }
          }

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var _parent = ele._private.parent;

            if (_parent) {
              parents.push(_parent);
            }
          }

          return this.spawn(parents, { unique: true }).filter(selector);
        },

        parents: function parents(selector) {
          var parents = [];

          var eles = this.parent();
          while (eles.nonempty()) {
            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              parents.push(ele);
            }

            eles = eles.parent();
          }

          return this.spawn(parents, { unique: true }).filter(selector);
        },

        commonAncestors: function commonAncestors(selector) {
          var ancestors = void 0;

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var parents = ele.parents();

            ancestors = ancestors || parents;

            ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
          }

          return ancestors.filter(selector);
        },

        orphans: function orphans(selector) {
          return this.stdFilter(function (ele) {
            return ele.isOrphan();
          }).filter(selector);
        },

        nonorphans: function nonorphans(selector) {
          return this.stdFilter(function (ele) {
            return ele.isChild();
          }).filter(selector);
        },

        children: function children(selector) {
          var children = [];

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            children = children.concat(ele._private.children);
          }

          return this.spawn(children, { unique: true }).filter(selector);
        },

        siblings: function siblings(selector) {
          return this.parent().children().not(this).filter(selector);
        },

        isParent: function isParent() {
          var ele = this[0];

          if (ele) {
            return ele.isNode() && ele._private.children.length !== 0;
          }
        },

        isChildless: function isChildless() {
          var ele = this[0];

          if (ele) {
            return ele.isNode() && ele._private.children.length === 0;
          }
        },

        isChild: function isChild() {
          var ele = this[0];

          if (ele) {
            return ele.isNode() && ele._private.parent != null;
          }
        },

        isOrphan: function isOrphan() {
          var ele = this[0];

          if (ele) {
            return ele.isNode() && ele._private.parent == null;
          }
        },

        descendants: function descendants(selector) {
          var elements = [];

          function add(eles) {
            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];

              elements.push(ele);

              if (ele.children().nonempty()) {
                add(ele.children());
              }
            }
          }

          add(this.children());

          return this.spawn(elements, { unique: true }).filter(selector);
        }
      };

      function forEachCompound(eles, fn, includeSelf, recursiveStep) {
        var q = [];
        var did = new Set();
        var cy = eles.cy();
        var hasCompounds = cy.hasCompoundNodes();

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (includeSelf) {
            q.push(ele);
          } else if (hasCompounds) {
            recursiveStep(q, did, ele);
          }
        }

        while (q.length > 0) {
          var _ele = q.shift();

          fn(_ele);

          did.add(_ele.id());

          if (hasCompounds) {
            recursiveStep(q, did, _ele);
          }
        }

        return eles;
      }

      function addChildren(q, did, ele) {
        if (ele.isParent()) {
          var children = ele._private.children;

          for (var i = 0; i < children.length; i++) {
            var child = children[i];

            if (!did.has(child.id())) {
              q.push(child);
            }
          }
        }
      }

      // very efficient version of eles.add( eles.descendants() ).forEach()
      // for internal use
      elesfn.forEachDown = function (fn) {
        var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        return forEachCompound(this, fn, includeSelf, addChildren);
      };

      function addParent(q, did, ele) {
        if (ele.isChild()) {
          var parent = ele._private.parent;

          if (!did.has(parent.id())) {
            q.push(parent);
          }
        }
      }

      elesfn.forEachUp = function (fn) {
        var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        return forEachCompound(this, fn, includeSelf, addParent);
      };

      function addParentAndChildren(q, did, ele) {
        addParent(q, did, ele);
        addChildren(q, did, ele);
      }

      elesfn.forEachUpAndDown = function (fn) {
        var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        return forEachCompound(this, fn, includeSelf, addParentAndChildren);
      };

      // aliases
      elesfn.ancestors = elesfn.parents;

      module.exports = elesfn;

      /***/
    },
    /* 54 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var define = __webpack_require__(4);
      var fn = void 0,
          elesfn = void 0;

      fn = elesfn = {

        data: define.data({
          field: 'data',
          bindingEvent: 'data',
          allowBinding: true,
          allowSetting: true,
          settingEvent: 'data',
          settingTriggersEvent: true,
          triggerFnName: 'trigger',
          allowGetting: true,
          immutableKeys: {
            'id': true,
            'source': true,
            'target': true,
            'parent': true
          },
          updateStyle: true
        }),

        removeData: define.removeData({
          field: 'data',
          event: 'data',
          triggerFnName: 'trigger',
          triggerEvent: true,
          immutableKeys: {
            'id': true,
            'source': true,
            'target': true,
            'parent': true
          },
          updateStyle: true
        }),

        scratch: define.data({
          field: 'scratch',
          bindingEvent: 'scratch',
          allowBinding: true,
          allowSetting: true,
          settingEvent: 'scratch',
          settingTriggersEvent: true,
          triggerFnName: 'trigger',
          allowGetting: true,
          updateStyle: true
        }),

        removeScratch: define.removeData({
          field: 'scratch',
          event: 'scratch',
          triggerFnName: 'trigger',
          triggerEvent: true,
          updateStyle: true
        }),

        rscratch: define.data({
          field: 'rscratch',
          allowBinding: false,
          allowSetting: true,
          settingTriggersEvent: false,
          allowGetting: true
        }),

        removeRscratch: define.removeData({
          field: 'rscratch',
          triggerEvent: false
        }),

        id: function id() {
          var ele = this[0];

          if (ele) {
            return ele._private.data.id;
          }
        }

      };

      // aliases
      fn.attr = fn.data;
      fn.removeAttr = fn.removeData;

      module.exports = elesfn;

      /***/
    },
    /* 55 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var elesfn = {};

      function defineDegreeFunction(callback) {
        return function (includeLoops) {
          var self = this;

          if (includeLoops === undefined) {
            includeLoops = true;
          }

          if (self.length === 0) {
            return;
          }

          if (self.isNode() && !self.removed()) {
            var degree = 0;
            var node = self[0];
            var connectedEdges = node._private.edges;

            for (var i = 0; i < connectedEdges.length; i++) {
              var edge = connectedEdges[i];

              if (!includeLoops && edge.isLoop()) {
                continue;
              }

              degree += callback(node, edge);
            }

            return degree;
          } else {
            return;
          }
        };
      }

      util.extend(elesfn, {
        degree: defineDegreeFunction(function (node, edge) {
          if (edge.source().same(edge.target())) {
            return 2;
          } else {
            return 1;
          }
        }),

        indegree: defineDegreeFunction(function (node, edge) {
          if (edge.target().same(node)) {
            return 1;
          } else {
            return 0;
          }
        }),

        outdegree: defineDegreeFunction(function (node, edge) {
          if (edge.source().same(node)) {
            return 1;
          } else {
            return 0;
          }
        })
      });

      function defineDegreeBoundsFunction(degreeFn, callback) {
        return function (includeLoops) {
          var ret = void 0;
          var nodes = this.nodes();

          for (var i = 0; i < nodes.length; i++) {
            var ele = nodes[i];
            var degree = ele[degreeFn](includeLoops);
            if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
              ret = degree;
            }
          }

          return ret;
        };
      }

      util.extend(elesfn, {
        minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
          return degree < min;
        }),

        maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
          return degree > max;
        }),

        minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
          return degree < min;
        }),

        maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
          return degree > max;
        }),

        minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
          return degree < min;
        }),

        maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
          return degree > max;
        })
      });

      util.extend(elesfn, {
        totalDegree: function totalDegree(includeLoops) {
          var total = 0;
          var nodes = this.nodes();

          for (var i = 0; i < nodes.length; i++) {
            total += nodes[i].degree(includeLoops);
          }

          return total;
        }
      });

      module.exports = elesfn;

      /***/
    },
    /* 56 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var position = __webpack_require__(57);
      var bounds = __webpack_require__(58);
      var widthHeight = __webpack_require__(59);
      var edgePoints = __webpack_require__(60);

      module.exports = util.assign({}, position, bounds, widthHeight, edgePoints);

      /***/
    },
    /* 57 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var define = __webpack_require__(4);
      var is = __webpack_require__(0);
      var math = __webpack_require__(2);
      var fn = void 0,
          elesfn = void 0;

      var beforePositionSet = function beforePositionSet(eles, newPos) {
        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (ele.isParent() && !ele.locked()) {
            var oldPos = ele._private.position;
            var delta = {
              x: newPos.x - oldPos.x,
              y: newPos.y - oldPos.y
            };

            eles.children().shift(delta);
          }
        }
      };

      fn = elesfn = {

        position: define.data({
          field: 'position',
          bindingEvent: 'position',
          allowBinding: true,
          allowSetting: true,
          settingEvent: 'position',
          settingTriggersEvent: true,
          triggerFnName: 'emitAndNotify',
          allowGetting: true,
          validKeys: ['x', 'y'],
          beforeGet: function beforeGet(ele) {
            ele.updateCompoundBounds();
          },
          beforeSet: beforePositionSet,
          onSet: function onSet(eles) {
            eles.dirtyCompoundBoundsCache();
          },
          canSet: function canSet(ele) {
            return !ele.locked();
          }
        }),

        // position but no notification to renderer
        silentPosition: define.data({
          field: 'position',
          bindingEvent: 'position',
          allowBinding: false,
          allowSetting: true,
          settingEvent: 'position',
          settingTriggersEvent: false,
          triggerFnName: 'trigger',
          allowGetting: false,
          validKeys: ['x', 'y'],
          beforeSet: beforePositionSet,
          onSet: function onSet(eles) {
            eles.dirtyCompoundBoundsCache();
          },
          canSet: function canSet(ele) {
            return !ele.locked();
          }
        }),

        positions: function positions(pos, silent) {
          if (is.plainObject(pos)) {
            if (silent) {
              this.silentPosition(pos);
            } else {
              this.position(pos);
            }
          } else if (is.fn(pos)) {
            var _fn = pos;
            var cy = this.cy();

            cy.startBatch();

            for (var i = 0; i < this.length; i++) {
              var ele = this[i];
              var _pos = void 0;

              if (_pos = _fn(ele, i)) {
                if (silent) {
                  ele.silentPosition(_pos);
                } else {
                  ele.position(_pos);
                }
              }
            }

            cy.endBatch();
          }

          return this; // chaining
        },

        silentPositions: function silentPositions(pos) {
          return this.positions(pos, true);
        },

        shift: function shift(dim, val) {
          var delta = void 0;

          if (is.plainObject(dim)) {
            delta = dim;
          } else if (is.string(dim) && is.number(val)) {
            delta = { x: 0, y: 0 };

            delta[dim] = val;
          }

          if (delta != null) {
            for (var i = 0; i < this.length; i++) {
              var ele = this[i];
              var pos = ele.position();

              ele.position({
                x: pos.x + delta.x,
                y: pos.y + delta.y
              });
            }
          }

          return this;
        },

        // get/set the rendered (i.e. on screen) positon of the element
        renderedPosition: function renderedPosition(dim, val) {
          var ele = this[0];
          var cy = this.cy();
          var zoom = cy.zoom();
          var pan = cy.pan();
          var rpos = is.plainObject(dim) ? dim : undefined;
          var setting = rpos !== undefined || val !== undefined && is.string(dim);

          if (ele && ele.isNode()) {
            // must have an element and must be a node to return position
            if (setting) {
              for (var i = 0; i < this.length; i++) {
                var _ele = this[i];

                if (val !== undefined) {
                  // set one dimension
                  _ele.position(dim, (val - pan[dim]) / zoom);
                } else if (rpos !== undefined) {
                  // set whole position
                  _ele.position(math.renderedToModelPosition(rpos, zoom, pan));
                }
              }
            } else {
              // getting
              var pos = ele.position();
              rpos = math.modelToRenderedPosition(pos, zoom, pan);

              if (dim === undefined) {
                // then return the whole rendered position
                return rpos;
              } else {
                // then return the specified dimension
                return rpos[dim];
              }
            }
          } else if (!setting) {
            return undefined; // for empty collection case
          }

          return this; // chaining
        },

        // get/set the position relative to the parent
        relativePosition: function relativePosition(dim, val) {
          var ele = this[0];
          var cy = this.cy();
          var ppos = is.plainObject(dim) ? dim : undefined;
          var setting = ppos !== undefined || val !== undefined && is.string(dim);
          var hasCompoundNodes = cy.hasCompoundNodes();

          if (ele && ele.isNode()) {
            // must have an element and must be a node to return position
            if (setting) {
              for (var i = 0; i < this.length; i++) {
                var _ele2 = this[i];
                var parent = hasCompoundNodes ? _ele2.parent() : null;
                var hasParent = parent && parent.length > 0;
                var relativeToParent = hasParent;

                if (hasParent) {
                  parent = parent[0];
                }

                var origin = relativeToParent ? parent.position() : { x: 0, y: 0 };

                if (val !== undefined) {
                  // set one dimension
                  _ele2.position(dim, val + origin[dim]);
                } else if (ppos !== undefined) {
                  // set whole position
                  _ele2.position({
                    x: ppos.x + origin.x,
                    y: ppos.y + origin.y
                  });
                }
              }
            } else {
              // getting
              var pos = ele.position();
              var _parent = hasCompoundNodes ? ele.parent() : null;
              var _hasParent = _parent && _parent.length > 0;
              var _relativeToParent = _hasParent;

              if (_hasParent) {
                _parent = _parent[0];
              }

              var _origin = _relativeToParent ? _parent.position() : { x: 0, y: 0 };

              ppos = {
                x: pos.x - _origin.x,
                y: pos.y - _origin.y
              };

              if (dim === undefined) {
                // then return the whole rendered position
                return ppos;
              } else {
                // then return the specified dimension
                return ppos[dim];
              }
            }
          } else if (!setting) {
            return undefined; // for empty collection case
          }

          return this; // chaining
        }
      };

      // aliases
      fn.modelPosition = fn.point = fn.position;
      fn.modelPositions = fn.points = fn.positions;
      fn.renderedPoint = fn.renderedPosition;
      fn.relativePoint = fn.relativePosition;

      module.exports = elesfn;

      /***/
    },
    /* 58 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var math = __webpack_require__(2);
      var fn = void 0,
          elesfn = void 0;

      fn = elesfn = {};

      elesfn.renderedBoundingBox = function (options) {
        var bb = this.boundingBox(options);
        var cy = this.cy();
        var zoom = cy.zoom();
        var pan = cy.pan();

        var x1 = bb.x1 * zoom + pan.x;
        var x2 = bb.x2 * zoom + pan.x;
        var y1 = bb.y1 * zoom + pan.y;
        var y2 = bb.y2 * zoom + pan.y;

        return {
          x1: x1,
          x2: x2,
          y1: y1,
          y2: y2,
          w: x2 - x1,
          h: y2 - y1
        };
      };

      elesfn.dirtyCompoundBoundsCache = function () {
        var cy = this.cy();

        if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
          return this;
        }

        this.forEachUp(function (ele) {
          ele._private.compoundBoundsClean = false;

          if (ele.isParent()) {
            ele.emit('bounds');
          }
        });

        return this;
      };

      elesfn.updateCompoundBounds = function () {
        var cy = this.cy();

        // save cycles for non compound graphs or when style disabled
        if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
          return this;
        }

        // save cycles when batching -- but bounds will be stale (or not exist yet)
        if (cy.batching()) {
          return this;
        }

        var updated = [];

        function update(parent) {
          if (!parent.isParent()) {
            return;
          }

          var _p = parent._private;
          var children = parent.children();
          var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';

          var min = {
            width: {
              val: parent.pstyle('min-width').pfValue,
              left: parent.pstyle('min-width-bias-left'),
              right: parent.pstyle('min-width-bias-right')
            },
            height: {
              val: parent.pstyle('min-height').pfValue,
              top: parent.pstyle('min-height-bias-top'),
              bottom: parent.pstyle('min-height-bias-bottom')
            }
          };

          var bb = children.boundingBox({
            includeLabels: includeLabels,
            includeOverlays: false,

            // updating the compound bounds happens outside of the regular
            // cache cycle (i.e. before fired events)
            useCache: false
          });
          var pos = _p.position;

          // if children take up zero area then keep position and fall back on stylesheet w/h
          if (bb.w === 0 || bb.h === 0) {
            bb = {
              w: parent.pstyle('width').pfValue,
              h: parent.pstyle('height').pfValue
            };

            bb.x1 = pos.x - bb.w / 2;
            bb.x2 = pos.x + bb.w / 2;
            bb.y1 = pos.y - bb.h / 2;
            bb.y2 = pos.y + bb.h / 2;
          }

          function computeBiasValues(propDiff, propBias, propBiasComplement) {
            var biasDiff = 0;
            var biasComplementDiff = 0;
            var biasTotal = propBias + propBiasComplement;

            if (propDiff > 0 && biasTotal > 0) {
              biasDiff = propBias / biasTotal * propDiff;
              biasComplementDiff = propBiasComplement / biasTotal * propDiff;
            }
            return {
              biasDiff: biasDiff,
              biasComplementDiff: biasComplementDiff
            };
          }

          function computePaddingValues(width, height, paddingObject, relativeTo) {
            // Assuming percentage is number from 0 to 1
            if (paddingObject.units === '%') {
              switch (relativeTo) {
                case 'width':
                  return width > 0 ? paddingObject.pfValue * width : 0;
                case 'height':
                  return height > 0 ? paddingObject.pfValue * height : 0;
                case 'average':
                  return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;
                case 'min':
                  return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;
                case 'max':
                  return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;
                default:
                  return 0;
              }
            } else if (paddingObject.units === 'px') {
              return paddingObject.pfValue;
            } else {
              return 0;
            }
          }

          var leftVal = min.width.left.value;
          if (min.width.left.units === 'px' && min.width.val > 0) {
            leftVal = leftVal * 100 / min.width.val;
          }
          var rightVal = min.width.right.value;
          if (min.width.right.units === 'px' && min.width.val > 0) {
            rightVal = rightVal * 100 / min.width.val;
          }

          var topVal = min.height.top.value;
          if (min.height.top.units === 'px' && min.height.val > 0) {
            topVal = topVal * 100 / min.height.val;
          }

          var bottomVal = min.height.bottom.value;
          if (min.height.bottom.units === 'px' && min.height.val > 0) {
            bottomVal = bottomVal * 100 / min.height.val;
          }

          var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
          var diffLeft = widthBiasDiffs.biasDiff;
          var diffRight = widthBiasDiffs.biasComplementDiff;

          var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
          var diffTop = heightBiasDiffs.biasDiff;
          var diffBottom = heightBiasDiffs.biasComplementDiff;

          _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);

          _p.autoWidth = Math.max(bb.w, min.width.val);
          pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;

          _p.autoHeight = Math.max(bb.h, min.height.val);
          pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;

          updated.push(parent);
        }

        for (var i = 0; i < this.length; i++) {
          var ele = this[i];
          var _p = ele._private;

          if (!_p.compoundBoundsClean) {
            update(ele);

            if (!cy._private.batchingStyle) {
              _p.compoundBoundsClean = true;
            }
          }
        }

        return this;
      };

      var noninf = function noninf(x) {
        if (x === Infinity || x === -Infinity) {
          return 0;
        }

        return x;
      };

      var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
        // don't update with zero area boxes
        if (x2 - x1 === 0 || y2 - y1 === 0) {
          return;
        }

        // don't update with null dim
        if (x1 == null || y1 == null || x2 == null || y2 == null) {
          return;
        }

        b.x1 = x1 < b.x1 ? x1 : b.x1;
        b.x2 = x2 > b.x2 ? x2 : b.x2;
        b.y1 = y1 < b.y1 ? y1 : b.y1;
        b.y2 = y2 > b.y2 ? y2 : b.y2;
      };

      var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
        return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
      };

      var prefixedProperty = function prefixedProperty(obj, field, prefix) {
        return util.getPrefixedProperty(obj, field, prefix);
      };

      var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
        if (ele.cy().headless()) {
          return;
        }

        var _p = ele._private;
        var rstyle = _p.rstyle;
        var halfArW = rstyle.arrowWidth / 2;
        var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
        var x = void 0;
        var y = void 0;

        if (arrowType !== 'none') {
          if (prefix === 'source') {
            x = rstyle.srcX;
            y = rstyle.srcY;
          } else if (prefix === 'target') {
            x = rstyle.tgtX;
            y = rstyle.tgtY;
          } else {
            x = rstyle.midX;
            y = rstyle.midY;
          }

          updateBounds(bounds, x - halfArW, y - halfArW, x + halfArW, y + halfArW);
        }
      };

      var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
        if (ele.cy().headless()) {
          return;
        }

        var prefixDash = void 0;

        if (prefix) {
          prefixDash = prefix + '-';
        } else {
          prefixDash = '';
        }

        var _p = ele._private;
        var rstyle = _p.rstyle;
        var label = ele.pstyle(prefixDash + 'label').strValue;

        if (label) {
          var halign = ele.pstyle('text-halign');
          var valign = ele.pstyle('text-valign');
          var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
          var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
          var labelX = prefixedProperty(rstyle, 'labelX', prefix);
          var labelY = prefixedProperty(rstyle, 'labelY', prefix);
          var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
          var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
          var isEdge = ele.isEdge();
          var rotation = ele.pstyle(prefixDash + 'text-rotation');
          var outlineWidth = ele.pstyle('text-outline-width').pfValue;
          var borderWidth = ele.pstyle('text-border-width').pfValue;
          var halfBorderWidth = borderWidth / 2;
          var padding = ele.pstyle('text-background-padding').pfValue;

          var lh = labelHeight + 2 * padding;
          var lw = labelWidth + 2 * padding;
          var lw_2 = lw / 2;
          var lh_2 = lh / 2;
          var lx1 = void 0,
              lx2 = void 0,
              ly1 = void 0,
              ly2 = void 0;

          if (isEdge) {
            lx1 = labelX - lw_2;
            lx2 = labelX + lw_2;
            ly1 = labelY - lh_2;
            ly2 = labelY + lh_2;
          } else {
            switch (halign.value) {
              case 'left':
                lx1 = labelX - lw;
                lx2 = labelX;
                break;

              case 'center':
                lx1 = labelX - lw_2;
                lx2 = labelX + lw_2;
                break;

              case 'right':
                lx1 = labelX;
                lx2 = labelX + lw;
                break;
            }

            switch (valign.value) {
              case 'top':
                ly1 = labelY - lh;
                ly2 = labelY;
                break;

              case 'center':
                ly1 = labelY - lh_2;
                ly2 = labelY + lh_2;
                break;

              case 'bottom':
                ly1 = labelY;
                ly2 = labelY + lh;
                break;
            }
          }

          var isAutorotate = isEdge && rotation.strValue === 'autorotate';
          var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

          if (isAutorotate || isPfValue) {
            var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
            var cos = Math.cos(theta);
            var sin = Math.sin(theta);

            var rotate = function rotate(x, y) {
              x = x - labelX;
              y = y - labelY;

              return {
                x: x * cos - y * sin + labelX,
                y: x * sin + y * cos + labelY
              };
            };

            var px1y1 = rotate(lx1, ly1);
            var px1y2 = rotate(lx1, ly2);
            var px2y1 = rotate(lx2, ly1);
            var px2y2 = rotate(lx2, ly2);

            lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
            lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
            ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
            ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
          }

          lx1 += marginX - Math.max(outlineWidth, halfBorderWidth);
          lx2 += marginX + Math.max(outlineWidth, halfBorderWidth);
          ly1 += marginY - Math.max(outlineWidth, halfBorderWidth);
          ly2 += marginY + Math.max(outlineWidth, halfBorderWidth);

          updateBounds(bounds, lx1, ly1, lx2, ly2);
        }

        return bounds;
      };

      // get the bounding box of the elements (in raw model position)
      var boundingBoxImpl = function boundingBoxImpl(ele, options) {
        var cy = ele._private.cy;
        var styleEnabled = cy.styleEnabled();
        var headless = cy.headless();

        var bounds = {
          x1: Infinity,
          y1: Infinity,
          x2: -Infinity,
          y2: -Infinity
        };

        var _p = ele._private;
        var display = styleEnabled ? ele.pstyle('display').value : 'element';
        var isNode = ele.isNode();
        var isEdge = ele.isEdge();
        var ex1 = void 0,
            ex2 = void 0,
            ey1 = void 0,
            ey2 = void 0; // extrema of body / lines
        var x = void 0,
            y = void 0; // node pos
        var displayed = display !== 'none';

        if (displayed) {
          var overlayOpacity = 0;
          var overlayPadding = 0;

          if (styleEnabled && options.includeOverlays) {
            overlayOpacity = ele.pstyle('overlay-opacity').value;

            if (overlayOpacity !== 0) {
              overlayPadding = ele.pstyle('overlay-padding').value;
            }
          }

          var w = 0;
          var wHalf = 0;

          if (styleEnabled) {
            w = ele.pstyle('width').pfValue;
            wHalf = w / 2;
          }

          if (isNode && options.includeNodes) {
            var pos = ele.position();
            x = pos.x;
            y = pos.y;
            var _w = ele.outerWidth();
            var halfW = _w / 2;
            var h = ele.outerHeight();
            var halfH = h / 2;

            // handle node dimensions
            /////////////////////////

            ex1 = x - halfW - overlayPadding;
            ex2 = x + halfW + overlayPadding;
            ey1 = y - halfH - overlayPadding;
            ey2 = y + halfH + overlayPadding;

            updateBounds(bounds, ex1, ey1, ex2, ey2);
          } else if (isEdge && options.includeEdges) {
            var rstyle = _p.rstyle || {};

            // handle edge dimensions (rough box estimate)
            //////////////////////////////////////////////
            if (styleEnabled && !headless) {
              ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
              ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
              ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
              ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY);

              // take into account edge width
              ex1 -= wHalf;
              ex2 += wHalf;
              ey1 -= wHalf;
              ey2 += wHalf;

              updateBounds(bounds, ex1, ey1, ex2, ey2);
            }

            // precise haystacks
            ////////////////////
            if (styleEnabled && !headless && ele.pstyle('curve-style').strValue === 'haystack') {
              var hpts = rstyle.haystackPts || [];

              ex1 = hpts[0].x;
              ey1 = hpts[0].y;
              ex2 = hpts[1].x;
              ey2 = hpts[1].y;

              if (ex1 > ex2) {
                var temp = ex1;
                ex1 = ex2;
                ex2 = temp;
              }

              if (ey1 > ey2) {
                var _temp = ey1;
                ey1 = ey2;
                ey2 = _temp;
              }

              updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);

              // handle points along edge
              ///////////////////////////
            } else {
              var pts = rstyle.bezierPts || rstyle.linePts || [];

              for (var j = 0; j < pts.length; j++) {
                var pt = pts[j];

                ex1 = pt.x - wHalf;
                ex2 = pt.x + wHalf;
                ey1 = pt.y - wHalf;
                ey2 = pt.y + wHalf;

                updateBounds(bounds, ex1, ey1, ex2, ey2);
              }

              // fallback on source and target positions
              //////////////////////////////////////////
              if (pts.length === 0) {
                var n1 = ele.source();
                var n1pos = n1.position();

                var n2 = ele.target();
                var n2pos = n2.position();

                ex1 = n1pos.x;
                ex2 = n2pos.x;
                ey1 = n1pos.y;
                ey2 = n2pos.y;

                if (ex1 > ex2) {
                  var _temp2 = ex1;
                  ex1 = ex2;
                  ex2 = _temp2;
                }

                if (ey1 > ey2) {
                  var _temp3 = ey1;
                  ey1 = ey2;
                  ey2 = _temp3;
                }

                // take into account edge width
                ex1 -= wHalf;
                ex2 += wHalf;
                ey1 -= wHalf;
                ey2 += wHalf;

                updateBounds(bounds, ex1, ey1, ex2, ey2);
              }
            }
          } // edges


          // handle edge arrow size
          /////////////////////////

          if (styleEnabled && options.includeEdges && isEdge) {
            updateBoundsFromArrow(bounds, ele, 'mid-source', options);
            updateBoundsFromArrow(bounds, ele, 'mid-target', options);
            updateBoundsFromArrow(bounds, ele, 'source', options);
            updateBoundsFromArrow(bounds, ele, 'target', options);
          }

          // ghost
          ////////

          if (styleEnabled) {
            var ghost = ele.pstyle('ghost').value === 'yes';

            if (ghost) {
              var gx = ele.pstyle('ghost-offset-x').pfValue;
              var gy = ele.pstyle('ghost-offset-y').pfValue;

              updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
            }
          }

          // overlay
          //////////

          if (styleEnabled) {

            ex1 = bounds.x1;
            ex2 = bounds.x2;
            ey1 = bounds.y1;
            ey2 = bounds.y2;

            updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
          }

          // handle label dimensions
          //////////////////////////

          if (styleEnabled && options.includeLabels) {
            updateBoundsFromLabel(bounds, ele, null, options);

            if (isEdge) {
              updateBoundsFromLabel(bounds, ele, 'source', options);
              updateBoundsFromLabel(bounds, ele, 'target', options);
            }
          } // style enabled for labels
        } // if displayed

        bounds.x1 = noninf(bounds.x1);
        bounds.y1 = noninf(bounds.y1);
        bounds.x2 = noninf(bounds.x2);
        bounds.y2 = noninf(bounds.y2);
        bounds.w = noninf(bounds.x2 - bounds.x1);
        bounds.h = noninf(bounds.y2 - bounds.y1);

        // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides
        if (bounds.w > 0 && bounds.h > 0 && displayed) {
          math.expandBoundingBox(bounds, 1);
        }

        return bounds;
      };

      var tf = function tf(val) {
        if (val) {
          return 't';
        } else {
          return 'f';
        }
      };

      var getKey = function getKey(opts) {
        var key = '';

        key += tf(opts.incudeNodes);
        key += tf(opts.includeEdges);
        key += tf(opts.includeLabels);
        key += tf(opts.includeOverlays);

        return key;
      };

      var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
        var _p = ele._private;
        var bb = void 0;
        var headless = ele.cy().headless();
        var key = opts === defBbOpts ? defBbOptsKey : getKey(opts);

        if (!opts.useCache || headless || !_p.bbCache || !_p.bbCache[key]) {
          bb = boundingBoxImpl(ele, opts);

          if (!headless) {
            _p.bbCache = _p.bbCache || {};
            _p.bbCache[key] = bb;
          }
        } else {
          bb = _p.bbCache[key];
        }

        return bb;
      };

      var defBbOpts = {
        includeNodes: true,
        includeEdges: true,
        includeLabels: true,
        includeOverlays: true,
        useCache: true
      };

      var defBbOptsKey = getKey(defBbOpts);

      function filledBbOpts(options) {
        return {
          includeNodes: util.default(options.includeNodes, defBbOpts.includeNodes),
          includeEdges: util.default(options.includeEdges, defBbOpts.includeEdges),
          includeLabels: util.default(options.includeLabels, defBbOpts.includeLabels),
          includeOverlays: util.default(options.includeOverlays, defBbOpts.includeOverlays),
          useCache: util.default(options.useCache, defBbOpts.useCache)
        };
      }

      elesfn.boundingBox = function (options) {
        // the main usecase is ele.boundingBox() for a single element with no/def options
        // specified s.t. the cache is used, so check for this case to make it faster by
        // avoiding the overhead of the rest of the function
        if (this.length === 1 && this[0]._private.bbCache && (options === undefined || options.useCache === undefined || options.useCache === true)) {
          if (options === undefined) {
            options = defBbOpts;
          } else {
            options = filledBbOpts(options);
          }

          return cachedBoundingBoxImpl(this[0], options);
        }

        var bounds = {
          x1: Infinity,
          y1: Infinity,
          x2: -Infinity,
          y2: -Infinity
        };

        options = options || util.staticEmptyObject();

        var opts = filledBbOpts(options);

        var eles = this;
        var cy = eles.cy();
        var styleEnabled = cy.styleEnabled();

        if (styleEnabled) {
          this.recalculateRenderedStyle(opts.useCache);
        }

        this.updateCompoundBounds();

        var updatedEdge = {}; // use to avoid duplicated edge updates

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (styleEnabled && ele.isEdge() && ele.pstyle('curve-style').strValue === 'bezier' && !updatedEdge[ele.id()]) {
            var edges = ele.parallelEdges();

            for (var j = 0; j < edges.length; j++) {
              // make all as updated
              updatedEdge[edges[j].id()] = true;
            }

            edges.recalculateRenderedStyle(opts.useCache); // n.b. ele.parallelEdges() single is cached
          }

          updateBoundsFromBox(bounds, cachedBoundingBoxImpl(ele, opts));
        }

        bounds.x1 = noninf(bounds.x1);
        bounds.y1 = noninf(bounds.y1);
        bounds.x2 = noninf(bounds.x2);
        bounds.y2 = noninf(bounds.y2);
        bounds.w = noninf(bounds.x2 - bounds.x1);
        bounds.h = noninf(bounds.y2 - bounds.y1);

        return bounds;
      };

      // private helper to get bounding box for custom node positions
      // - good for perf in certain cases but currently requires dirtying the rendered style
      // - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
      // - try to use for only things like discrete layouts where the node position would change anyway
      elesfn.boundingBoxAt = function (fn) {
        var nodes = this.nodes();

        if (is.plainObject(fn)) {
          var obj = fn;

          fn = function fn() {
            return obj;
          };
        }

        // save the current position and set the new one, per node
        for (var i = 0; i < nodes.length; i++) {
          var n = nodes[i];
          var _p = n._private;
          var pos = _p.position;
          var newPos = fn.call(n, n, i);

          _p.bbAtOldPos = { x: pos.x, y: pos.y };

          if (newPos) {
            pos.x = newPos.x;
            pos.y = newPos.y;
          }
        }

        this.emit('dirty'); // let the renderer know we've manually dirtied rendered dim calcs

        nodes.dirtyCompoundBoundsCache().updateCompoundBounds();

        var bb = this.boundingBox({ useCache: false });

        // restore the original position, per node
        for (var _i = 0; _i < nodes.length; _i++) {
          var _n = nodes[_i];
          var _p2 = _n._private;
          var _pos = _n._private.position;
          var old = _p2.bbAtOldPos;

          _pos.x = old.x;
          _pos.y = old.y;
        }

        nodes.dirtyCompoundBoundsCache();

        this.emit('dirty'); // let the renderer know we've manually dirtied rendered dim calcs

        return bb;
      };

      fn.boundingbox = fn.boundingBox;
      fn.renderedBoundingbox = fn.renderedBoundingBox;

      module.exports = elesfn;

      /***/
    },
    /* 59 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var fn = void 0,
          elesfn = void 0;

      fn = elesfn = {};

      var defineDimFns = function defineDimFns(opts) {
        opts.uppercaseName = util.capitalize(opts.name);
        opts.autoName = 'auto' + opts.uppercaseName;
        opts.labelName = 'label' + opts.uppercaseName;
        opts.outerName = 'outer' + opts.uppercaseName;
        opts.uppercaseOuterName = util.capitalize(opts.outerName);

        fn[opts.name] = function dimImpl() {
          var ele = this[0];
          var _p = ele._private;
          var cy = _p.cy;
          var styleEnabled = cy._private.styleEnabled;

          if (ele) {
            if (styleEnabled) {
              if (ele.isParent()) {
                ele.updateCompoundBounds();

                return _p[opts.autoName] || 0;
              }

              var d = ele.pstyle(opts.name);

              switch (d.strValue) {
                case 'label':
                  ele.recalculateRenderedStyle();

                  return _p.rstyle[opts.labelName] || 0;

                default:
                  return d.pfValue;
              }
            } else {
              return 1;
            }
          }
        };

        fn['outer' + opts.uppercaseName] = function outerDimImpl() {
          var ele = this[0];
          var _p = ele._private;
          var cy = _p.cy;
          var styleEnabled = cy._private.styleEnabled;

          if (ele) {
            if (styleEnabled) {
              var dim = ele[opts.name]();
              var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side
              var padding = 2 * ele.padding();

              return dim + border + padding;
            } else {
              return 1;
            }
          }
        };

        fn['rendered' + opts.uppercaseName] = function renderedDimImpl() {
          var ele = this[0];

          if (ele) {
            var d = ele[opts.name]();
            return d * this.cy().zoom();
          }
        };

        fn['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
          var ele = this[0];

          if (ele) {
            var od = ele[opts.outerName]();
            return od * this.cy().zoom();
          }
        };
      };

      defineDimFns({
        name: 'width'
      });

      defineDimFns({
        name: 'height'
      });

      elesfn.padding = function () {
        var ele = this[0];
        var _p = ele._private;
        if (ele.isParent()) {
          ele.updateCompoundBounds();

          if (_p.autoPadding !== undefined) {
            return _p.autoPadding;
          } else {
            return ele.pstyle('padding').pfValue;
          }
        } else {
          return ele.pstyle('padding').pfValue;
        }
      };

      module.exports = elesfn;

      /***/
    },
    /* 60 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var ifEdge = function ifEdge(self, then) {
        if (self.isEdge()) {
          return then(self.renderer());
        }
      };

      module.exports = {
        controlPoints: function controlPoints() {
          var _this = this;

          return ifEdge(this, function (renderer) {
            return renderer.getControlPoints(_this);
          });
        },
        segmentPoints: function segmentPoints() {
          var _this2 = this;

          return ifEdge(this, function (renderer) {
            return renderer.getSegmentPoints(_this2);
          });
        },
        sourceEndpoint: function sourceEndpoint() {
          var _this3 = this;

          return ifEdge(this, function (renderer) {
            return renderer.getSourceEndpoint(_this3);
          });
        },
        targetEndpoint: function targetEndpoint() {
          var _this4 = this;

          return ifEdge(this, function (renderer) {
            return renderer.getTargetEndpoint(_this4);
          });
        },
        midpoint: function midpoint() {
          var _this5 = this;

          return ifEdge(this, function (renderer) {
            return renderer.getEdgeMidpoint(_this5);
          });
        }
      };

      /***/
    },
    /* 61 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Emitter = __webpack_require__(11);
      var define = __webpack_require__(4);
      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var Selector = __webpack_require__(6);

      var emitterOptions = {
        qualifierCompare: function qualifierCompare(selector1, selector2) {
          if (selector1 == null || selector2 == null) {
            return selector1 == null && selector2 == null;
          } else {
            return selector1.sameText(selector2);
          }
        },
        eventMatches: function eventMatches(ele, listener, eventObj) {
          var selector = listener.qualifier;

          if (selector != null) {
            return ele !== eventObj.target && is.element(eventObj.target) && selector.matches(eventObj.target);
          }

          return true;
        },
        eventFields: function eventFields(ele) {
          return {
            cy: ele.cy(),
            target: ele
          };
        },
        callbackContext: function callbackContext(ele, listener, eventObj) {
          return listener.qualifier != null ? eventObj.target : ele;
        },
        beforeEmit: function beforeEmit(context, listener /*, eventObj*/) {
          if (listener.conf && listener.conf.once) {
            listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
          }
        },
        bubble: function bubble() {
          return true;
        },
        parent: function parent(ele) {
          return ele.isChild() ? ele.parent() : ele.cy();
        }
      };

      var argSelector = function argSelector(arg) {
        if (is.string(arg)) {
          return new Selector(arg);
        } else {
          return arg;
        }
      };

      var elesfn = {
        createEmitter: function createEmitter() {
          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var _p = ele._private;

            if (!_p.emitter) {
              _p.emitter = new Emitter(util.assign({
                context: ele
              }, emitterOptions));
            }
          }

          return this;
        },

        emitter: function emitter() {
          return this._private.emitter;
        },

        on: function on(events, selector, callback) {
          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            ele.emitter().on(events, argSelector(selector), callback);
          }

          return this;
        },

        removeListener: function removeListener(events, selector, callback) {
          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            ele.emitter().removeListener(events, argSelector(selector), callback);
          }

          return this;
        },

        one: function one(events, selector, callback) {
          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            ele.emitter().one(events, argSelector(selector), callback);
          }

          return this;
        },

        once: function once(events, selector, callback) {
          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            ele.emitter().on(events, argSelector(selector), callback, {
              once: true,
              onceCollection: this
            });
          }
        },

        emit: function emit(events, extraParams) {
          for (var i = 0; i < this.length; i++) {
            var ele = this[i];

            ele.emitter().emit(events, extraParams);
          }

          return this;
        },

        emitAndNotify: function emitAndNotify(event, extraParams) {
          // for internal use only
          if (this.length === 0) {
            return;
          } // empty collections don't need to notify anything

          // notify renderer
          this.cy().notify({
            type: event,
            eles: this
          });

          this.emit(event, extraParams);

          return this;
        }
      };

      define.eventAliasesOn(elesfn);

      module.exports = elesfn;

      /***/
    },
    /* 62 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Selector = __webpack_require__(6);

      var elesfn = {
        nodes: function nodes(selector) {
          return this.filter(function (ele) {
            return ele.isNode();
          }).filter(selector);
        },

        edges: function edges(selector) {
          return this.filter(function (ele) {
            return ele.isEdge();
          }).filter(selector);
        },

        filter: function filter(_filter, thisArg) {
          if (_filter === undefined) {
            // check this first b/c it's the most common/performant case
            return this;
          } else if (is.string(_filter) || is.elementOrCollection(_filter)) {
            return new Selector(_filter).filter(this);
          } else if (is.fn(_filter)) {
            var filterEles = this.spawn();
            var eles = this;

            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];
              var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

              if (include) {
                filterEles.merge(ele);
              }
            }

            return filterEles;
          }

          return this.spawn(); // if not handled by above, give 'em an empty collection
        },

        not: function not(toRemove) {
          if (!toRemove) {
            return this;
          } else {

            if (is.string(toRemove)) {
              toRemove = this.filter(toRemove);
            }

            var elements = [];
            var rMap = toRemove._private.map;

            for (var i = 0; i < this.length; i++) {
              var element = this[i];

              var remove = rMap.has(element.id());
              if (!remove) {
                elements.push(element);
              }
            }

            return this.spawn(elements);
          }
        },

        absoluteComplement: function absoluteComplement() {
          var cy = this.cy();

          return cy.mutableElements().not(this);
        },

        intersect: function intersect(other) {
          // if a selector is specified, then filter by it instead
          if (is.string(other)) {
            var selector = other;
            return this.filter(selector);
          }

          var elements = [];
          var col1 = this;
          var col2 = other;
          var col1Smaller = this.length < other.length;
          var map2 = col1Smaller ? col2._private.map : col1._private.map;
          var col = col1Smaller ? col1 : col2;

          for (var i = 0; i < col.length; i++) {
            var id = col[i]._private.data.id;
            var entry = map2.get(id);

            if (entry) {
              elements.push(entry.ele);
            }
          }

          return this.spawn(elements);
        },

        xor: function xor(other) {
          var cy = this._private.cy;

          if (is.string(other)) {
            other = cy.$(other);
          }

          var elements = [];
          var col1 = this;
          var col2 = other;

          var add = function add(col, other) {
            for (var i = 0; i < col.length; i++) {
              var ele = col[i];
              var id = ele._private.data.id;
              var inOther = other.hasElementWithId(id);

              if (!inOther) {
                elements.push(ele);
              }
            }
          };

          add(col1, col2);
          add(col2, col1);

          return this.spawn(elements);
        },

        diff: function diff(other) {
          var cy = this._private.cy;

          if (is.string(other)) {
            other = cy.$(other);
          }

          var left = [];
          var right = [];
          var both = [];
          var col1 = this;
          var col2 = other;

          var add = function add(col, other, retEles) {

            for (var i = 0; i < col.length; i++) {
              var ele = col[i];
              var id = ele._private.data.id;
              var inOther = other.hasElementWithId(id);

              if (inOther) {
                both.push(ele);
              } else {
                retEles.push(ele);
              }
            }
          };

          add(col1, col2, left);
          add(col2, col1, right);

          return {
            left: this.spawn(left, { unique: true }),
            right: this.spawn(right, { unique: true }),
            both: this.spawn(both, { unique: true })
          };
        },

        add: function add(toAdd) {
          var cy = this._private.cy;

          if (!toAdd) {
            return this;
          }

          if (is.string(toAdd)) {
            var selector = toAdd;
            toAdd = cy.mutableElements().filter(selector);
          }

          var elements = [];

          for (var i = 0; i < this.length; i++) {
            elements.push(this[i]);
          }

          var map = this._private.map;

          for (var _i = 0; _i < toAdd.length; _i++) {

            var add = !map.has(toAdd[_i].id());
            if (add) {
              elements.push(toAdd[_i]);
            }
          }

          return this.spawn(elements);
        },

        // in place merge on calling collection
        merge: function merge(toAdd) {
          var _p = this._private;
          var cy = _p.cy;

          if (!toAdd) {
            return this;
          }

          if (toAdd && is.string(toAdd)) {
            var selector = toAdd;
            toAdd = cy.mutableElements().filter(selector);
          }

          var map = _p.map;

          for (var i = 0; i < toAdd.length; i++) {
            var toAddEle = toAdd[i];
            var id = toAddEle._private.data.id;
            var add = !map.has(id);

            if (add) {
              var index = this.length++;

              this[index] = toAddEle;

              map.set(id, { ele: toAddEle, index: index });
            } else {
              // replace
              var _index = map.get(id).index;

              this[_index] = toAddEle;
              map.set(id, { ele: toAddEle, index: _index });
            }
          }

          return this; // chaining
        },

        // remove single ele in place in calling collection
        unmergeOne: function unmergeOne(ele) {
          ele = ele[0];

          var _p = this._private;
          var id = ele._private.data.id;
          var map = _p.map;
          var entry = map.get(id);

          if (!entry) {
            return this; // no need to remove
          }

          var i = entry.index;

          // remove ele
          this[i] = undefined;
          map.delete(id);

          var unmergedLastEle = i === this.length - 1;

          // replace empty spot with last ele in collection
          if (this.length > 1 && !unmergedLastEle) {
            var lastEleI = this.length - 1;
            var lastEle = this[lastEleI];
            var lastEleId = lastEle._private.data.id;

            this[lastEleI] = undefined;
            this[i] = lastEle;
            map.set(lastEleId, { ele: lastEle, index: i });
          }

          // the collection is now 1 ele smaller
          this.length--;

          return this;
        },

        // remove eles in place on calling collection
        unmerge: function unmerge(toRemove) {
          var cy = this._private.cy;

          if (!toRemove) {
            return this;
          }

          if (toRemove && is.string(toRemove)) {
            var selector = toRemove;
            toRemove = cy.mutableElements().filter(selector);
          }

          for (var i = 0; i < toRemove.length; i++) {
            this.unmergeOne(toRemove[i]);
          }

          return this; // chaining
        },

        map: function map(mapFn, thisArg) {
          var arr = [];
          var eles = this;

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);

            arr.push(ret);
          }

          return arr;
        },

        reduce: function reduce(fn, initialValue) {
          var val = initialValue;
          var eles = this;

          for (var i = 0; i < eles.length; i++) {
            val = fn(val, eles[i], i, eles);
          }

          return val;
        },

        max: function max(valFn, thisArg) {
          var max = -Infinity;
          var maxEle = void 0;
          var eles = this;

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

            if (val > max) {
              max = val;
              maxEle = ele;
            }
          }

          return {
            value: max,
            ele: maxEle
          };
        },

        min: function min(valFn, thisArg) {
          var min = Infinity;
          var minEle = void 0;
          var eles = this;

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

            if (val < min) {
              min = val;
              minEle = ele;
            }
          }

          return {
            value: min,
            ele: minEle
          };
        }
      };

      // aliases
      var fn = elesfn;
      fn['u'] = fn['|'] = fn['+'] = fn.union = fn.or = fn.add;
      fn['\\'] = fn['!'] = fn['-'] = fn.difference = fn.relativeComplement = fn.subtract = fn.not;
      fn['n'] = fn['&'] = fn['.'] = fn.and = fn.intersection = fn.intersect;
      fn['^'] = fn['(+)'] = fn['(-)'] = fn.symmetricDifference = fn.symdiff = fn.xor;
      fn.fnFilter = fn.filterFn = fn.stdFilter = fn.filter;
      fn.complement = fn.abscomp = fn.absoluteComplement;

      module.exports = elesfn;

      /***/
    },
    /* 63 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var elesfn = {
        isNode: function isNode() {
          return this.group() === 'nodes';
        },

        isEdge: function isEdge() {
          return this.group() === 'edges';
        },

        isLoop: function isLoop() {
          return this.isEdge() && this.source().id() === this.target().id();
        },

        isSimple: function isSimple() {
          return this.isEdge() && this.source().id() !== this.target().id();
        },

        group: function group() {
          var ele = this[0];

          if (ele) {
            return ele._private.group;
          }
        }
      };

      module.exports = elesfn;

      /***/
    },
    /* 64 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var zIndexSort = __webpack_require__(17);
      var util = __webpack_require__(1);

      var elesfn = {
        forEach: function forEach(fn, thisArg) {
          if (is.fn(fn)) {

            for (var i = 0; i < this.length; i++) {
              var ele = this[i];
              var ret = thisArg ? fn.apply(thisArg, [ele, i, this]) : fn(ele, i, this);

              if (ret === false) {
                break;
              } // exit each early on return false
            }
          }

          return this;
        },

        toArray: function toArray() {
          var array = [];

          for (var i = 0; i < this.length; i++) {
            array.push(this[i]);
          }

          return array;
        },

        slice: function slice(start, end) {
          var array = [];
          var thisSize = this.length;

          if (end == null) {
            end = thisSize;
          }

          if (start == null) {
            start = 0;
          }

          if (start < 0) {
            start = thisSize + start;
          }

          if (end < 0) {
            end = thisSize + end;
          }

          for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
            array.push(this[i]);
          }

          return this.spawn(array);
        },

        size: function size() {
          return this.length;
        },

        eq: function eq(i) {
          return this[i] || this.spawn();
        },

        first: function first() {
          return this[0] || this.spawn();
        },

        last: function last() {
          return this[this.length - 1] || this.spawn();
        },

        empty: function empty() {
          return this.length === 0;
        },

        nonempty: function nonempty() {
          return !this.empty();
        },

        sort: function sort(sortFn) {
          if (!is.fn(sortFn)) {
            return this;
          }

          var sorted = this.toArray().sort(sortFn);

          return this.spawn(sorted);
        },

        sortByZIndex: function sortByZIndex() {
          return this.sort(zIndexSort);
        },

        zDepth: function zDepth() {
          var ele = this[0];
          if (!ele) {
            return undefined;
          }

          // let cy = ele.cy();
          var _p = ele._private;
          var group = _p.group;

          if (group === 'nodes') {
            var depth = _p.data.parent ? ele.parents().size() : 0;

            if (!ele.isParent()) {
              return util.MAX_INT - 1; // childless nodes always on top
            }

            return depth;
          } else {
            var src = _p.source;
            var tgt = _p.target;
            var srcDepth = src.zDepth();
            var tgtDepth = tgt.zDepth();

            return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
          }
        }
      };

      elesfn.each = elesfn.forEach;

      module.exports = elesfn;

      /***/
    },
    /* 65 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var Promise = __webpack_require__(5);
      var math = __webpack_require__(2);

      var elesfn = {
        // Calculates and returns node dimensions { x, y } based on options given
        layoutDimensions: function layoutDimensions(options) {
          options = util.assign({
            nodeDimensionsIncludeLabels: true
          }, options);

          if (options.nodeDimensionsIncludeLabels) {
            var bbDim = this.boundingBox();
            return {
              w: bbDim.w,
              h: bbDim.h
            };
          } else {
            return {
              w: this.outerWidth(),
              h: this.outerHeight()
            };
          }
        },

        // using standard layout options, apply position function (w/ or w/o animation)
        layoutPositions: function layoutPositions(layout, options, fn) {
          var nodes = this.nodes();
          var cy = this.cy();
          var layoutEles = options.eles; // nodes & edges
          var getMemoizeKey = function getMemoizeKey(node, i) {
            return node.id() + '$' + i;
          };
          var fnMem = util.memoize(fn, getMemoizeKey); // memoized version of position function

          layout.emit({ type: 'layoutstart', layout: layout });

          layout.animations = [];

          var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
            var center = {
              x: nodesBb.x1 + nodesBb.w / 2,
              y: nodesBb.y1 + nodesBb.h / 2
            };

            var spacingVector = { // scale from center of bounding box (not necessarily 0,0)
              x: (pos.x - center.x) * spacing,
              y: (pos.y - center.y) * spacing
            };

            return {
              x: center.x + spacingVector.x,
              y: center.y + spacingVector.y
            };
          };

          var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

          var spacingBb = function spacingBb() {
            if (!useSpacingFactor) {
              return null;
            }

            var bb = math.makeBoundingBox();

            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              var pos = fnMem(node, i);

              math.expandBoundingBoxByPoint(bb, pos.x, pos.y);
            }

            return bb;
          };

          var bb = spacingBb();

          var getFinalPos = util.memoize(function (node, i) {
            var newPos = fnMem(node, i);
            var pos = node.position();

            if (!is.number(pos.x) || !is.number(pos.y)) {
              node.silentPosition({ x: 0, y: 0 });
            }

            if (useSpacingFactor) {
              var spacing = Math.abs(options.spacingFactor);

              newPos = calculateSpacing(spacing, bb, newPos);
            }

            if (options.transform != null) {
              newPos = options.transform(node, newPos);
            }

            return newPos;
          }, getMemoizeKey);

          if (options.animate) {
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              var newPos = getFinalPos(node, i);
              var animateNode = options.animateFilter == null || options.animateFilter(node, i);

              if (animateNode) {
                var ani = node.animation({
                  position: newPos,
                  duration: options.animationDuration,
                  easing: options.animationEasing
                });

                layout.animations.push(ani);

                ani.play();
              } else {
                node.position(newPos);
              }
            }

            if (options.fit) {
              var fitAni = cy.animation({
                fit: {
                  boundingBox: layoutEles.boundingBoxAt(getFinalPos),
                  padding: options.padding
                },
                duration: options.animationDuration,
                easing: options.animationEasing
              });

              layout.animations.push(fitAni);

              fitAni.play();
            } else if (options.zoom !== undefined && options.pan !== undefined) {
              var zoomPanAni = cy.animation({
                zoom: options.zoom,
                pan: options.pan,
                duration: options.animationDuration,
                easing: options.animationEasing
              });

              layout.animations.push(zoomPanAni);

              zoomPanAni.play();
            }

            layout.one('layoutready', options.ready);
            layout.emit({ type: 'layoutready', layout: layout });

            Promise.all(layout.animations.map(function (ani) {
              return ani.promise();
            })).then(function () {
              layout.one('layoutstop', options.stop);
              layout.emit({ type: 'layoutstop', layout: layout });
            });
          } else {

            nodes.positions(getFinalPos);

            if (options.fit) {
              cy.fit(options.eles, options.padding);
            }

            if (options.zoom != null) {
              cy.zoom(options.zoom);
            }

            if (options.pan) {
              cy.pan(options.pan);
            }

            layout.one('layoutready', options.ready);
            layout.emit({ type: 'layoutready', layout: layout });

            layout.one('layoutstop', options.stop);
            layout.emit({ type: 'layoutstop', layout: layout });
          }

          return this; // chaining
        },

        layout: function layout(options) {
          var cy = this.cy();

          return cy.makeLayout(util.extend({}, options, {
            eles: this
          }));
        }

      };

      // aliases:
      elesfn.createLayout = elesfn.makeLayout = elesfn.layout;

      module.exports = elesfn;

      /***/
    },
    /* 66 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      function styleCache(key, fn, ele) {
        var _p = ele._private;
        var cache = _p.styleCache = _p.styleCache || {};
        var val;

        if ((val = cache[key]) != null) {
          return val;
        } else {
          val = cache[key] = fn(ele);

          return val;
        }
      }

      function cacheStyleFunction(key, fn) {
        return function cachedStyleFunction(ele) {
          return styleCache(key, fn, ele);
        };
      }

      function cachePrototypeStyleFunction(key, fn) {
        var selfFn = function selfFn(ele) {
          return fn.call(ele);
        };

        return function cachedPrototypeStyleFunction() {
          var ele = this[0];

          if (ele) {
            return styleCache(key, selfFn, ele);
          }
        };
      }

      var elesfn = {

        recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
          var cy = this.cy();
          var renderer = cy.renderer();
          var styleEnabled = cy.styleEnabled();

          if (renderer && styleEnabled) {
            renderer.recalculateRenderedStyle(this, useCache);
          }

          return this;
        },

        dirtyStyleCache: function dirtyStyleCache() {
          var cy = this.cy();
          var dirty = function dirty(ele) {
            return ele._private.styleCache = {};
          };

          if (cy.hasCompoundNodes()) {
            var eles = void 0;

            eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());

            eles.merge(eles.connectedEdges());

            eles.forEach(dirty);
          } else {
            this.forEach(function (ele) {
              dirty(ele);

              ele.connectedEdges().forEach(dirty);
            });
          }

          return this;
        },

        // fully updates (recalculates) the style for the elements
        updateStyle: function updateStyle(notifyRenderer) {
          var cy = this._private.cy;

          if (!cy.styleEnabled()) {
            return this;
          }

          if (cy._private.batchingStyle) {
            var bEles = cy._private.batchStyleEles;

            bEles.merge(this);

            return this; // chaining and exit early when batching
          }

          var hasCompounds = cy.hasCompoundNodes();
          var style = cy.style();
          var updatedEles = this;

          notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

          if (hasCompounds) {
            // then add everything up and down for compound selector checks
            updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
          }

          var changedEles = style.apply(updatedEles);

          changedEles.dirtyStyleCache();
          changedEles.dirtyCompoundBoundsCache();

          if (notifyRenderer) {
            changedEles.emitAndNotify('style'); // let renderer know we changed style
          } else {
            changedEles.emit('style'); // just fire the event
          }

          return this; // chaining
        },

        // just update the mappers in the elements' styles; cheaper than eles.updateStyle()
        updateMappers: function updateMappers(notifyRenderer) {
          var cy = this._private.cy;
          var style = cy.style();
          notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

          if (!cy.styleEnabled()) {
            return this;
          }

          var changedEles = style.updateMappers(this);

          changedEles.dirtyStyleCache();
          changedEles.dirtyCompoundBoundsCache();

          if (notifyRenderer) {
            changedEles.emitAndNotify('style'); // let renderer know we changed style
          } else {
            changedEles.emit('style'); // just fire the event
          }
          return this; // chaining
        },

        // get the internal parsed style object for the specified property
        parsedStyle: function parsedStyle(property) {
          var ele = this[0];
          var cy = ele.cy();

          if (!cy.styleEnabled()) {
            return;
          }

          if (ele) {
            return ele._private.style[property] || cy.style().getDefaultProperty(property);
          }
        },

        numericStyle: function numericStyle(property) {
          var ele = this[0];

          if (!ele.cy().styleEnabled()) {
            return;
          }

          if (ele) {
            var pstyle = ele.pstyle(property);

            return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
          }
        },

        numericStyleUnits: function numericStyleUnits(property) {
          var ele = this[0];

          if (!ele.cy().styleEnabled()) {
            return;
          }

          if (ele) {
            return ele.pstyle(property).units;
          }
        },

        // get the specified css property as a rendered value (i.e. on-screen value)
        // or get the whole rendered style if no property specified (NB doesn't allow setting)
        renderedStyle: function renderedStyle(property) {
          var cy = this.cy();
          if (!cy.styleEnabled()) {
            return this;
          }

          var ele = this[0];

          if (ele) {
            return cy.style().getRenderedStyle(ele, property);
          }
        },

        // read the calculated css style of the element or override the style (via a bypass)
        style: function style(name, value) {
          var cy = this.cy();

          if (!cy.styleEnabled()) {
            return this;
          }

          var updateTransitions = false;
          var style = cy.style();

          if (is.plainObject(name)) {
            // then extend the bypass
            var props = name;
            style.applyBypass(this, props, updateTransitions);

            this.dirtyStyleCache();
            this.dirtyCompoundBoundsCache();

            this.emitAndNotify('style'); // let the renderer know we've updated style
          } else if (is.string(name)) {

            if (value === undefined) {
              // then get the property from the style
              var ele = this[0];

              if (ele) {
                return style.getStylePropertyValue(ele, name);
              } else {
                // empty collection => can't get any value
                return;
              }
            } else {
              // then set the bypass with the property value
              style.applyBypass(this, name, value, updateTransitions);

              this.dirtyStyleCache();
              this.dirtyCompoundBoundsCache();

              this.emitAndNotify('style'); // let the renderer know we've updated style
            }
          } else if (name === undefined) {
            var _ele = this[0];

            if (_ele) {
              return style.getRawStyle(_ele);
            } else {
              // empty collection => can't get any value
              return;
            }
          }

          return this; // chaining
        },

        removeStyle: function removeStyle(names) {
          var cy = this.cy();

          if (!cy.styleEnabled()) {
            return this;
          }

          var updateTransitions = false;
          var style = cy.style();
          var eles = this;

          if (names === undefined) {
            for (var i = 0; i < eles.length; i++) {
              var ele = eles[i];

              style.removeAllBypasses(ele, updateTransitions);
            }
          } else {
            names = names.split(/\s+/);

            for (var _i = 0; _i < eles.length; _i++) {
              var _ele2 = eles[_i];

              style.removeBypasses(_ele2, names, updateTransitions);
            }
          }

          this.dirtyStyleCache();
          this.dirtyCompoundBoundsCache();

          this.emitAndNotify('style'); // let the renderer know we've updated style

          return this; // chaining
        },

        show: function show() {
          this.css('display', 'element');
          return this; // chaining
        },

        hide: function hide() {
          this.css('display', 'none');
          return this; // chaining
        },

        effectiveOpacity: function effectiveOpacity() {
          var cy = this.cy();
          if (!cy.styleEnabled()) {
            return 1;
          }

          var hasCompoundNodes = cy.hasCompoundNodes();
          var ele = this[0];

          if (ele) {
            var _p = ele._private;
            var parentOpacity = ele.pstyle('opacity').value;

            if (!hasCompoundNodes) {
              return parentOpacity;
            }

            var parents = !_p.data.parent ? null : ele.parents();

            if (parents) {
              for (var i = 0; i < parents.length; i++) {
                var parent = parents[i];
                var opacity = parent.pstyle('opacity').value;

                parentOpacity = opacity * parentOpacity;
              }
            }

            return parentOpacity;
          }
        },

        transparent: function transparent() {
          var cy = this.cy();
          if (!cy.styleEnabled()) {
            return false;
          }

          var ele = this[0];
          var hasCompoundNodes = ele.cy().hasCompoundNodes();

          if (ele) {
            if (!hasCompoundNodes) {
              return ele.pstyle('opacity').value === 0;
            } else {
              return ele.effectiveOpacity() === 0;
            }
          }
        },

        backgrounding: function backgrounding() {
          var cy = this.cy();
          if (!cy.styleEnabled()) {
            return false;
          }

          var ele = this[0];

          return ele._private.backgrounding ? true : false;
        }

      };

      function checkCompound(ele, parentOk) {
        var _p = ele._private;
        var parents = _p.data.parent ? ele.parents() : null;

        if (parents) {
          for (var i = 0; i < parents.length; i++) {
            var parent = parents[i];

            if (!parentOk(parent)) {
              return false;
            }
          }
        }

        return true;
      }

      function defineDerivedStateFunction(specs) {
        var ok = specs.ok;
        var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
        var parentOk = specs.parentOk || specs.ok;

        return function () {
          var cy = this.cy();
          if (!cy.styleEnabled()) {
            return true;
          }

          var ele = this[0];
          var hasCompoundNodes = cy.hasCompoundNodes();

          if (ele) {
            var _p = ele._private;

            if (!ok(ele)) {
              return false;
            }

            if (ele.isNode()) {
              return !hasCompoundNodes || checkCompound(ele, parentOk);
            } else {
              var src = _p.source;
              var tgt = _p.target;

              return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
            }
          }
        };
      }

      var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
        return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
      });

      elesfn.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
        ok: eleTakesUpSpace
      }));

      var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
        return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
      });

      var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
        return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
      });

      elesfn.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
        ok: eleInteractive,
        parentOk: parentInteractive,
        edgeOkViaNode: eleTakesUpSpace
      }));

      elesfn.noninteractive = function () {
        var ele = this[0];

        if (ele) {
          return !ele.interactive();
        }
      };

      var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
        return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
      });

      var edgeVisibleViaNode = eleTakesUpSpace;

      elesfn.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
        ok: eleVisible,
        edgeOkViaNode: edgeVisibleViaNode
      }));

      elesfn.hidden = function () {
        var ele = this[0];

        if (ele) {
          return !ele.visible();
        }
      };

      elesfn.bypass = elesfn.css = elesfn.style;
      elesfn.renderedCss = elesfn.renderedStyle;
      elesfn.removeBypass = elesfn.removeCss = elesfn.removeStyle;
      elesfn.pstyle = elesfn.parsedStyle;

      module.exports = elesfn;

      /***/
    },
    /* 67 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var elesfn = {};

      function defineSwitchFunction(params) {
        return function () {
          var args = arguments;
          var changedEles = [];

          // e.g. cy.nodes().select( data, handler )
          if (args.length === 2) {
            var data = args[0];
            var handler = args[1];
            this.on(params.event, data, handler);
          }

          // e.g. cy.nodes().select( handler )
          else if (args.length === 1) {
              var _handler = args[0];
              this.on(params.event, _handler);
            }

            // e.g. cy.nodes().select()
            else if (args.length === 0) {
                for (var i = 0; i < this.length; i++) {
                  var ele = this[i];
                  var able = !params.ableField || ele._private[params.ableField];
                  var changed = ele._private[params.field] != params.value;

                  if (params.overrideAble) {
                    var overrideAble = params.overrideAble(ele);

                    if (overrideAble !== undefined) {
                      able = overrideAble;

                      if (!overrideAble) {
                        return this;
                      } // to save cycles assume not able for all on override
                    }
                  }

                  if (able) {
                    ele._private[params.field] = params.value;

                    if (changed) {
                      changedEles.push(ele);
                    }
                  }
                }

                var changedColl = this.spawn(changedEles);
                changedColl.updateStyle(); // change of state => possible change of style
                changedColl.emit(params.event);
              }

          return this;
        };
      }

      function defineSwitchSet(params) {
        elesfn[params.field] = function () {
          var ele = this[0];

          if (ele) {
            if (params.overrideField) {
              var val = params.overrideField(ele);

              if (val !== undefined) {
                return val;
              }
            }

            return ele._private[params.field];
          }
        };

        elesfn[params.on] = defineSwitchFunction({
          event: params.on,
          field: params.field,
          ableField: params.ableField,
          overrideAble: params.overrideAble,
          value: true
        });

        elesfn[params.off] = defineSwitchFunction({
          event: params.off,
          field: params.field,
          ableField: params.ableField,
          overrideAble: params.overrideAble,
          value: false
        });
      }

      defineSwitchSet({
        field: 'locked',
        overrideField: function overrideField(ele) {
          return ele.cy().autolock() ? true : undefined;
        },
        on: 'lock',
        off: 'unlock'
      });

      defineSwitchSet({
        field: 'grabbable',
        overrideField: function overrideField(ele) {
          return ele.cy().autoungrabify() ? false : undefined;
        },
        on: 'grabify',
        off: 'ungrabify'
      });

      defineSwitchSet({
        field: 'selected',
        ableField: 'selectable',
        overrideAble: function overrideAble(ele) {
          return ele.cy().autounselectify() ? false : undefined;
        },
        on: 'select',
        off: 'unselect'
      });

      defineSwitchSet({
        field: 'selectable',
        overrideField: function overrideField(ele) {
          return ele.cy().autounselectify() ? false : undefined;
        },
        on: 'selectify',
        off: 'unselectify'
      });

      elesfn.deselect = elesfn.unselect;

      elesfn.grabbed = function () {
        var ele = this[0];
        if (ele) {
          return ele._private.grabbed;
        }
      };

      defineSwitchSet({
        field: 'active',
        on: 'activate',
        off: 'unactivate'
      });

      elesfn.inactive = function () {
        var ele = this[0];
        if (ele) {
          return !ele._private.active;
        }
      };

      module.exports = elesfn;

      /***/
    },
    /* 68 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);

      var elesfn = {};

      var cache = function cache(fn, name) {
        return function traversalCache(arg1, arg2, arg3, arg4) {
          var selectorOrEles = arg1;
          var eles = this;
          var key = void 0;

          if (selectorOrEles == null) {
            key = 'null';
          } else if (is.elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
            key = '#' + selectorOrEles.id();
          }

          if (eles.length === 1 && key) {
            var _p = eles[0]._private;
            var tch = _p.traversalCache = _p.traversalCache || {};
            var ch = tch[name] = tch[name] || {};
            var cacheHit = ch[key];

            if (cacheHit) {
              return cacheHit;
            } else {
              return ch[key] = fn.call(eles, arg1, arg2, arg3, arg4);
            }
          } else {
            return fn.call(eles, arg1, arg2, arg3, arg4);
          }
        };
      };

      // DAG functions
      ////////////////

      var defineDagExtremity = function defineDagExtremity(params) {
        return function dagExtremityImpl(selector) {
          var eles = this;
          var ret = [];

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            if (!ele.isNode()) {
              continue;
            }

            var disqualified = false;
            var edges = ele.connectedEdges();

            for (var j = 0; j < edges.length; j++) {
              var edge = edges[j];
              var src = edge.source();
              var tgt = edge.target();

              if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
                disqualified = true;
                break;
              }
            }

            if (!disqualified) {
              ret.push(ele);
            }
          }

          return this.spawn(ret, { unique: true }).filter(selector);
        };
      };

      var defineDagOneHop = function defineDagOneHop(params) {
        return function (selector) {
          var eles = this;
          var oEles = [];

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];

            if (!ele.isNode()) {
              continue;
            }

            var edges = ele.connectedEdges();
            for (var j = 0; j < edges.length; j++) {
              var edge = edges[j];
              var src = edge.source();
              var tgt = edge.target();

              if (params.outgoing && src === ele) {
                oEles.push(edge);
                oEles.push(tgt);
              } else if (params.incoming && tgt === ele) {
                oEles.push(edge);
                oEles.push(src);
              }
            }
          }

          return this.spawn(oEles, { unique: true }).filter(selector);
        };
      };

      var defineDagAllHops = function defineDagAllHops(params) {
        return function (selector) {
          var eles = this;
          var sEles = [];
          var sElesIds = {};

          for (;;) {
            var next = params.outgoing ? eles.outgoers() : eles.incomers();

            if (next.length === 0) {
              break;
            } // done if none left

            var newNext = false;
            for (var i = 0; i < next.length; i++) {
              var n = next[i];
              var nid = n.id();

              if (!sElesIds[nid]) {
                sElesIds[nid] = true;
                sEles.push(n);
                newNext = true;
              }
            }

            if (!newNext) {
              break;
            } // done if touched all outgoers already

            eles = next;
          }

          return this.spawn(sEles, { unique: true }).filter(selector);
        };
      };

      elesfn.clearTraversalCache = function () {
        for (var i = 0; i < this.length; i++) {
          this[i]._private.traversalCache = null;
        }
      };

      util.extend(elesfn, {
        // get the root nodes in the DAG
        roots: defineDagExtremity({ noIncomingEdges: true }),

        // get the leaf nodes in the DAG
        leaves: defineDagExtremity({ noOutgoingEdges: true }),

        // normally called children in graph theory
        // these nodes =edges=> outgoing nodes
        outgoers: cache(defineDagOneHop({ outgoing: true }), 'outgoers'),

        // aka DAG descendants
        successors: defineDagAllHops({ outgoing: true }),

        // normally called parents in graph theory
        // these nodes <=edges= incoming nodes
        incomers: cache(defineDagOneHop({ incoming: true }), 'incomers'),

        // aka DAG ancestors
        predecessors: defineDagAllHops({ incoming: true })
      });

      // Neighbourhood functions
      //////////////////////////

      util.extend(elesfn, {
        neighborhood: cache(function (selector) {
          var elements = [];
          var nodes = this.nodes();

          for (var i = 0; i < nodes.length; i++) {
            // for all nodes
            var node = nodes[i];
            var connectedEdges = node.connectedEdges();

            // for each connected edge, add the edge and the other node
            for (var j = 0; j < connectedEdges.length; j++) {
              var edge = connectedEdges[j];
              var src = edge.source();
              var tgt = edge.target();
              var otherNode = node === src ? tgt : src;

              // need check in case of loop
              if (otherNode.length > 0) {
                elements.push(otherNode[0]); // add node 1 hop away
              }

              // add connected edge
              elements.push(edge[0]);
            }
          }

          return this.spawn(elements, { unique: true }).filter(selector);
        }, 'neighborhood'),

        closedNeighborhood: function closedNeighborhood(selector) {
          return this.neighborhood().add(this).filter(selector);
        },

        openNeighborhood: function openNeighborhood(selector) {
          return this.neighborhood(selector);
        }
      });

      // aliases
      elesfn.neighbourhood = elesfn.neighborhood;
      elesfn.closedNeighbourhood = elesfn.closedNeighborhood;
      elesfn.openNeighbourhood = elesfn.openNeighborhood;

      // Edge functions
      /////////////////

      util.extend(elesfn, {
        source: cache(function sourceImpl(selector) {
          var ele = this[0];
          var src = void 0;

          if (ele) {
            src = ele._private.source || ele.cy().collection();
          }

          return src && selector ? src.filter(selector) : src;
        }, 'source'),

        target: cache(function targetImpl(selector) {
          var ele = this[0];
          var tgt = void 0;

          if (ele) {
            tgt = ele._private.target || ele.cy().collection();
          }

          return tgt && selector ? tgt.filter(selector) : tgt;
        }, 'target'),

        sources: defineSourceFunction({
          attr: 'source'
        }),

        targets: defineSourceFunction({
          attr: 'target'
        })
      });

      function defineSourceFunction(params) {
        return function sourceImpl(selector) {
          var sources = [];

          for (var i = 0; i < this.length; i++) {
            var ele = this[i];
            var src = ele._private[params.attr];

            if (src) {
              sources.push(src);
            }
          }

          return this.spawn(sources, { unique: true }).filter(selector);
        };
      }

      util.extend(elesfn, {
        edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),

        edgesTo: cache(defineEdgesWithFunction({
          thisIsSrc: true
        }), 'edgesTo')
      });

      function defineEdgesWithFunction(params) {

        return function edgesWithImpl(otherNodes) {
          var elements = [];
          var cy = this._private.cy;
          var p = params || {};

          // get elements if a selector is specified
          if (is.string(otherNodes)) {
            otherNodes = cy.$(otherNodes);
          }

          for (var h = 0; h < otherNodes.length; h++) {
            var edges = otherNodes[h]._private.edges;

            for (var i = 0; i < edges.length; i++) {
              var edge = edges[i];
              var edgeData = edge._private.data;
              var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
              var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
              var edgeConnectsThisAndOther = thisToOther || otherToThis;

              if (!edgeConnectsThisAndOther) {
                continue;
              }

              if (p.thisIsSrc || p.thisIsTgt) {
                if (p.thisIsSrc && !thisToOther) {
                  continue;
                }

                if (p.thisIsTgt && !otherToThis) {
                  continue;
                }
              }

              elements.push(edge);
            }
          }

          return this.spawn(elements, { unique: true });
        };
      }

      util.extend(elesfn, {
        connectedEdges: cache(function (selector) {
          var retEles = [];

          var eles = this;
          for (var i = 0; i < eles.length; i++) {
            var node = eles[i];
            if (!node.isNode()) {
              continue;
            }

            var edges = node._private.edges;

            for (var j = 0; j < edges.length; j++) {
              var edge = edges[j];
              retEles.push(edge);
            }
          }

          return this.spawn(retEles, { unique: true }).filter(selector);
        }, 'connectedEdges'),

        connectedNodes: cache(function (selector) {
          var retEles = [];

          var eles = this;
          for (var i = 0; i < eles.length; i++) {
            var edge = eles[i];
            if (!edge.isEdge()) {
              continue;
            }

            retEles.push(edge.source()[0]);
            retEles.push(edge.target()[0]);
          }

          return this.spawn(retEles, { unique: true }).filter(selector);
        }, 'connectedNodes'),

        parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),

        codirectedEdges: cache(defineParallelEdgesFunction({
          codirected: true
        }), 'codirectedEdges')
      });

      function defineParallelEdgesFunction(params) {
        var defaults = {
          codirected: false
        };
        params = util.extend({}, defaults, params);

        return function parallelEdgesImpl(selector) {
          // micro-optimised for renderer
          var elements = [];
          var edges = this.edges();
          var p = params;

          // look at all the edges in the collection
          for (var i = 0; i < edges.length; i++) {
            var edge1 = edges[i];
            var edge1_p = edge1._private;
            var src1 = edge1_p.source;
            var srcid1 = src1._private.data.id;
            var tgtid1 = edge1_p.data.target;
            var srcEdges1 = src1._private.edges;

            // look at edges connected to the src node of this edge
            for (var j = 0; j < srcEdges1.length; j++) {
              var edge2 = srcEdges1[j];
              var edge2data = edge2._private.data;
              var tgtid2 = edge2data.target;
              var srcid2 = edge2data.source;

              var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
              var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

              if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
                elements.push(edge2);
              }
            }
          }

          return this.spawn(elements, { unique: true }).filter(selector);
        };
      }

      // Misc functions
      /////////////////

      util.extend(elesfn, {
        components: function components() {
          var self = this;
          var cy = self.cy();
          var visited = self.spawn();
          var unvisited = self.nodes().spawnSelf();
          var components = [];

          var visitInComponent = function visitInComponent(node, component) {
            visited.merge(node);
            unvisited.unmerge(node);
            component.merge(node);
          };

          if (unvisited.empty()) {
            return self.spawn();
          }

          var _loop = function _loop() {
            var component = cy.collection();
            components.push(component);

            var root = unvisited[0];
            visitInComponent(root, component);

            self.bfs({
              directed: false,
              roots: root,
              visit: function visit(v, e, u, i, depth) {
                visitInComponent(v, component);
              }
            });
          };

          do {
            _loop();
          } while (unvisited.length > 0);

          return components.map(function (component) {
            var connectedEdges = component.connectedEdges().stdFilter(function (edge) {
              return component.anySame(edge.source()) && component.anySame(edge.target());
            });

            return component.union(connectedEdges);
          });
        }
      });

      module.exports = elesfn;

      /***/
    },
    /* 69 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var Collection = __webpack_require__(7);
      var Element = __webpack_require__(14);

      var corefn = {
        add: function add(opts) {

          var elements = void 0;
          var cy = this;

          // add the elements
          if (is.elementOrCollection(opts)) {
            var eles = opts;

            if (eles._private.cy === cy) {
              // same instance => just restore
              elements = eles.restore();
            } else {
              // otherwise, copy from json
              var jsons = [];

              for (var i = 0; i < eles.length; i++) {
                var ele = eles[i];
                jsons.push(ele.json());
              }

              elements = new Collection(cy, jsons);
            }
          }

          // specify an array of options
          else if (is.array(opts)) {
              var _jsons = opts;

              elements = new Collection(cy, _jsons);
            }

            // specify via opts.nodes and opts.edges
            else if (is.plainObject(opts) && (is.array(opts.nodes) || is.array(opts.edges))) {
                var elesByGroup = opts;
                var _jsons2 = [];

                var grs = ['nodes', 'edges'];
                for (var _i = 0, il = grs.length; _i < il; _i++) {
                  var group = grs[_i];
                  var elesArray = elesByGroup[group];

                  if (is.array(elesArray)) {

                    for (var j = 0, jl = elesArray.length; j < jl; j++) {
                      var json = util.extend({ group: group }, elesArray[j]);

                      _jsons2.push(json);
                    }
                  }
                }

                elements = new Collection(cy, _jsons2);
              }

              // specify options for one element
              else {
                  var _json = opts;
                  elements = new Element(cy, _json).collection();
                }

          return elements;
        },

        remove: function remove(collection) {
          if (is.elementOrCollection(collection)) {
            // already have right ref
          } else if (is.string(collection)) {
            var selector = collection;
            collection = this.$(selector);
          }

          return collection.remove();
        }
      };

      module.exports = corefn;

      /***/
    },
    /* 70 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var define = __webpack_require__(4);
      var util = __webpack_require__(1);
      var stepAll = __webpack_require__(71);

      var corefn = {

        // pull in animation functions
        animate: define.animate(),
        animation: define.animation(),
        animated: define.animated(),
        clearQueue: define.clearQueue(),
        delay: define.delay(),
        delayAnimation: define.delayAnimation(),
        stop: define.stop(),

        addToAnimationPool: function addToAnimationPool(eles) {
          var cy = this;

          if (!cy.styleEnabled()) {
            return;
          } // save cycles when no style used

          cy._private.aniEles.merge(eles);
        },

        stopAnimationLoop: function stopAnimationLoop() {
          this._private.animationsRunning = false;
        },

        startAnimationLoop: function startAnimationLoop() {
          var cy = this;

          cy._private.animationsRunning = true;

          if (!cy.styleEnabled()) {
            return;
          } // save cycles when no style used

          // NB the animation loop will exec in headless environments if style enabled
          // and explicit cy.destroy() is necessary to stop the loop

          function headlessStep() {
            if (!cy._private.animationsRunning) {
              return;
            }

            util.requestAnimationFrame(function animationStep(now) {
              stepAll(now, cy);
              headlessStep();
            });
          }

          var renderer = cy.renderer();

          if (renderer && renderer.beforeRender) {
            // let the renderer schedule animations
            renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
              stepAll(now, cy);
            }, renderer.beforeRenderPriorities.animations);
          } else {
            // manage the animation loop ourselves
            headlessStep(); // first call
          }
        }

      };

      module.exports = corefn;

      /***/
    },
    /* 71 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var step = __webpack_require__(72);
      var startAnimation = __webpack_require__(77);

      function stepAll(now, cy) {
        var eles = cy._private.aniEles;
        var doneEles = [];

        function stepOne(ele, isCore) {
          var _p = ele._private;
          var current = _p.animation.current;
          var queue = _p.animation.queue;
          var ranAnis = false;

          // cancel all animations on display:none ele
          if (!isCore && ele.pstyle('display').value === 'none') {
            // put all current and queue animations in this tick's current list
            // and empty the lists for the element
            current = current.splice(0, current.length).concat(queue.splice(0, queue.length));

            // stop all animations
            for (var i = 0; i < current.length; i++) {
              current[i].stop();
            }
          }

          // if nothing currently animating, get something from the queue
          if (current.length === 0) {
            var next = queue.shift();

            if (next) {
              current.push(next);
            }
          }

          var callbacks = function callbacks(_callbacks) {
            for (var j = _callbacks.length - 1; j >= 0; j--) {
              var cb = _callbacks[j];

              cb();
            }

            _callbacks.splice(0, _callbacks.length);
          };

          // step and remove if done
          for (var _i = current.length - 1; _i >= 0; _i--) {
            var ani = current[_i];
            var ani_p = ani._private;

            if (ani_p.stopped) {
              current.splice(_i, 1);

              ani_p.hooked = false;
              ani_p.playing = false;
              ani_p.started = false;

              callbacks(ani_p.frames);

              continue;
            }

            if (!ani_p.playing && !ani_p.applying) {
              continue;
            }

            // an apply() while playing shouldn't do anything
            if (ani_p.playing && ani_p.applying) {
              ani_p.applying = false;
            }

            if (!ani_p.started) {
              startAnimation(ele, ani, now, isCore);
            }

            step(ele, ani, now, isCore);

            if (ani_p.applying) {
              ani_p.applying = false;
            }

            callbacks(ani_p.frames);

            if (ani.completed()) {
              current.splice(_i, 1);

              ani_p.hooked = false;
              ani_p.playing = false;
              ani_p.started = false;

              callbacks(ani_p.completes);
            }

            ranAnis = true;
          }

          if (!isCore && current.length === 0 && queue.length === 0) {
            doneEles.push(ele);
          }

          return ranAnis;
        } // stepElement

        // handle all eles
        var ranEleAni = false;
        for (var e = 0; e < eles.length; e++) {
          var ele = eles[e];
          var handledThisEle = stepOne(ele);

          ranEleAni = ranEleAni || handledThisEle;
        } // each element

        var ranCoreAni = stepOne(cy, true);

        // notify renderer
        if (ranEleAni || ranCoreAni) {
          if (eles.length > 0) {
            eles.dirtyCompoundBoundsCache();

            cy.notify({
              type: 'draw',
              eles: eles
            });
          } else {
            cy.notify({
              type: 'draw'
            });
          }
        }

        // remove elements from list of currently animating if its queues are empty
        eles.unmerge(doneEles);

        cy.emit('step');
      } // stepAll

      module.exports = stepAll;

      /***/
    },
    /* 72 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var easings = __webpack_require__(73);
      var ease = __webpack_require__(76);
      var is = __webpack_require__(0);

      function step(self, ani, now, isCore) {
        var isEles = !isCore;
        var _p = self._private;
        var ani_p = ani._private;
        var pEasing = ani_p.easing;
        var startTime = ani_p.startTime;
        var cy = isCore ? self : self.cy();
        var style = cy.style();

        if (!ani_p.easingImpl) {

          if (pEasing == null) {
            // use default
            ani_p.easingImpl = easings['linear'];
          } else {
            // then define w/ name
            var easingVals = void 0;

            if (is.string(pEasing)) {
              var easingProp = style.parse('transition-timing-function', pEasing);

              easingVals = easingProp.value;
            } else {
              // then assume preparsed array
              easingVals = pEasing;
            }

            var name = void 0,
                args = void 0;

            if (is.string(easingVals)) {
              name = easingVals;
              args = [];
            } else {
              name = easingVals[1];
              args = easingVals.slice(2).map(function (n) {
                return +n;
              });
            }

            if (args.length > 0) {
              // create with args
              if (name === 'spring') {
                args.push(ani_p.duration); // need duration to generate spring
              }

              ani_p.easingImpl = easings[name].apply(null, args);
            } else {
              // static impl by name
              ani_p.easingImpl = easings[name];
            }
          }
        }

        var easing = ani_p.easingImpl;
        var percent = void 0;

        if (ani_p.duration === 0) {
          percent = 1;
        } else {
          percent = (now - startTime) / ani_p.duration;
        }

        if (ani_p.applying) {
          percent = ani_p.progress;
        }

        if (percent < 0) {
          percent = 0;
        } else if (percent > 1) {
          percent = 1;
        }

        if (ani_p.delay == null) {
          // then update

          var startPos = ani_p.startPosition;
          var endPos = ani_p.position;

          if (endPos && isEles && !self.locked()) {
            var pos = self.position();

            if (valid(startPos.x, endPos.x)) {
              pos.x = ease(startPos.x, endPos.x, percent, easing);
            }

            if (valid(startPos.y, endPos.y)) {
              pos.y = ease(startPos.y, endPos.y, percent, easing);
            }

            self.emit('position');
          }

          var startPan = ani_p.startPan;
          var endPan = ani_p.pan;
          var pan = _p.pan;
          var animatingPan = endPan != null && isCore;
          if (animatingPan) {
            if (valid(startPan.x, endPan.x)) {
              pan.x = ease(startPan.x, endPan.x, percent, easing);
            }

            if (valid(startPan.y, endPan.y)) {
              pan.y = ease(startPan.y, endPan.y, percent, easing);
            }

            self.emit('pan');
          }

          var startZoom = ani_p.startZoom;
          var endZoom = ani_p.zoom;
          var animatingZoom = endZoom != null && isCore;
          if (animatingZoom) {
            if (valid(startZoom, endZoom)) {
              _p.zoom = ease(startZoom, endZoom, percent, easing);
            }

            self.emit('zoom');
          }

          if (animatingPan || animatingZoom) {
            self.emit('viewport');
          }

          var props = ani_p.style;
          if (props && props.length > 0 && isEles) {
            for (var i = 0; i < props.length; i++) {
              var prop = props[i];
              var _name = prop.name;
              var end = prop;
              var start = ani_p.startStyle[_name];
              var propSpec = style.properties[start.name];
              var easedVal = ease(start, end, percent, easing, propSpec);

              style.overrideBypass(self, _name, easedVal);
            } // for props

            self.emit('style');
          } // if
        }

        ani_p.progress = percent;

        return percent;
      }

      function valid(start, end) {
        if (start == null || end == null) {
          return false;
        }

        if (is.number(start) && is.number(end)) {
          return true;
        } else if (start && end) {
          return true;
        }

        return false;
      }

      module.exports = step;

      /***/
    },
    /* 73 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var generateCubicBezier = __webpack_require__(74);
      var generateSpringRK4 = __webpack_require__(75);

      var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
        var bezier = generateCubicBezier(t1, p1, t2, p2);

        return function (start, end, percent) {
          return start + (end - start) * bezier(percent);
        };
      };

      var easings = {
        'linear': function linear(start, end, percent) {
          return start + (end - start) * percent;
        },

        // default easings
        'ease': cubicBezier(0.25, 0.1, 0.25, 1),
        'ease-in': cubicBezier(0.42, 0, 1, 1),
        'ease-out': cubicBezier(0, 0, 0.58, 1),
        'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),

        // sine
        'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
        'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
        'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),

        // quad
        'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
        'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
        'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),

        // cubic
        'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
        'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
        'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),

        // quart
        'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
        'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
        'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),

        // quint
        'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
        'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
        'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),

        // expo
        'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
        'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
        'ease-in-out-expo': cubicBezier(1, 0, 0, 1),

        // circ
        'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
        'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
        'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),

        // user param easings...

        'spring': function spring(tension, friction, duration) {
          if (duration === 0) {
            // can't get a spring w/ duration 0
            return easings.linear; // duration 0 => jump to end so impl doesn't matter
          }

          var spring = generateSpringRK4(tension, friction, duration);

          return function (start, end, percent) {
            return start + (end - start) * spring(percent);
          };
        },

        'cubic-bezier': cubicBezier
      };

      module.exports = easings;

      /***/
    },
    /* 74 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /* global Float32Array */

      /*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */

      function generateCubicBezier(mX1, mY1, mX2, mY2) {
        var NEWTON_ITERATIONS = 4,
            NEWTON_MIN_SLOPE = 0.001,
            SUBDIVISION_PRECISION = 0.0000001,
            SUBDIVISION_MAX_ITERATIONS = 10,
            kSplineTableSize = 11,
            kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
            float32ArraySupported = typeof Float32Array !== 'undefined';

        /* Must contain four arguments. */
        if (arguments.length !== 4) {
          return false;
        }

        /* Arguments must be numbers. */
        for (var i = 0; i < 4; ++i) {
          if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
            return false;
          }
        }

        /* X values must be in the [0, 1] range. */
        mX1 = Math.min(mX1, 1);
        mX2 = Math.min(mX2, 1);
        mX1 = Math.max(mX1, 0);
        mX2 = Math.max(mX2, 0);

        var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

        function A(aA1, aA2) {
          return 1.0 - 3.0 * aA2 + 3.0 * aA1;
        }

        function B(aA1, aA2) {
          return 3.0 * aA2 - 6.0 * aA1;
        }

        function C(aA1) {
          return 3.0 * aA1;
        }

        function calcBezier(aT, aA1, aA2) {
          return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
        }

        function getSlope(aT, aA1, aA2) {
          return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
        }

        function newtonRaphsonIterate(aX, aGuessT) {
          for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
            var currentSlope = getSlope(aGuessT, mX1, mX2);

            if (currentSlope === 0.0) {
              return aGuessT;
            }

            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
            aGuessT -= currentX / currentSlope;
          }

          return aGuessT;
        }

        function calcSampleValues() {
          for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
            mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
          }
        }

        function binarySubdivide(aX, aA, aB) {
          var currentX = void 0,
              currentT = void 0,
              i = 0;

          do {
            currentT = aA + (aB - aA) / 2.0;
            currentX = calcBezier(currentT, mX1, mX2) - aX;
            if (currentX > 0.0) {
              aB = currentT;
            } else {
              aA = currentT;
            }
          } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

          return currentT;
        }

        function getTForX(aX) {
          var intervalStart = 0.0,
              currentSample = 1,
              lastSample = kSplineTableSize - 1;

          for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
          }

          --currentSample;

          var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
              guessForT = intervalStart + dist * kSampleStepSize,
              initialSlope = getSlope(guessForT, mX1, mX2);

          if (initialSlope >= NEWTON_MIN_SLOPE) {
            return newtonRaphsonIterate(aX, guessForT);
          } else if (initialSlope === 0.0) {
            return guessForT;
          } else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
          }
        }

        var _precomputed = false;

        function precompute() {
          _precomputed = true;
          if (mX1 !== mY1 || mX2 !== mY2) {
            calcSampleValues();
          }
        }

        var f = function f(aX) {
          if (!_precomputed) {
            precompute();
          }
          if (mX1 === mY1 && mX2 === mY2) {
            return aX;
          }
          if (aX === 0) {
            return 0;
          }
          if (aX === 1) {
            return 1;
          }

          return calcBezier(getTForX(aX), mY1, mY2);
        };

        f.getControlPoints = function () {
          return [{
            x: mX1,
            y: mY1
          }, {
            x: mX2,
            y: mY2
          }];
        };

        var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";
        f.toString = function () {
          return str;
        };

        return f;
      }

      module.exports = generateCubicBezier;

      /***/
    },
    /* 75 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */
      /* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
         then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */

      var generateSpringRK4 = function () {
        function springAccelerationForState(state) {
          return -state.tension * state.x - state.friction * state.v;
        }

        function springEvaluateStateWithDerivative(initialState, dt, derivative) {
          var state = {
            x: initialState.x + derivative.dx * dt,
            v: initialState.v + derivative.dv * dt,
            tension: initialState.tension,
            friction: initialState.friction
          };

          return { dx: state.v, dv: springAccelerationForState(state) };
        }

        function springIntegrateState(state, dt) {
          var a = {
            dx: state.v,
            dv: springAccelerationForState(state)
          },
              b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
              c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
              d = springEvaluateStateWithDerivative(state, dt, c),
              dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
              dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);

          state.x = state.x + dxdt * dt;
          state.v = state.v + dvdt * dt;

          return state;
        }

        return function springRK4Factory(tension, friction, duration) {

          var initState = {
            x: -1,
            v: 0,
            tension: null,
            friction: null
          },
              path = [0],
              time_lapsed = 0,
              tolerance = 1 / 10000,
              DT = 16 / 1000,
              have_duration = void 0,
              dt = void 0,
              last_state = void 0;

          tension = parseFloat(tension) || 500;
          friction = parseFloat(friction) || 20;
          duration = duration || null;

          initState.tension = tension;
          initState.friction = friction;

          have_duration = duration !== null;

          /* Calculate the actual time it takes for this animation to complete with the provided conditions. */
          if (have_duration) {
            /* Run the simulation without a duration. */
            time_lapsed = springRK4Factory(tension, friction);
            /* Compute the adjusted time delta. */
            dt = time_lapsed / duration * DT;
          } else {
            dt = DT;
          }

          for (;;) {
            /* Next/step function .*/
            last_state = springIntegrateState(last_state || initState, dt);
            /* Store the position. */
            path.push(1 + last_state.x);
            time_lapsed += 16;
            /* If the change threshold is reached, break. */
            if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
              break;
            }
          }

          /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
             computed path and returns a snapshot of the position according to a given percentComplete. */
          return !have_duration ? time_lapsed : function (percentComplete) {
            return path[percentComplete * (path.length - 1) | 0];
          };
        };
      }();

      module.exports = generateSpringRK4;

      /***/
    },
    /* 76 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      function getEasedValue(type, start, end, percent, easingFn) {
        if (percent === 1) {
          return end;
        }

        var val = easingFn(start, end, percent);

        if (type == null) {
          return val;
        }

        if (type.roundValue || type.color) {
          val = Math.round(val);
        }

        if (type.min !== undefined) {
          val = Math.max(val, type.min);
        }

        if (type.max !== undefined) {
          val = Math.min(val, type.max);
        }

        return val;
      }

      function ease(startProp, endProp, percent, easingFn, propSpec) {
        var type = propSpec != null ? propSpec.type : null;

        if (percent < 0) {
          percent = 0;
        } else if (percent > 1) {
          percent = 1;
        }

        var start = void 0,
            end = void 0;

        if (startProp.pfValue != null || startProp.value != null) {
          start = startProp.pfValue != null ? startProp.pfValue : startProp.value;
        } else {
          start = startProp;
        }

        if (endProp.pfValue != null || endProp.value != null) {
          end = endProp.pfValue != null ? endProp.pfValue : endProp.value;
        } else {
          end = endProp;
        }

        if (is.number(start) && is.number(end)) {
          return getEasedValue(type, start, end, percent, easingFn);
        } else if (is.array(start) && is.array(end)) {
          var easedArr = [];

          for (var i = 0; i < end.length; i++) {
            var si = start[i];
            var ei = end[i];

            if (si != null && ei != null) {
              var val = getEasedValue(type, si, ei, percent, easingFn);

              easedArr.push(val);
            } else {
              easedArr.push(ei);
            }
          }

          return easedArr;
        }

        return undefined;
      }

      module.exports = ease;

      /***/
    },
    /* 77 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      function startAnimation(self, ani, now, isCore) {
        var isEles = !isCore;
        var ele = self;
        var ani_p = ani._private;
        var cy = isCore ? self : self.cy();
        var style = cy.style();

        if (isEles) {
          var pos = ele.position();

          ani_p.startPosition = ani_p.startPosition || {
            x: pos.x,
            y: pos.y
          };

          ani_p.startStyle = ani_p.startStyle || style.getAnimationStartStyle(ele, ani_p.style);
        }

        if (isCore) {
          var pan = cy._private.pan;

          ani_p.startPan = ani_p.startPan || {
            x: pan.x,
            y: pan.y
          };

          ani_p.startZoom = ani_p.startZoom != null ? ani_p.startZoom : cy._private.zoom;
        }

        ani_p.started = true;
        ani_p.startTime = now - ani_p.progress * ani_p.duration;
      }

      module.exports = startAnimation;

      /***/
    },
    /* 78 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var Emitter = __webpack_require__(11);
      var define = __webpack_require__(4);
      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var Selector = __webpack_require__(6);

      var emitterOptions = {
        qualifierCompare: function qualifierCompare(selector1, selector2) {
          if (selector1 == null || selector2 == null) {
            return selector1 == null && selector2 == null;
          } else {
            return selector1.sameText(selector2);
          }
        },
        eventMatches: function eventMatches(cy, listener, eventObj) {
          var selector = listener.qualifier;

          if (selector != null) {
            return cy !== eventObj.target && is.element(eventObj.target) && selector.matches(eventObj.target);
          }

          return true;
        },
        eventFields: function eventFields(cy) {
          return {
            cy: cy,
            target: cy
          };
        },
        callbackContext: function callbackContext(cy, listener, eventObj) {
          return listener.qualifier != null ? eventObj.target : cy;
        }
      };

      var argSelector = function argSelector(arg) {
        if (is.string(arg)) {
          return new Selector(arg);
        } else {
          return arg;
        }
      };

      var elesfn = {
        createEmitter: function createEmitter() {
          var _p = this._private;

          if (!_p.emitter) {
            _p.emitter = new Emitter(util.assign({
              context: this
            }, emitterOptions));
          }

          return this;
        },

        emitter: function emitter() {
          return this._private.emitter;
        },

        on: function on(events, selector, callback) {
          this.emitter().on(events, argSelector(selector), callback);

          return this;
        },

        removeListener: function removeListener(events, selector, callback) {
          this.emitter().removeListener(events, argSelector(selector), callback);

          return this;
        },

        one: function one(events, selector, callback) {
          this.emitter().one(events, argSelector(selector), callback);

          return this;
        },

        once: function once(events, selector, callback) {
          this.emitter().one(events, argSelector(selector), callback);

          return this;
        },

        emit: function emit(events, extraParams) {
          this.emitter().emit(events, extraParams);

          return this;
        }
      };

      define.eventAliasesOn(elesfn);

      module.exports = elesfn;

      /***/
    },
    /* 79 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var corefn = {

        png: function png(options) {
          var renderer = this._private.renderer;
          options = options || {};

          return renderer.png(options);
        },

        jpg: function jpg(options) {
          var renderer = this._private.renderer;
          options = options || {};

          options.bg = options.bg || '#fff';

          return renderer.jpg(options);
        }

      };

      corefn.jpeg = corefn.jpg;

      module.exports = corefn;

      /***/
    },
    /* 80 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);

      var corefn = {

        layout: function layout(options) {
          var cy = this;

          if (options == null) {
            util.error('Layout options must be specified to make a layout');
            return;
          }

          if (options.name == null) {
            util.error('A `name` must be specified to make a layout');
            return;
          }

          var name = options.name;
          var Layout = cy.extension('layout', name);

          if (Layout == null) {
            util.error('Can not apply layout: No such layout `' + name + '` found; did you include its JS file?');
            return;
          }

          var eles = void 0;
          if (is.string(options.eles)) {
            eles = cy.$(options.eles);
          } else {
            eles = options.eles != null ? options.eles : cy.$();
          }

          var layout = new Layout(util.extend({}, options, {
            cy: cy,
            eles: eles
          }));

          return layout;
        }

      };

      corefn.createLayout = corefn.makeLayout = corefn.layout;

      module.exports = corefn;

      /***/
    },
    /* 81 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var corefn = {
        notify: function notify(params) {
          var _p = this._private;

          if (_p.batchingNotify) {
            var bEles = _p.batchNotifyEles;
            var bTypes = _p.batchNotifyTypes;

            if (params.eles) {
              bEles.merge(params.eles);
            }

            if (!bTypes.ids[params.type]) {
              bTypes.push(params.type);
              bTypes.ids[params.type] = true;
            }

            return; // notifications are disabled during batching
          }

          if (!_p.notificationsEnabled) {
            return;
          } // exit on disabled

          var renderer = this.renderer();

          // exit if destroy() called on core or renderer in between frames #1499 #1528
          if (this.isDestroyed() || !renderer) {
            return;
          }

          renderer.notify(params);
        },

        notifications: function notifications(bool) {
          var p = this._private;

          if (bool === undefined) {
            return p.notificationsEnabled;
          } else {
            p.notificationsEnabled = bool ? true : false;
          }
        },

        noNotifications: function noNotifications(callback) {
          this.notifications(false);
          callback();
          this.notifications(true);
        },

        batching: function batching() {
          return this._private.batchCount > 0;
        },

        startBatch: function startBatch() {
          var _p = this._private;

          if (_p.batchCount == null) {
            _p.batchCount = 0;
          }

          if (_p.batchCount === 0) {
            _p.batchingStyle = _p.batchingNotify = true;
            _p.batchStyleEles = this.collection();
            _p.batchNotifyEles = this.collection();
            _p.batchNotifyTypes = [];
            _p.batchNotifyTypes.ids = {};
          }

          _p.batchCount++;

          return this;
        },

        endBatch: function endBatch() {
          var _p = this._private;

          _p.batchCount--;

          if (_p.batchCount === 0) {
            // update style for dirty eles
            _p.batchingStyle = false;
            _p.batchStyleEles.updateStyle();

            // notify the renderer of queued eles and event types
            _p.batchingNotify = false;
            this.notify({
              type: _p.batchNotifyTypes,
              eles: _p.batchNotifyEles
            });
          }

          return this;
        },

        batch: function batch(callback) {
          this.startBatch();
          callback();
          this.endBatch();

          return this;
        },

        // for backwards compatibility
        batchData: function batchData(map) {
          var cy = this;

          return this.batch(function () {
            var ids = Object.keys(map);

            for (var i = 0; i < ids.length; i++) {
              var id = ids[i];
              var data = map[id];
              var ele = cy.getElementById(id);

              ele.data(data);
            }
          });
        }
      };

      module.exports = corefn;

      /***/
    },
    /* 82 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var corefn = {

        renderTo: function renderTo(context, zoom, pan, pxRatio) {
          var r = this._private.renderer;

          r.renderTo(context, zoom, pan, pxRatio);
          return this;
        },

        renderer: function renderer() {
          return this._private.renderer;
        },

        forceRender: function forceRender() {
          this.notify({
            type: 'draw'
          });

          return this;
        },

        resize: function resize() {
          this.invalidateSize();

          this.notify({
            type: 'resize'
          });

          this.emit('resize');

          return this;
        },

        initRenderer: function initRenderer(options) {
          var cy = this;

          var RendererProto = cy.extension('renderer', options.name);
          if (RendererProto == null) {
            util.error('Can not initialise: No such renderer `%s` found; did you include its JS file?', options.name);
            return;
          }

          cy._private.renderer = new RendererProto(util.extend({}, options, { cy: cy }));

          this.notify({ type: 'init' });
        },

        destroyRenderer: function destroyRenderer() {
          var cy = this;

          cy.notify({ type: 'destroy' }); // destroy the renderer

          var domEle = cy.container();
          if (domEle) {
            domEle._cyreg = null;

            while (domEle.childNodes.length > 0) {
              domEle.removeChild(domEle.childNodes[0]);
            }
          }

          cy._private.renderer = null; // to be extra safe, remove the ref
        },

        onRender: function onRender(fn) {
          return this.on('render', fn);
        },

        offRender: function offRender(fn) {
          return this.off('render', fn);
        }

      };

      corefn.invalidateDimensions = corefn.resize;

      module.exports = corefn;

      /***/
    },
    /* 83 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Collection = __webpack_require__(7);

      var corefn = {

        // get a collection
        // - empty collection on no args
        // - collection of elements in the graph on selector arg
        // - guarantee a returned collection when elements or collection specified
        collection: function collection(eles, opts) {

          if (is.string(eles)) {
            return this.$(eles);
          } else if (is.elementOrCollection(eles)) {
            return eles.collection();
          } else if (is.array(eles)) {
            return new Collection(this, eles, opts);
          }

          return new Collection(this);
        },

        nodes: function nodes(selector) {
          var nodes = this.$(function (ele) {
            return ele.isNode();
          });

          if (selector) {
            return nodes.filter(selector);
          }

          return nodes;
        },

        edges: function edges(selector) {
          var edges = this.$(function (ele) {
            return ele.isEdge();
          });

          if (selector) {
            return edges.filter(selector);
          }

          return edges;
        },

        // search the graph like jQuery
        $: function $(selector) {
          var eles = this._private.elements;

          if (selector) {
            return eles.filter(selector);
          } else {
            return eles.spawnSelf();
          }
        },

        mutableElements: function mutableElements() {
          return this._private.elements;
        }

      };

      // aliases
      corefn.elements = corefn.filter = corefn.$;

      module.exports = corefn;

      /***/
    },
    /* 84 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var Style = __webpack_require__(18);

      var corefn = {

        style: function style(newStyle) {
          if (newStyle) {
            var s = this.setStyle(newStyle);

            s.update();
          }

          return this._private.style;
        },

        setStyle: function setStyle(style) {
          var _p = this._private;

          if (is.stylesheet(style)) {
            _p.style = style.generateStyle(this);
          } else if (is.array(style)) {
            _p.style = Style.fromJson(this, style);
          } else if (is.string(style)) {
            _p.style = Style.fromString(this, style);
          } else {
            _p.style = Style(this);
          }

          return _p.style;
        }
      };

      module.exports = corefn;

      /***/
    },
    /* 85 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var Promise = __webpack_require__(5);

      var styfn = {};

      // (potentially expensive calculation)
      // apply the style to the element based on
      // - its bypass
      // - what selectors match it
      styfn.apply = function (eles) {
        var self = this;
        var _p = self._private;
        var cy = _p.cy;
        var updatedEles = cy.collection();

        if (_p.newStyle) {
          // clear style caches
          _p.contextStyles = {};
          _p.propDiffs = {};

          self.cleanElements(eles, true);
        }

        for (var ie = 0; ie < eles.length; ie++) {
          var ele = eles[ie];

          var cxtMeta = self.getContextMeta(ele);

          if (cxtMeta.empty) {
            continue;
          } else {
            updatedEles.merge(ele);
          }

          var cxtStyle = self.getContextStyle(cxtMeta);
          var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

          if (!_p.newStyle) {
            self.updateTransitions(ele, app.diffProps);
          }

          self.updateStyleHints(ele);
        } // for elements

        _p.newStyle = false;

        return updatedEles;
      };

      styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
        var self = this;
        var cache = self._private.propDiffs = self._private.propDiffs || {};
        var dualCxtKey = oldCxtKey + '-' + newCxtKey;
        var cachedVal = cache[dualCxtKey];

        if (cachedVal) {
          return cachedVal;
        }

        var diffProps = [];
        var addedProp = {};

        for (var i = 0; i < self.length; i++) {
          var cxt = self[i];
          var oldHasCxt = oldCxtKey[i] === 't';
          var newHasCxt = newCxtKey[i] === 't';
          var cxtHasDiffed = oldHasCxt !== newHasCxt;
          var cxtHasMappedProps = cxt.mappedProperties.length > 0;

          if (cxtHasDiffed || cxtHasMappedProps) {
            var props = void 0;

            if (cxtHasDiffed && cxtHasMappedProps) {
              props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
            } else if (cxtHasDiffed) {
              props = cxt.properties; // need to check them all
            } else if (cxtHasMappedProps) {
              props = cxt.mappedProperties; // only need to check mapped
            }

            for (var j = 0; j < props.length; j++) {
              var prop = props[j];
              var name = prop.name;

              // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
              // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
              // is cached)
              var laterCxtOverrides = false;
              for (var k = i + 1; k < self.length; k++) {
                var laterCxt = self[k];
                var hasLaterCxt = newCxtKey[k] === 't';

                if (!hasLaterCxt) {
                  continue;
                } // can't override unless the context is active

                laterCxtOverrides = laterCxt.properties[prop.name] != null;

                if (laterCxtOverrides) {
                  break;
                } // exit early as long as one later context overrides
              }

              if (!addedProp[name] && !laterCxtOverrides) {
                addedProp[name] = true;
                diffProps.push(name);
              }
            } // for props
          } // if
        } // for contexts

        cache[dualCxtKey] = diffProps;
        return diffProps;
      };

      styfn.getContextMeta = function (ele) {
        var self = this;
        var cxtKey = '';
        var diffProps = void 0;
        var prevKey = ele._private.styleCxtKey || '';

        if (self._private.newStyle) {
          prevKey = ''; // since we need to apply all style if a fresh stylesheet
        }

        // get the cxt key
        for (var i = 0; i < self.length; i++) {
          var context = self[i];
          var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

          if (contextSelectorMatches) {
            cxtKey += 't';
          } else {
            cxtKey += 'f';
          }
        } // for context

        diffProps = self.getPropertiesDiff(prevKey, cxtKey);

        ele._private.styleCxtKey = cxtKey;

        return {
          key: cxtKey,
          diffPropNames: diffProps,
          empty: diffProps.length === 0
        };
      };

      // gets a computed ele style object based on matched contexts
      styfn.getContextStyle = function (cxtMeta) {
        var cxtKey = cxtMeta.key;
        var self = this;
        var cxtStyles = this._private.contextStyles = this._private.contextStyles || {};

        // if already computed style, returned cached copy
        if (cxtStyles[cxtKey]) {
          return cxtStyles[cxtKey];
        }

        var style = {
          _private: {
            key: cxtKey
          }
        };

        for (var i = 0; i < self.length; i++) {
          var cxt = self[i];
          var hasCxt = cxtKey[i] === 't';

          if (!hasCxt) {
            continue;
          }

          for (var j = 0; j < cxt.properties.length; j++) {
            var prop = cxt.properties[j];

            style[prop.name] = prop;
          }
        }

        cxtStyles[cxtKey] = style;
        return style;
      };

      styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
        var self = this;
        var diffProps = cxtMeta.diffPropNames;
        var retDiffProps = {};

        for (var i = 0; i < diffProps.length; i++) {
          var diffPropName = diffProps[i];
          var cxtProp = cxtStyle[diffPropName];
          var eleProp = ele.pstyle(diffPropName);

          if (!cxtProp) {
            // no context prop means delete
            if (!eleProp) {
              continue; // no existing prop means nothing needs to be removed
              // nb affects initial application on mapped values like control-point-distances
            } else if (eleProp.bypass) {
              cxtProp = { name: diffPropName, deleteBypassed: true };
            } else {
              cxtProp = { name: diffPropName, delete: true };
            }
          }

          // save cycles when the context prop doesn't need to be applied
          if (eleProp === cxtProp) {
            continue;
          }

          var retDiffProp = retDiffProps[diffPropName] = {
            prev: eleProp
          };

          self.applyParsedProperty(ele, cxtProp);

          retDiffProp.next = ele.pstyle(diffPropName);

          if (retDiffProp.next && retDiffProp.next.bypass) {
            retDiffProp.next = retDiffProp.next.bypassed;
          }
        }

        return {
          diffProps: retDiffProps
        };
      };

      styfn.updateStyleHints = function (ele) {
        var _p = ele._private;
        var self = this;

        if (ele.removed()) {
          return;
        }

        // set whether has pie or not; for greater efficiency
        var hasPie = false;
        if (_p.group === 'nodes') {
          for (var i = 1; i <= self.pieBackgroundN; i++) {
            // 1..N
            var _size = ele.pstyle('pie-' + i + '-background-size').value;

            if (_size > 0) {
              hasPie = true;
              break;
            }
          }
        }

        _p.hasPie = hasPie;

        var transform = ele.pstyle('text-transform').strValue;
        var content = ele.pstyle('label').strValue;
        var srcContent = ele.pstyle('source-label').strValue;
        var tgtContent = ele.pstyle('target-label').strValue;
        var fStyle = ele.pstyle('font-style').strValue;
        var size = ele.pstyle('font-size').pfValue + 'px';
        var family = ele.pstyle('font-family').strValue;
        // let letiant = style['font-letiant'].strValue;
        var weight = ele.pstyle('font-weight').strValue;
        var valign = ele.pstyle('text-valign').strValue;
        var halign = ele.pstyle('text-valign').strValue;
        var oWidth = ele.pstyle('text-outline-width').pfValue;
        var wrap = ele.pstyle('text-wrap').strValue;
        var wrapW = ele.pstyle('text-max-width').pfValue;
        var labelStyleKey = fStyle + '$' + size + '$' + family + '$' + weight + '$' + transform + '$' + valign + '$' + halign + '$' + oWidth + '$' + wrap + '$' + wrapW;
        _p.labelStyleKey = labelStyleKey;
        _p.sourceLabelKey = labelStyleKey + '$' + srcContent;
        _p.targetLabelKey = labelStyleKey + '$' + tgtContent;
        _p.labelKey = labelStyleKey + '$' + content;
        _p.fontKey = fStyle + '$' + weight + '$' + size + '$' + family;

        _p.styleKey = Date.now();
      };

      // apply a property to the style (for internal use)
      // returns whether application was successful
      //
      // now, this function flattens the property, and here's how:
      //
      // for parsedProp:{ bypass: true, deleteBypass: true }
      // no property is generated, instead the bypass property in the
      // element's style is replaced by what's pointed to by the `bypassed`
      // field in the bypass property (i.e. restoring the property the
      // bypass was overriding)
      //
      // for parsedProp:{ mapped: truthy }
      // the generated flattenedProp:{ mapping: prop }
      //
      // for parsedProp:{ bypass: true }
      // the generated flattenedProp:{ bypassed: parsedProp }
      styfn.applyParsedProperty = function (ele, parsedProp) {
        var self = this;
        var prop = parsedProp;
        var style = ele._private.style;
        var fieldVal = void 0,
            flatProp = void 0;
        var types = self.types;
        var type = self.properties[prop.name].type;
        var propIsBypass = prop.bypass;
        var origProp = style[prop.name];
        var origPropIsBypass = origProp && origProp.bypass;
        var _p = ele._private;
        var flatPropMapping = 'mapping';

        var checkZOrder = function checkZOrder() {
          self.checkZOrderTrigger(ele, prop.name, origProp ? origProp.value : null, prop.value);
        };

        // edges connected to compound nodes can not be haystacks
        if (parsedProp.name === 'curve-style' && parsedProp.value === 'haystack' && ele.isEdge() && (ele.isLoop() || ele.source().isParent() || ele.target().isParent())) {
          prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
        }

        if (prop.delete) {
          // delete the property and use the default value on falsey value
          style[prop.name] = undefined;

          checkZOrder();

          return true;
        }

        if (prop.deleteBypassed) {
          // delete the property that the
          if (!origProp) {
            checkZOrder();

            return true; // can't delete if no prop
          } else if (origProp.bypass) {
            // delete bypassed
            origProp.bypassed = undefined;

            checkZOrder();

            return true;
          } else {
            return false; // we're unsuccessful deleting the bypassed
          }
        }

        // check if we need to delete the current bypass
        if (prop.deleteBypass) {
          // then this property is just here to indicate we need to delete
          if (!origProp) {
            checkZOrder();

            return true; // property is already not defined
          } else if (origProp.bypass) {
            // then replace the bypass property with the original
            // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
            style[prop.name] = origProp.bypassed;

            checkZOrder();

            return true;
          } else {
            return false; // we're unsuccessful deleting the bypass
          }
        }

        var printMappingErr = function printMappingErr() {
          util.error('Do not assign mappings to elements without corresponding data (e.g. ele `' + ele.id() + '` for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
        };

        // put the property in the style objects
        switch (prop.mapped) {// flatten the property if mapped
          case types.mapData:
            {
              // flatten the field (e.g. data.foo.bar)
              var fields = prop.field.split('.');
              var _fieldVal = _p.data;

              for (var i = 0; i < fields.length && _fieldVal; i++) {
                var field = fields[i];
                _fieldVal = _fieldVal[field];
              }

              var percent = void 0;
              if (!is.number(_fieldVal)) {
                // then keep the mapping but assume 0% for now
                percent = 0;
              } else {
                percent = (_fieldVal - prop.fieldMin) / (prop.fieldMax - prop.fieldMin);
              }

              // make sure to bound percent value
              if (percent < 0) {
                percent = 0;
              } else if (percent > 1) {
                percent = 1;
              }

              if (type.color) {
                var r1 = prop.valueMin[0];
                var r2 = prop.valueMax[0];
                var g1 = prop.valueMin[1];
                var g2 = prop.valueMax[1];
                var b1 = prop.valueMin[2];
                var b2 = prop.valueMax[2];
                var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
                var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];

                var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];

                flatProp = { // colours are simple, so just create the flat property instead of expensive string parsing
                  bypass: prop.bypass, // we're a bypass if the mapping property is a bypass
                  name: prop.name,
                  value: clr,
                  strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
                };
              } else if (type.number) {
                var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
                flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
              } else {
                return false; // can only map to colours and numbers
              }

              if (!flatProp) {
                // if we can't flatten the property, then use the origProp so we still keep the mapping itself
                flatProp = this.parse(prop.name, origProp.strValue, prop.bypass, flatPropMapping);
              }

              if (!flatProp) {
                printMappingErr();
              }
              flatProp.mapping = prop; // keep a reference to the mapping
              prop = flatProp; // the flattened (mapped) property is the one we want

              break;
            }

          // direct mapping
          case types.data:
            {
              // flatten the field (e.g. data.foo.bar)
              var _fields = prop.field.split('.');
              var _fieldVal2 = _p.data;

              if (_fieldVal2) {
                for (var _i = 0; _i < _fields.length; _i++) {
                  var _field = _fields[_i];
                  _fieldVal2 = _fieldVal2[_field];
                }
              }

              flatProp = this.parse(prop.name, _fieldVal2, prop.bypass, flatPropMapping);

              if (!flatProp) {
                // if we can't flatten the property, then use the origProp so we still keep the mapping itself
                var flatPropVal = origProp ? origProp.strValue : '';

                flatProp = this.parse(prop.name, flatPropVal, prop.bypass, flatPropMapping);
              }

              if (!flatProp) {
                printMappingErr();
              }
              flatProp.mapping = prop; // keep a reference to the mapping
              prop = flatProp; // the flattened (mapped) property is the one we want

              break;
            }

          case types.fn:
            {
              var fn = prop.value;
              var fnRetVal = fn(ele);

              flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);
              flatProp.mapping = prop; // keep a reference to the mapping
              prop = flatProp; // the flattened (mapped) property is the one we want

              break;
            }

          case undefined:
            break; // just set the property

          default:
            return false; // not a valid mapping
        }

        // if the property is a bypass property, then link the resultant property to the original one
        if (propIsBypass) {
          if (origPropIsBypass) {
            // then this bypass overrides the existing one
            prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
          } else {
            // then link the orig prop to the new bypass
            prop.bypassed = origProp;
          }

          style[prop.name] = prop; // and set
        } else {
          // prop is not bypass
          if (origPropIsBypass) {
            // then keep the orig prop (since it's a bypass) and link to the new prop
            origProp.bypassed = prop;
          } else {
            // then just replace the old prop with the new one
            style[prop.name] = prop;
          }
        }

        checkZOrder();

        return true;
      };

      styfn.cleanElements = function (eles, keepBypasses) {
        var self = this;
        var props = self.properties;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (!keepBypasses) {
            ele._private.style = {};
          } else {
            var style = ele._private.style;

            for (var j = 0; j < props.length; j++) {
              var prop = props[j];
              var eleProp = style[prop.name];

              if (eleProp) {
                if (eleProp.bypass) {
                  eleProp.bypassed = null;
                } else {
                  style[prop.name] = null;
                }
              }
            }
          }
        }
      };

      // updates the visual style for all elements (useful for manual style modification after init)
      styfn.update = function () {
        var cy = this._private.cy;
        var eles = cy.mutableElements();

        eles.updateStyle();
      };

      // just update the functional properties (i.e. mappings) in the elements'
      // styles (less expensive than recalculation)
      styfn.updateMappers = function (eles) {
        var self = this;
        var cy = this._private.cy;
        var updatedEles = cy.collection();

        for (var i = 0; i < eles.length; i++) {
          // for each ele
          var ele = eles[i];
          var style = ele._private.style;
          var updatedEle = false;

          for (var j = 0; j < self.properties.length; j++) {
            // for each prop
            var prop = self.properties[j];
            var propInStyle = style[prop.name];

            if (propInStyle && propInStyle.mapping) {
              var mapping = propInStyle.mapping;

              this.applyParsedProperty(ele, mapping); // reapply the mapping property

              updatedEle = true;
            }
          }

          if (updatedEle) {
            this.updateStyleHints(ele);

            updatedEles.merge(ele);
          }
        }

        return updatedEles;
      };

      // diffProps : { name => { prev, next } }
      styfn.updateTransitions = function (ele, diffProps, isBypass) {
        var self = this;
        var _p = ele._private;
        var props = ele.pstyle('transition-property').value;
        var duration = ele.pstyle('transition-duration').pfValue;
        var delay = ele.pstyle('transition-delay').pfValue;

        if (props.length > 0 && duration > 0) {

          var style = {};

          // build up the style to animate towards
          var anyPrev = false;
          for (var i = 0; i < props.length; i++) {
            var prop = props[i];
            var styProp = ele.pstyle(prop);
            var diffProp = diffProps[prop];

            if (!diffProp) {
              continue;
            }

            var prevProp = diffProp.prev;
            var fromProp = prevProp;
            var toProp = diffProp.next != null ? diffProp.next : styProp;
            var diff = false;
            var initVal = void 0;
            var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

            if (!fromProp) {
              continue;
            }

            // consider px values
            if (is.number(fromProp.pfValue) && is.number(toProp.pfValue)) {
              diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy
              initVal = fromProp.pfValue + initDt * diff;

              // consider numerical values
            } else if (is.number(fromProp.value) && is.number(toProp.value)) {
              diff = toProp.value - fromProp.value; // nonzero is truthy
              initVal = fromProp.value + initDt * diff;

              // consider colour values
            } else if (is.array(fromProp.value) && is.array(toProp.value)) {
              diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];

              initVal = fromProp.strValue;
            }

            // the previous value is good for an animation only if it's different
            if (diff) {
              style[prop] = toProp.strValue; // to val
              this.applyBypass(ele, prop, initVal); // from val
              anyPrev = true;
            }
          } // end if props allow ani

          // can't transition if there's nothing previous to transition from
          if (!anyPrev) {
            return;
          }

          _p.transitioning = true;

          new Promise(function (resolve) {
            if (delay > 0) {
              ele.delayAnimation(delay).play().promise().then(resolve);
            } else {
              resolve();
            }
          }).then(function () {
            return ele.animation({
              style: style,
              duration: duration,
              easing: ele.pstyle('transition-timing-function').value,
              queue: false
            }).play().promise();
          }).then(function () {
            // if( !isBypass ){
            self.removeBypasses(ele, props);
            ele.emitAndNotify('style');
            // }

            _p.transitioning = false;
          });
        } else if (_p.transitioning) {
          this.removeBypasses(ele, props);
          ele.emitAndNotify('style');

          _p.transitioning = false;
        }
      };

      styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
        var prop = this.properties[name];

        if (prop.triggersZOrder != null && (fromValue == null || prop.triggersZOrder(fromValue, toValue))) {
          this._private.cy.notify({
            type: 'zorder',
            eles: ele
          });
        }
      };

      module.exports = styfn;

      /***/
    },
    /* 86 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);

      var styfn = {};

      // bypasses are applied to an existing style on an element, and just tacked on temporarily
      // returns true iff application was successful for at least 1 specified property
      styfn.applyBypass = function (eles, name, value, updateTransitions) {
        var self = this;
        var props = [];
        var isBypass = true;

        // put all the properties (can specify one or many) in an array after parsing them
        if (name === '*' || name === '**') {
          // apply to all property names

          if (value !== undefined) {
            for (var i = 0; i < self.properties.length; i++) {
              var prop = self.properties[i];
              var _name = prop.name;

              var parsedProp = this.parse(_name, value, true);

              if (parsedProp) {
                props.push(parsedProp);
              }
            }
          }
        } else if (is.string(name)) {
          // then parse the single property
          var _parsedProp = this.parse(name, value, true);

          if (_parsedProp) {
            props.push(_parsedProp);
          }
        } else if (is.plainObject(name)) {
          // then parse each property
          var specifiedProps = name;
          updateTransitions = value;

          var names = Object.keys(specifiedProps);

          for (var _i = 0; _i < names.length; _i++) {
            var _name2 = names[_i];
            var _prop = self.properties[_name2];
            var _value = specifiedProps[_name2];

            if (_value === undefined) {
              // try camel case name too
              _value = specifiedProps[util.dash2camel(_name2)];
            }

            if (_value !== undefined) {
              var _parsedProp2 = this.parse(_name2, _value, true);

              if (_parsedProp2) {
                props.push(_parsedProp2);
              }
            }
          }
        } else {
          // can't do anything without well defined properties
          return false;
        }

        // we've failed if there are no valid properties
        if (props.length === 0) {
          return false;
        }

        // now, apply the bypass properties on the elements
        var ret = false; // return true if at least one succesful bypass applied
        for (var _i2 = 0; _i2 < eles.length; _i2++) {
          // for each ele
          var ele = eles[_i2];
          var diffProps = {};
          var diffProp = void 0;

          for (var j = 0; j < props.length; j++) {
            // for each prop
            var _prop2 = props[j];

            if (updateTransitions) {
              var prevProp = ele.pstyle(_prop2.name);
              diffProp = diffProps[_prop2.name] = { prev: prevProp };
            }

            ret = this.applyParsedProperty(ele, _prop2) || ret;

            if (updateTransitions) {
              diffProp.next = ele.pstyle(_prop2.name);
            }
          } // for props

          if (ret) {
            this.updateStyleHints(ele);
          }

          if (updateTransitions) {
            this.updateTransitions(ele, diffProps, isBypass);
          }
        } // for eles

        return ret;
      };

      // only useful in specific cases like animation
      styfn.overrideBypass = function (eles, name, value) {
        name = util.camel2dash(name);

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var prop = ele._private.style[name];
          var type = this.properties[name].type;
          var isColor = type.color;
          var isMulti = type.mutiple;

          if (!prop || !prop.bypass) {
            // need a bypass if one doesn't exist
            this.applyBypass(ele, name, value);
            continue;
          }

          var oldValue = prop.pfValue != null ? prop.pfValue : prop.value;

          prop.value = value;

          if (prop.pfValue != null) {
            prop.pfValue = value;
          }

          if (isColor) {
            prop.strValue = 'rgb(' + value.join(',') + ')';
          } else if (isMulti) {
            prop.strValue = value.join(' ');
          } else {
            prop.strValue = '' + value;
          }

          this.checkZOrderTrigger(ele, name, oldValue, value);
        }
      };

      styfn.removeAllBypasses = function (eles, updateTransitions) {
        return this.removeBypasses(eles, this.propertyNames, updateTransitions);
      };

      styfn.removeBypasses = function (eles, props, updateTransitions) {
        var isBypass = true;

        for (var j = 0; j < eles.length; j++) {
          var ele = eles[j];
          var diffProps = {};

          for (var i = 0; i < props.length; i++) {
            var name = props[i];
            var prop = this.properties[name];
            var prevProp = ele.pstyle(prop.name);

            if (!prevProp || !prevProp.bypass) {
              // if a bypass doesn't exist for the prop, nothing needs to be removed
              continue;
            }

            var value = ''; // empty => remove bypass
            var parsedProp = this.parse(name, value, true);
            var diffProp = diffProps[prop.name] = { prev: prevProp };

            this.applyParsedProperty(ele, parsedProp);

            diffProp.next = ele.pstyle(prop.name);
          } // for props

          this.updateStyleHints(ele);

          if (updateTransitions) {
            this.updateTransitions(ele, diffProps, isBypass);
          }
        } // for eles
      };

      module.exports = styfn;

      /***/
    },
    /* 87 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var window = __webpack_require__(3);

      var styfn = {};

      // gets what an em size corresponds to in pixels relative to a dom element
      styfn.getEmSizeInPixels = function () {
        var px = this.containerCss('font-size');

        if (px != null) {
          return parseFloat(px);
        } else {
          return 1; // for headless
        }
      };

      // gets css property from the core container
      styfn.containerCss = function (propName) {
        var cy = this._private.cy;
        var domElement = cy.container();

        if (window && domElement && window.getComputedStyle) {
          return window.getComputedStyle(domElement).getPropertyValue(propName);
        }
      };

      module.exports = styfn;

      /***/
    },
    /* 88 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);

      var styfn = {};

      // gets the rendered style for an element
      styfn.getRenderedStyle = function (ele, prop) {
        if (prop) {
          return this.getStylePropertyValue(ele, prop, true);
        } else {
          return this.getRawStyle(ele, true);
        }
      };

      // gets the raw style for an element
      styfn.getRawStyle = function (ele, isRenderedVal) {
        var self = this;

        ele = ele[0]; // insure it's an element

        if (ele) {
          var rstyle = {};

          for (var i = 0; i < self.properties.length; i++) {
            var prop = self.properties[i];
            var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

            if (val != null) {
              rstyle[prop.name] = val;
              rstyle[util.dash2camel(prop.name)] = val;
            }
          }

          return rstyle;
        }
      };

      styfn.getIndexedStyle = function (ele, property, subproperty, index) {
        var pstyle = ele.pstyle(property)[subproperty][index];
        return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
      };

      styfn.getStylePropertyValue = function (ele, propName, isRenderedVal) {
        var self = this;

        ele = ele[0]; // insure it's an element

        if (ele) {
          var prop = self.properties[propName];

          if (prop.alias) {
            prop = prop.pointsTo;
          }

          var type = prop.type;
          var styleProp = ele.pstyle(prop.name);
          var zoom = ele.cy().zoom();

          if (styleProp) {
            var units = styleProp.units ? type.implicitUnits || 'px' : null;
            var val = units ? [].concat(styleProp.pfValue).map(function (pfValue) {
              return pfValue * (isRenderedVal ? zoom : 1) + units;
            }).join(' ') : styleProp.strValue;

            return val;
          }
        }
      };

      styfn.getAnimationStartStyle = function (ele, aniProps) {
        var rstyle = {};

        for (var i = 0; i < aniProps.length; i++) {
          var aniProp = aniProps[i];
          var name = aniProp.name;

          var styleProp = ele.pstyle(name);

          if (styleProp !== undefined) {
            // then make a prop of it
            if (is.plainObject(styleProp)) {
              styleProp = this.parse(name, styleProp.strValue);
            } else {
              styleProp = this.parse(name, styleProp);
            }
          }

          if (styleProp) {
            rstyle[name] = styleProp;
          }
        }

        return rstyle;
      };

      styfn.getPropsList = function (propsObj) {
        var self = this;
        var rstyle = [];
        var style = propsObj;
        var props = self.properties;

        if (style) {
          var names = Object.keys(style);

          for (var i = 0; i < names.length; i++) {
            var name = names[i];
            var val = style[name];
            var prop = props[name] || props[util.camel2dash(name)];
            var styleProp = this.parse(prop.name, val);

            if (styleProp) {
              rstyle.push(styleProp);
            }
          }
        }

        return rstyle;
      };

      module.exports = styfn;

      /***/
    },
    /* 89 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var styfn = {};

      styfn.appendFromJson = function (json) {
        var style = this;

        for (var i = 0; i < json.length; i++) {
          var context = json[i];
          var selector = context.selector;
          var props = context.style || context.css;
          var names = Object.keys(props);

          style.selector(selector); // apply selector

          for (var j = 0; j < names.length; j++) {
            var name = names[j];
            var value = props[name];

            style.css(name, value); // apply property
          }
        }

        return style;
      };

      // accessible cy.style() function
      styfn.fromJson = function (json) {
        var style = this;

        style.resetToDefault();
        style.appendFromJson(json);

        return style;
      };

      // get json from cy.style() api
      styfn.json = function () {
        var json = [];

        for (var i = this.defaultLength; i < this.length; i++) {
          var cxt = this[i];
          var selector = cxt.selector;
          var props = cxt.properties;
          var css = {};

          for (var j = 0; j < props.length; j++) {
            var prop = props[j];
            css[prop.name] = prop.strValue;
          }

          json.push({
            selector: !selector ? 'core' : selector.toString(),
            style: css
          });
        }

        return json;
      };

      module.exports = styfn;

      /***/
    },
    /* 90 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var Selector = __webpack_require__(6);

      var styfn = {};

      styfn.appendFromString = function (string) {
        var self = this;
        var style = this;
        var remaining = '' + string;
        var selAndBlockStr = void 0;
        var blockRem = void 0;
        var propAndValStr = void 0;

        // remove comments from the style string
        remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

        function removeSelAndBlockFromRemaining() {
          // remove the parsed selector and block from the remaining text to parse
          if (remaining.length > selAndBlockStr.length) {
            remaining = remaining.substr(selAndBlockStr.length);
          } else {
            remaining = '';
          }
        }

        function removePropAndValFromRem() {
          // remove the parsed property and value from the remaining block text to parse
          if (blockRem.length > propAndValStr.length) {
            blockRem = blockRem.substr(propAndValStr.length);
          } else {
            blockRem = '';
          }
        }

        while (true) {
          var nothingLeftToParse = remaining.match(/^\s*$/);
          if (nothingLeftToParse) {
            break;
          }

          var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

          if (!selAndBlock) {
            util.error('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
            break;
          }

          selAndBlockStr = selAndBlock[0];

          // parse the selector
          var selectorStr = selAndBlock[1];
          if (selectorStr !== 'core') {
            var selector = new Selector(selectorStr);
            if (selector._private.invalid) {
              util.error('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr);

              // skip this selector and block
              removeSelAndBlockFromRemaining();
              continue;
            }
          }

          // parse the block of properties and values
          var blockStr = selAndBlock[2];
          var invalidBlock = false;
          blockRem = blockStr;
          var props = [];

          while (true) {
            var _nothingLeftToParse = blockRem.match(/^\s*$/);
            if (_nothingLeftToParse) {
              break;
            }

            var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

            if (!propAndVal) {
              util.error('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
              invalidBlock = true;
              break;
            }

            propAndValStr = propAndVal[0];
            var propStr = propAndVal[1];
            var valStr = propAndVal[2];

            var prop = self.properties[propStr];
            if (!prop) {
              util.error('Skipping property: Invalid property name in: ' + propAndValStr);

              // skip this property in the block
              removePropAndValFromRem();
              continue;
            }

            var parsedProp = style.parse(propStr, valStr);

            if (!parsedProp) {
              util.error('Skipping property: Invalid property definition in: ' + propAndValStr);

              // skip this property in the block
              removePropAndValFromRem();
              continue;
            }

            props.push({
              name: propStr,
              val: valStr
            });
            removePropAndValFromRem();
          }

          if (invalidBlock) {
            removeSelAndBlockFromRemaining();
            break;
          }

          // put the parsed block in the style
          style.selector(selectorStr);
          for (var i = 0; i < props.length; i++) {
            var _prop = props[i];
            style.css(_prop.name, _prop.val);
          }

          removeSelAndBlockFromRemaining();
        }

        return style;
      };

      styfn.fromString = function (string) {
        var style = this;

        style.resetToDefault();
        style.appendFromString(string);

        return style;
      };

      module.exports = styfn;

      /***/
    },
    /* 91 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);

      var styfn = {};

      (function () {
        var number = util.regex.number;
        var rgba = util.regex.rgbaNoBackRefs;
        var hsla = util.regex.hslaNoBackRefs;
        var hex3 = util.regex.hex3;
        var hex6 = util.regex.hex6;
        var data = function data(prefix) {
          return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
        };
        var mapData = function mapData(prefix) {
          var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3 + '|' + hex6;
          return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
        };
        var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$'];

        // each visual style property has a type and needs to be validated according to it
        styfn.types = {
          time: { number: true, min: 0, units: 's|ms', implicitUnits: 'ms' },
          percent: { number: true, min: 0, max: 100, units: '%', implicitUnits: '%' },
          zeroOneNumber: { number: true, min: 0, max: 1, unitless: true },
          zeroOneNumbers: { number: true, min: 0, max: 1, unitless: true, multiple: true },
          nOneOneNumber: { number: true, min: -1, max: 1, unitless: true },
          nonNegativeInt: { number: true, min: 0, integer: true, unitless: true },
          position: { enums: ['parent', 'origin'] },
          nodeSize: { number: true, min: 0, enums: ['label'] },
          number: { number: true, unitless: true },
          numbers: { number: true, unitless: true, multiple: true },
          positiveNumber: { number: true, unitless: true, min: 0, strictMin: true },
          size: { number: true, min: 0 },
          bidirectionalSize: { number: true }, // allows negative
          bidirectionalSizes: { number: true, multiple: true }, // allows negative
          sizeMaybePercent: { number: true, min: 0, allowPercent: true },
          paddingRelativeTo: { enums: ['width', 'height', 'average', 'min', 'max'] },
          bgWH: { number: true, min: 0, allowPercent: true, enums: ['auto'], multiple: true },
          bgPos: { number: true, allowPercent: true, multiple: true },
          bgRelativeTo: { enums: ['inner', 'include-padding'], multiple: true },
          bgRepeat: { enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'], multiple: true },
          bgFit: { enums: ['none', 'contain', 'cover'], multiple: true },
          bgCrossOrigin: { enums: ['anonymous', 'use-credentials'], multiple: true },
          bgClip: { enums: ['none', 'node'] },
          color: { color: true },
          bool: { enums: ['yes', 'no'] },
          lineStyle: { enums: ['solid', 'dotted', 'dashed'] },
          borderStyle: { enums: ['solid', 'dotted', 'dashed', 'double'] },
          curveStyle: { enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments'] },
          fontFamily: { regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$' },
          fontletiant: { enums: ['small-caps', 'normal'] },
          fontStyle: { enums: ['italic', 'normal', 'oblique'] },
          fontWeight: { enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900] },
          textDecoration: { enums: ['none', 'underline', 'overline', 'line-through'] },
          textTransform: { enums: ['none', 'uppercase', 'lowercase'] },
          textWrap: { enums: ['none', 'wrap', 'ellipsis'] },
          textBackgroundShape: { enums: ['rectangle', 'roundrectangle'] },
          nodeShape: { enums: ['rectangle', 'roundrectangle', 'cutrectangle', 'bottomroundrectangle', 'barrel', 'ellipse', 'triangle', 'square', 'pentagon', 'hexagon', 'concavehexagon', 'heptagon', 'octagon', 'tag', 'star', 'diamond', 'vee', 'rhomboid', 'polygon'] },
          compoundIncludeLabels: { enums: ['include', 'exclude'] },
          arrowShape: { enums: ['tee', 'triangle', 'triangle-tee', 'triangle-cross', 'triangle-backcurve', 'half-triangle-overshot', 'vee', 'square', 'circle', 'diamond', 'none'] },
          arrowFill: { enums: ['filled', 'hollow'] },
          display: { enums: ['element', 'none'] },
          visibility: { enums: ['hidden', 'visible'] },
          zCompoundDepth: { enums: ['bottom', 'orphan', 'auto', 'top'] },
          zIndexCompare: { enums: ['auto', 'manual'] },
          valign: { enums: ['top', 'center', 'bottom'] },
          halign: { enums: ['left', 'center', 'right'] },
          text: { string: true },
          data: { mapping: true, regex: data('data') },
          layoutData: { mapping: true, regex: data('layoutData') },
          scratch: { mapping: true, regex: data('scratch') },
          mapData: { mapping: true, regex: mapData('mapData') },
          mapLayoutData: { mapping: true, regex: mapData('mapLayoutData') },
          mapScratch: { mapping: true, regex: mapData('mapScratch') },
          fn: { mapping: true, fn: true },
          url: { regexes: urlRegexes, singleRegexMatchValue: true },
          urls: { regexes: urlRegexes, singleRegexMatchValue: true, multiple: true },
          propList: { propList: true },
          angle: { number: true, units: 'deg|rad', implicitUnits: 'rad' },
          textRotation: { number: true, units: 'deg|rad', implicitUnits: 'rad', enums: ['none', 'autorotate'] },
          polygonPointList: { number: true, multiple: true, evenMultiple: true, min: -1, max: 1, unitless: true },
          edgeDistances: { enums: ['intersection', 'node-position'] },
          edgeEndpoint: {
            number: true, multiple: true, units: '%|px|em|deg|rad', implicitUnits: 'px',
            enums: ['inside-to-node', 'outside-to-node', 'outside-to-line'], singleEnum: true,
            validate: function validate(valArr, unitsArr) {
              switch (valArr.length) {
                case 2:
                  // can be % or px only
                  return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';
                case 1:
                  // can be enum, deg, or rad only
                  return is.string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';
                default:
                  return false;
              }
            }
          },
          easing: {
            regexes: ['^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'],
            enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
          }
        };

        var zOrderDiff = {
          zeroNonZero: function zeroNonZero(val1, val2) {
            if (val1 === 0 && val2 !== 0) {
              return true;
            } else if (val1 !== 0 && val2 === 0) {
              return true;
            } else {
              return false;
            }
          },
          anyDiff: function anyDiff(val1, val2) {
            return val1 !== val2;
          }
        };

        var zd = zOrderDiff;

        // define visual style properties
        var t = styfn.types;
        var props = styfn.properties = [
        // main label
        { name: 'label', type: t.text }, { name: 'text-rotation', type: t.textRotation }, { name: 'text-margin-x', type: t.bidirectionalSize }, { name: 'text-margin-y', type: t.bidirectionalSize },

        // source label
        { name: 'source-label', type: t.text }, { name: 'source-text-rotation', type: t.textRotation }, { name: 'source-text-margin-x', type: t.bidirectionalSize }, { name: 'source-text-margin-y', type: t.bidirectionalSize }, { name: 'source-text-offset', type: t.size },

        // target label
        { name: 'target-label', type: t.text }, { name: 'target-text-rotation', type: t.textRotation }, { name: 'target-text-margin-x', type: t.bidirectionalSize }, { name: 'target-text-margin-y', type: t.bidirectionalSize }, { name: 'target-text-offset', type: t.size },

        // common label style
        { name: 'text-valign', type: t.valign }, { name: 'text-halign', type: t.halign }, { name: 'color', type: t.color }, { name: 'text-outline-color', type: t.color }, { name: 'text-outline-width', type: t.size }, { name: 'text-outline-opacity', type: t.zeroOneNumber }, { name: 'text-opacity', type: t.zeroOneNumber }, { name: 'text-background-color', type: t.color }, { name: 'text-background-opacity', type: t.zeroOneNumber }, { name: 'text-background-padding', type: t.size }, { name: 'text-border-opacity', type: t.zeroOneNumber }, { name: 'text-border-color', type: t.color }, { name: 'text-border-width', type: t.size }, { name: 'text-border-style', type: t.borderStyle }, { name: 'text-background-shape', type: t.textBackgroundShape },
        // { name: 'text-decoration', type: t.textDecoration }, // not supported in canvas
        { name: 'text-transform', type: t.textTransform }, { name: 'text-wrap', type: t.textWrap }, { name: 'text-max-width', type: t.size }, { name: 'text-events', type: t.bool }, { name: 'font-family', type: t.fontFamily }, { name: 'font-style', type: t.fontStyle },
        // { name: 'font-letiant', type: t.fontletiant }, // not useful
        { name: 'font-weight', type: t.fontWeight }, { name: 'font-size', type: t.size }, { name: 'min-zoomed-font-size', type: t.size },

        // behaviour
        { name: 'events', type: t.bool },

        // visibility
        { name: 'display', type: t.display, triggersZOrder: zd.anyDiff }, { name: 'visibility', type: t.visibility, triggersZOrder: zd.anyDiff }, { name: 'opacity', type: t.zeroOneNumber, triggersZOrder: zd.zeroNonZero }, { name: 'z-compound-depth', type: t.zCompoundDepth, triggersZOrder: zd.anyDiff }, { name: 'z-index-compare', type: t.zIndexCompare, triggersZOrder: zd.anyDiff }, { name: 'z-index', type: t.nonNegativeInt, triggersZOrder: zd.anyDiff },

        // overlays
        { name: 'overlay-padding', type: t.size }, { name: 'overlay-color', type: t.color }, { name: 'overlay-opacity', type: t.zeroOneNumber },

        // transition anis
        { name: 'transition-property', type: t.propList }, { name: 'transition-duration', type: t.time }, { name: 'transition-delay', type: t.time }, { name: 'transition-timing-function', type: t.easing },

        // node body
        { name: 'height', type: t.nodeSize }, { name: 'width', type: t.nodeSize }, { name: 'shape', type: t.nodeShape }, { name: 'shape-polygon-points', type: t.polygonPointList }, { name: 'background-color', type: t.color }, { name: 'background-opacity', type: t.zeroOneNumber }, { name: 'background-blacken', type: t.nOneOneNumber }, { name: 'padding', type: t.sizeMaybePercent }, { name: 'padding-relative-to', type: t.paddingRelativeTo },

        // node border
        { name: 'border-color', type: t.color }, { name: 'border-opacity', type: t.zeroOneNumber }, { name: 'border-width', type: t.size }, { name: 'border-style', type: t.borderStyle },

        // node background images
        { name: 'background-image', type: t.urls }, { name: 'background-image-crossorigin', type: t.bgCrossOrigin }, { name: 'background-image-opacity', type: t.zeroOneNumbers }, { name: 'background-position-x', type: t.bgPos }, { name: 'background-position-y', type: t.bgPos }, { name: 'background-width-relative-to', type: t.bgRelativeTo }, { name: 'background-height-relative-to', type: t.bgRelativeTo }, { name: 'background-repeat', type: t.bgRepeat }, { name: 'background-fit', type: t.bgFit }, { name: 'background-clip', type: t.bgClip }, { name: 'background-width', type: t.bgWH }, { name: 'background-height', type: t.bgWH },

        // compound props
        { name: 'position', type: t.position }, { name: 'compound-sizing-wrt-labels', type: t.compoundIncludeLabels }, { name: 'min-width', type: t.size }, { name: 'min-width-bias-left', type: t.sizeMaybePercent }, { name: 'min-width-bias-right', type: t.sizeMaybePercent }, { name: 'min-height', type: t.size }, { name: 'min-height-bias-top', type: t.sizeMaybePercent }, { name: 'min-height-bias-bottom', type: t.sizeMaybePercent },

        // edge line
        { name: 'line-style', type: t.lineStyle }, { name: 'line-color', type: t.color }, { name: 'curve-style', type: t.curveStyle }, { name: 'haystack-radius', type: t.zeroOneNumber }, { name: 'source-endpoint', type: t.edgeEndpoint }, { name: 'target-endpoint', type: t.edgeEndpoint }, { name: 'control-point-step-size', type: t.size }, { name: 'control-point-distances', type: t.bidirectionalSizes }, { name: 'control-point-weights', type: t.numbers }, { name: 'segment-distances', type: t.bidirectionalSizes }, { name: 'segment-weights', type: t.numbers }, { name: 'edge-distances', type: t.edgeDistances }, { name: 'arrow-scale', type: t.positiveNumber }, { name: 'loop-direction', type: t.angle }, { name: 'loop-sweep', type: t.angle }, { name: 'source-distance-from-node', type: t.size }, { name: 'target-distance-from-node', type: t.size },

        // ghost properties
        { name: 'ghost', type: t.bool }, { name: 'ghost-offset-x', type: t.bidirectionalSize }, { name: 'ghost-offset-y', type: t.bidirectionalSize }, { name: 'ghost-opacity', type: t.zeroOneNumber },

        // these are just for the core
        { name: 'selection-box-color', type: t.color }, { name: 'selection-box-opacity', type: t.zeroOneNumber }, { name: 'selection-box-border-color', type: t.color }, { name: 'selection-box-border-width', type: t.size }, { name: 'active-bg-color', type: t.color }, { name: 'active-bg-opacity', type: t.zeroOneNumber }, { name: 'active-bg-size', type: t.size }, { name: 'outside-texture-bg-color', type: t.color }, { name: 'outside-texture-bg-opacity', type: t.zeroOneNumber }];

        // define aliases
        var aliases = styfn.aliases = [{ name: 'content', pointsTo: 'label' }, { name: 'control-point-distance', pointsTo: 'control-point-distances' }, { name: 'control-point-weight', pointsTo: 'control-point-weights' }, { name: 'edge-text-rotation', pointsTo: 'text-rotation' }, { name: 'padding-left', pointsTo: 'padding' }, { name: 'padding-right', pointsTo: 'padding' }, { name: 'padding-top', pointsTo: 'padding' }, { name: 'padding-bottom', pointsTo: 'padding' }];

        // pie backgrounds for nodes
        styfn.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)
        props.push({ name: 'pie-size', type: t.sizeMaybePercent });
        for (var i = 1; i <= styfn.pieBackgroundN; i++) {
          props.push({ name: 'pie-' + i + '-background-color', type: t.color });
          props.push({ name: 'pie-' + i + '-background-size', type: t.percent });
          props.push({ name: 'pie-' + i + '-background-opacity', type: t.zeroOneNumber });
        }

        // edge arrows
        var arrowPrefixes = styfn.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
        [{ name: 'arrow-shape', type: t.arrowShape }, { name: 'arrow-color', type: t.color }, { name: 'arrow-fill', type: t.arrowFill }].forEach(function (prop) {
          arrowPrefixes.forEach(function (prefix) {
            var name = prefix + '-' + prop.name;
            var type = prop.type;

            props.push({ name: name, type: type });
          });
        }, {});

        // list of property names
        styfn.propertyNames = props.map(function (p) {
          return p.name;
        });

        // allow access of properties by name ( e.g. style.properties.height )
        for (var _i = 0; _i < props.length; _i++) {
          var prop = props[_i];

          props[prop.name] = prop; // allow lookup by name
        }

        // map aliases
        for (var _i2 = 0; _i2 < aliases.length; _i2++) {
          var alias = aliases[_i2];
          var pointsToProp = props[alias.pointsTo];
          var aliasProp = {
            name: alias.name,
            alias: true,
            pointsTo: pointsToProp
          };

          // add alias prop for parsing
          props.push(aliasProp);

          props[alias.name] = aliasProp; // allow lookup by name
        }
      })();

      styfn.getDefaultProperty = function (name) {
        return this.getDefaultProperties()[name];
      };

      styfn.getDefaultProperties = util.memoize(function () {
        var rawProps = util.extend({
          // common node/edge props
          'events': 'yes',
          'text-events': 'no',
          'text-valign': 'top',
          'text-halign': 'center',
          'color': '#000',
          'text-outline-color': '#000',
          'text-outline-width': 0,
          'text-outline-opacity': 1,
          'text-opacity': 1,
          'text-decoration': 'none',
          'text-transform': 'none',
          'text-wrap': 'none',
          'text-max-width': 9999,
          'text-background-color': '#000',
          'text-background-opacity': 0,
          'text-background-shape': 'rectangle',
          'text-background-padding': 0,
          'text-border-opacity': 0,
          'text-border-width': 0,
          'text-border-style': 'solid',
          'text-border-color': '#000',
          'font-family': 'Helvetica Neue, Helvetica, sans-serif',
          'font-style': 'normal',
          // 'font-letiant': fontletiant,
          'font-weight': 'normal',
          'font-size': 16,
          'min-zoomed-font-size': 0,
          'text-rotation': 'none',
          'source-text-rotation': 'none',
          'target-text-rotation': 'none',
          'visibility': 'visible',
          'display': 'element',
          'opacity': 1,
          'z-compound-depth': 'auto',
          'z-index-compare': 'auto',
          'z-index': 0,
          'label': '',
          'text-margin-x': 0,
          'text-margin-y': 0,
          'source-label': '',
          'source-text-offset': 0,
          'source-text-margin-x': 0,
          'source-text-margin-y': 0,
          'target-label': '',
          'target-text-offset': 0,
          'target-text-margin-x': 0,
          'target-text-margin-y': 0,
          'overlay-opacity': 0,
          'overlay-color': '#000',
          'overlay-padding': 10,
          'transition-property': 'none',
          'transition-duration': 0,
          'transition-delay': 0,
          'transition-timing-function': 'linear',

          // node props
          'background-blacken': 0,
          'background-color': '#999',
          'background-opacity': 1,
          'background-image': 'none',
          'background-image-crossorigin': 'anonymous',
          'background-image-opacity': 1,
          'background-position-x': '50%',
          'background-position-y': '50%',
          'background-width-relative-to': 'include-padding',
          'background-height-relative-to': 'include-padding',
          'background-repeat': 'no-repeat',
          'background-fit': 'none',
          'background-clip': 'node',
          'background-width': 'auto',
          'background-height': 'auto',
          'border-color': '#000',
          'border-opacity': 1,
          'border-width': 0,
          'border-style': 'solid',
          'height': 30,
          'width': 30,
          'shape': 'ellipse',
          'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',

          // ghost props
          'ghost': 'no',
          'ghost-offset-y': 0,
          'ghost-offset-x': 0,
          'ghost-opacity': 0,

          // compound props
          'padding': 0,
          'padding-relative-to': 'width',
          'position': 'origin',
          'compound-sizing-wrt-labels': 'include',
          'min-width': 0,
          'min-width-bias-left': 0,
          'min-width-bias-right': 0,
          'min-height': 0,
          'min-height-bias-top': 0,
          'min-height-bias-bottom': 0
        }, {
          // node pie bg
          'pie-size': '100%'
        }, [{ name: 'pie-{{i}}-background-color', value: 'black' }, { name: 'pie-{{i}}-background-size', value: '0%' }, { name: 'pie-{{i}}-background-opacity', value: 1 }].reduce(function (css, prop) {
          for (var i = 1; i <= styfn.pieBackgroundN; i++) {
            var name = prop.name.replace('{{i}}', i);
            var val = prop.value;

            css[name] = val;
          }

          return css;
        }, {}), {
          // edge props
          'line-style': 'solid',
          'line-color': '#999',
          'control-point-step-size': 40,
          'control-point-weights': 0.5,
          'segment-weights': 0.5,
          'segment-distances': 20,
          'edge-distances': 'intersection',
          'curve-style': 'bezier',
          'haystack-radius': 0,
          'arrow-scale': 1,
          'loop-direction': '-45deg',
          'loop-sweep': '-90deg',
          'source-distance-from-node': 0,
          'target-distance-from-node': 0,
          'source-endpoint': 'outside-to-node',
          'target-endpoint': 'outside-to-node'
        }, [{ name: 'arrow-shape', value: 'none' }, { name: 'arrow-color', value: '#999' }, { name: 'arrow-fill', value: 'filled' }].reduce(function (css, prop) {
          styfn.arrowPrefixes.forEach(function (prefix) {
            var name = prefix + '-' + prop.name;
            var val = prop.value;

            css[name] = val;
          });

          return css;
        }, {}));

        var parsedProps = {};

        for (var i = 0; i < this.properties.length; i++) {
          var prop = this.properties[i];

          if (prop.pointsTo) {
            continue;
          }

          var name = prop.name;
          var val = rawProps[name];
          var parsedProp = this.parse(name, val);

          parsedProps[name] = parsedProp;
        }

        return parsedProps;
      });

      styfn.addDefaultStylesheet = function () {
        this.selector('$node > node') // compound (parent) node properties
        .css({
          'shape': 'rectangle',
          'padding': 10,
          'background-color': '#eee',
          'border-color': '#ccc',
          'border-width': 1
        }).selector('edge') // just edge properties
        .css({
          'width': 3,
          'curve-style': 'haystack'
        }).selector(':parent <-> node').css({
          'curve-style': 'bezier',
          'source-endpoint': 'outside-to-line',
          'target-endpoint': 'outside-to-line'
        }).selector(':selected').css({
          'background-color': '#0169D9',
          'line-color': '#0169D9',
          'source-arrow-color': '#0169D9',
          'target-arrow-color': '#0169D9',
          'mid-source-arrow-color': '#0169D9',
          'mid-target-arrow-color': '#0169D9'
        }).selector('node:parent:selected').css({
          'background-color': '#CCE1F9',
          'border-color': '#aec8e5'
        }).selector(':active').css({
          'overlay-color': 'black',
          'overlay-padding': 10,
          'overlay-opacity': 0.25
        }).selector('core') // just core properties
        .css({
          'selection-box-color': '#ddd',
          'selection-box-opacity': 0.65,
          'selection-box-border-color': '#aaa',
          'selection-box-border-width': 1,
          'active-bg-color': 'black',
          'active-bg-opacity': 0.15,
          'active-bg-size': 30,
          'outside-texture-bg-color': '#000',
          'outside-texture-bg-opacity': 0.125
        });

        this.defaultLength = this.length;
      };

      module.exports = styfn;

      /***/
    },
    /* 92 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var math = __webpack_require__(2);

      var styfn = {};

      // a caching layer for property parsing
      styfn.parse = function (name, value, propIsBypass, propIsFlat) {
        var self = this;

        // function values can't be cached in all cases, and there isn't much benefit of caching them anyway
        if (is.fn(value)) {
          return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
        }

        var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
        var argHash = [name, value, propIsBypass, flatKey].join('$');
        var propCache = self.propCache = self.propCache || {};
        var ret = void 0;

        if (!(ret = propCache[argHash])) {
          ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
        }

        // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
        // - mappings can't be shared b/c mappings are per-element
        if (propIsBypass || propIsFlat === 'mapping') {
          // need a copy since props are mutated later in their lifecycles
          ret = util.copy(ret);

          if (ret) {
            ret.value = util.copy(ret.value); // because it could be an array, e.g. colour
          }
        }

        return ret;
      };

      styfn.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
        var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

        if (!prop && value != null) {
          util.error('The style property `%s: %s` is invalid', name, value);
        }

        return prop;
      };

      // parse a property; return null on invalid; return parsed property otherwise
      // fields :
      // - name : the name of the property
      // - value : the parsed, native-typed value of the property
      // - strValue : a string value that represents the property value in valid css
      // - bypass : true iff the property is a bypass property
      styfn.parseImpl = function (name, value, propIsBypass, propIsFlat) {
        var self = this;

        name = util.camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

        var property = self.properties[name];
        var passedValue = value;
        var types = self.types;

        if (!property) {
          return null;
        } // return null on property of unknown name
        if (value === undefined || value === null) {
          return null;
        } // can't assign null

        // the property may be an alias
        if (property.alias) {
          property = property.pointsTo;
          name = property.name;
        }

        var valueIsString = is.string(value);
        if (valueIsString) {
          // trim the value to make parsing easier
          value = value.trim();
        }

        var type = property.type;
        if (!type) {
          return null;
        } // no type, no luck

        // check if bypass is null or empty string (i.e. indication to delete bypass property)
        if (propIsBypass && (value === '' || value === null)) {
          return {
            name: name,
            value: value,
            bypass: true,
            deleteBypass: true
          };
        }

        // check if value is a function used as a mapper
        if (is.fn(value)) {
          return {
            name: name,
            value: value,
            strValue: 'fn',
            mapped: types.fn,
            bypass: propIsBypass
          };
        }

        // check if value is mapped
        var data = void 0,
            mapData = void 0;
        if (!valueIsString || propIsFlat) {
          // then don't bother to do the expensive regex checks

        } else if (data = new RegExp(types.data.regex).exec(value)) {
          if (propIsBypass) {
            return false;
          } // mappers not allowed in bypass

          var mapped = types.data;

          return {
            name: name,
            value: data,
            strValue: '' + value,
            mapped: mapped,
            field: data[1],
            bypass: propIsBypass
          };
        } else if (mapData = new RegExp(types.mapData.regex).exec(value)) {
          if (propIsBypass) {
            return false;
          } // mappers not allowed in bypass
          if (type.multiple) {
            return false;
          } // impossible to map to num

          var _mapped = types.mapData;

          // we can map only if the type is a colour or a number
          if (!(type.color || type.number)) {
            return false;
          }

          var valueMin = this.parse(name, mapData[4]); // parse to validate
          if (!valueMin || valueMin.mapped) {
            return false;
          } // can't be invalid or mapped

          var valueMax = this.parse(name, mapData[5]); // parse to validate
          if (!valueMax || valueMax.mapped) {
            return false;
          } // can't be invalid or mapped

          // check if valueMin and valueMax are the same
          if (valueMin.value === valueMax.value) {
            return false; // can't make much of a mapper without a range
          } else if (type.color) {
            var c1 = valueMin.value;
            var c2 = valueMax.value;

            var same = c1[0] === c2[0] // red
            && c1[1] === c2[1] // green
            && c1[2] === c2[2] // blue
            && ( // optional alpha
            c1[3] === c2[3] // same alpha outright
            || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
            c2[3] == null || c2[3] === 1) // full opacity for colour 2?
            );

            if (same) {
              return false;
            } // can't make a mapper without a range
          }

          return {
            name: name,
            value: mapData,
            strValue: '' + value,
            mapped: _mapped,
            field: mapData[1],
            fieldMin: parseFloat(mapData[2]), // min & max are numeric
            fieldMax: parseFloat(mapData[3]),
            valueMin: valueMin.value,
            valueMax: valueMax.value,
            bypass: propIsBypass
          };
        }

        if (type.multiple && propIsFlat !== 'multiple') {
          var vals = void 0;

          if (valueIsString) {
            vals = value.split(/\s+/);
          } else if (is.array(value)) {
            vals = value;
          } else {
            vals = [value];
          }

          if (type.evenMultiple && vals.length % 2 !== 0) {
            return null;
          }

          var valArr = [];
          var unitsArr = [];
          var pfValArr = [];
          var hasEnum = false;

          for (var i = 0; i < vals.length; i++) {
            var p = self.parse(name, vals[i], propIsBypass, 'multiple');

            hasEnum = hasEnum || is.string(p.value);

            valArr.push(p.value);
            pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
            unitsArr.push(p.units);
          }

          if (type.validate && !type.validate(valArr, unitsArr)) {
            return null;
          }

          if (type.singleEnum && hasEnum) {
            if (valArr.length === 1 && is.string(valArr[0])) {
              return {
                name: name,
                value: valArr[0],
                strValue: valArr[0],
                bypass: propIsBypass
              };
            } else {
              return null;
            }
          }

          return {
            name: name,
            value: valArr,
            pfValue: pfValArr,
            strValue: valArr.join(' '),
            bypass: propIsBypass,
            units: unitsArr
          };
        }

        // several types also allow enums
        var checkEnums = function checkEnums() {
          for (var _i = 0; _i < type.enums.length; _i++) {
            var en = type.enums[_i];

            if (en === value) {
              return {
                name: name,
                value: value,
                strValue: '' + value,
                bypass: propIsBypass
              };
            }
          }

          return null;
        };

        // check the type and return the appropriate object
        if (type.number) {
          var units = void 0;
          var implicitUnits = 'px'; // not set => px

          if (type.units) {
            // use specified units if set
            units = type.units;
          }

          if (type.implicitUnits) {
            implicitUnits = type.implicitUnits;
          }

          if (!type.unitless) {
            if (valueIsString) {
              var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');
              if (units) {
                unitsRegex = units;
              } // only allow explicit units if so set
              var match = value.match('^(' + util.regex.number + ')(' + unitsRegex + ')?' + '$');

              if (match) {
                value = match[1];
                units = match[2] || implicitUnits;
              }
            } else if (!units || type.implicitUnits) {
              units = implicitUnits; // implicitly px if unspecified
            }
          }

          value = parseFloat(value);

          // if not a number and enums not allowed, then the value is invalid
          if (isNaN(value) && type.enums === undefined) {
            return null;
          }

          // check if this number type also accepts special keywords in place of numbers
          // (i.e. `left`, `auto`, etc)
          if (isNaN(value) && type.enums !== undefined) {
            value = passedValue;

            return checkEnums();
          }

          // check if value must be an integer
          if (type.integer && !is.integer(value)) {
            return null;
          }

          // check value is within range
          if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
            return null;
          }

          var ret = {
            name: name,
            value: value,
            strValue: '' + value + (units ? units : ''),
            units: units,
            bypass: propIsBypass
          };

          // normalise value in pixels
          if (type.unitless || units !== 'px' && units !== 'em') {
            ret.pfValue = value;
          } else {
            ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
          }

          // normalise value in ms
          if (units === 'ms' || units === 's') {
            ret.pfValue = units === 'ms' ? value : 1000 * value;
          }

          // normalise value in rad
          if (units === 'deg' || units === 'rad') {
            ret.pfValue = units === 'rad' ? value : math.deg2rad(value);
          }

          // normalize value in %
          if (units === '%') {
            ret.pfValue = value / 100;
          }

          return ret;
        } else if (type.propList) {

          var props = [];
          var propsStr = '' + value;

          if (propsStr === 'none') {
            // leave empty

          } else {
            // go over each prop

            var propsSplit = propsStr.split(',');
            for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
              var propName = propsSplit[_i2].trim();

              if (self.properties[propName]) {
                props.push(propName);
              }
            }

            if (props.length === 0) {
              return null;
            }
          }

          return {
            name: name,
            value: props,
            strValue: props.length === 0 ? 'none' : props.join(', '),
            bypass: propIsBypass
          };
        } else if (type.color) {
          var tuple = util.color2tuple(value);

          if (!tuple) {
            return null;
          }

          return {
            name: name,
            value: tuple,
            pfValue: tuple,
            strValue: '' + value,
            bypass: propIsBypass
          };
        } else if (type.regex || type.regexes) {

          // first check enums
          if (type.enums) {
            var enumProp = checkEnums();

            if (enumProp) {
              return enumProp;
            }
          }

          var regexes = type.regexes ? type.regexes : [type.regex];

          for (var _i3 = 0; _i3 < regexes.length; _i3++) {
            var regex = new RegExp(regexes[_i3]); // make a regex from the type string
            var m = regex.exec(value);

            if (m) {
              // regex matches
              return {
                name: name,
                value: type.singleRegexMatchValue ? m[1] : m,
                strValue: '' + value,
                bypass: propIsBypass
              };
            }
          }

          return null; // didn't match any
        } else if (type.string) {
          // just return
          return {
            name: name,
            value: '' + value,
            strValue: '' + value,
            bypass: propIsBypass
          };
        } else if (type.enums) {
          // check enums last because it's a combo type in others
          return checkEnums();
        } else {
          return null; // not a type we can handle
        }
      };

      module.exports = styfn;

      /***/
    },
    /* 93 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var window = __webpack_require__(3);
      var math = __webpack_require__(2);

      var corefn = {

        autolock: function autolock(bool) {
          if (bool !== undefined) {
            this._private.autolock = bool ? true : false;
          } else {
            return this._private.autolock;
          }

          return this; // chaining
        },

        autoungrabify: function autoungrabify(bool) {
          if (bool !== undefined) {
            this._private.autoungrabify = bool ? true : false;
          } else {
            return this._private.autoungrabify;
          }

          return this; // chaining
        },

        autounselectify: function autounselectify(bool) {
          if (bool !== undefined) {
            this._private.autounselectify = bool ? true : false;
          } else {
            return this._private.autounselectify;
          }

          return this; // chaining
        },

        panningEnabled: function panningEnabled(bool) {
          if (bool !== undefined) {
            this._private.panningEnabled = bool ? true : false;
          } else {
            return this._private.panningEnabled;
          }

          return this; // chaining
        },

        userPanningEnabled: function userPanningEnabled(bool) {
          if (bool !== undefined) {
            this._private.userPanningEnabled = bool ? true : false;
          } else {
            return this._private.userPanningEnabled;
          }

          return this; // chaining
        },

        zoomingEnabled: function zoomingEnabled(bool) {
          if (bool !== undefined) {
            this._private.zoomingEnabled = bool ? true : false;
          } else {
            return this._private.zoomingEnabled;
          }

          return this; // chaining
        },

        userZoomingEnabled: function userZoomingEnabled(bool) {
          if (bool !== undefined) {
            this._private.userZoomingEnabled = bool ? true : false;
          } else {
            return this._private.userZoomingEnabled;
          }

          return this; // chaining
        },

        boxSelectionEnabled: function boxSelectionEnabled(bool) {
          if (bool !== undefined) {
            this._private.boxSelectionEnabled = bool ? true : false;
          } else {
            return this._private.boxSelectionEnabled;
          }

          return this; // chaining
        },

        pan: function pan() {
          var args = arguments;
          var pan = this._private.pan;
          var dim = void 0,
              val = void 0,
              dims = void 0,
              x = void 0,
              y = void 0;

          switch (args.length) {
            case 0:
              // .pan()
              return pan;

            case 1:

              if (is.string(args[0])) {
                // .pan('x')
                dim = args[0];
                return pan[dim];
              } else if (is.plainObject(args[0])) {
                // .pan({ x: 0, y: 100 })
                if (!this._private.panningEnabled) {
                  return this;
                }

                dims = args[0];
                x = dims.x;
                y = dims.y;

                if (is.number(x)) {
                  pan.x = x;
                }

                if (is.number(y)) {
                  pan.y = y;
                }

                this.emit('pan viewport');
              }
              break;

            case 2:
              // .pan('x', 100)
              if (!this._private.panningEnabled) {
                return this;
              }

              dim = args[0];
              val = args[1];

              if ((dim === 'x' || dim === 'y') && is.number(val)) {
                pan[dim] = val;
              }

              this.emit('pan viewport');
              break;

            default:
              break; // invalid
          }

          this.notify({ // notify the renderer that the viewport changed
            type: 'viewport'
          });

          return this; // chaining
        },

        panBy: function panBy(arg0, arg1) {
          var args = arguments;
          var pan = this._private.pan;
          var dim = void 0,
              val = void 0,
              dims = void 0,
              x = void 0,
              y = void 0;

          if (!this._private.panningEnabled) {
            return this;
          }

          switch (args.length) {
            case 1:

              if (is.plainObject(arg0)) {
                // .panBy({ x: 0, y: 100 })
                dims = args[0];
                x = dims.x;
                y = dims.y;

                if (is.number(x)) {
                  pan.x += x;
                }

                if (is.number(y)) {
                  pan.y += y;
                }

                this.emit('pan viewport');
              }
              break;

            case 2:
              // .panBy('x', 100)
              dim = arg0;
              val = arg1;

              if ((dim === 'x' || dim === 'y') && is.number(val)) {
                pan[dim] += val;
              }

              this.emit('pan viewport');
              break;

            default:
              break; // invalid
          }

          this.notify({ // notify the renderer that the viewport changed
            type: 'viewport'
          });

          return this; // chaining
        },

        fit: function fit(elements, padding) {
          var viewportState = this.getFitViewport(elements, padding);

          if (viewportState) {
            var _p = this._private;
            _p.zoom = viewportState.zoom;
            _p.pan = viewportState.pan;

            this.emit('pan zoom viewport');

            this.notify({ // notify the renderer that the viewport changed
              type: 'viewport'
            });
          }

          return this; // chaining
        },

        getFitViewport: function getFitViewport(elements, padding) {
          if (is.number(elements) && padding === undefined) {
            // elements is optional
            padding = elements;
            elements = undefined;
          }

          if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
            return;
          }

          var bb = void 0;

          if (is.string(elements)) {
            var sel = elements;
            elements = this.$(sel);
          } else if (is.boundingBox(elements)) {
            // assume bb
            var bbe = elements;
            bb = {
              x1: bbe.x1,
              y1: bbe.y1,
              x2: bbe.x2,
              y2: bbe.y2
            };

            bb.w = bb.x2 - bb.x1;
            bb.h = bb.y2 - bb.y1;
          } else if (!is.elementOrCollection(elements)) {
            elements = this.mutableElements();
          }

          if (is.elementOrCollection(elements) && elements.empty()) {
            return;
          } // can't fit to nothing

          bb = bb || elements.boundingBox();

          var w = this.width();
          var h = this.height();
          var zoom = void 0;
          padding = is.number(padding) ? padding : 0;

          if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
            zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h);

            // crop zoom
            zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
            zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;

            var pan = { // now pan to middle
              x: (w - zoom * (bb.x1 + bb.x2)) / 2,
              y: (h - zoom * (bb.y1 + bb.y2)) / 2
            };

            return {
              zoom: zoom,
              pan: pan
            };
          }

          return;
        },

        minZoom: function minZoom(zoom) {
          if (zoom === undefined) {
            return this._private.minZoom;
          } else if (is.number(zoom)) {
            this._private.minZoom = zoom;
          }

          return this;
        },

        maxZoom: function maxZoom(zoom) {
          if (zoom === undefined) {
            return this._private.maxZoom;
          } else if (is.number(zoom)) {
            this._private.maxZoom = zoom;
          }

          return this;
        },

        getZoomedViewport: function getZoomedViewport(params) {
          var _p = this._private;
          var currentPan = _p.pan;
          var currentZoom = _p.zoom;
          var pos = void 0; // in rendered px
          var zoom = void 0;
          var bail = false;

          if (!_p.zoomingEnabled) {
            // zooming disabled
            bail = true;
          }

          if (is.number(params)) {
            // then set the zoom
            zoom = params;
          } else if (is.plainObject(params)) {
            // then zoom about a point
            zoom = params.level;

            if (params.position != null) {
              pos = math.modelToRenderedPosition(params.position, currentZoom, currentPan);
            } else if (params.renderedPosition != null) {
              pos = params.renderedPosition;
            }

            if (pos != null && !_p.panningEnabled) {
              // panning disabled
              bail = true;
            }
          }

          // crop zoom
          zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
          zoom = zoom < _p.minZoom ? _p.minZoom : zoom;

          // can't zoom with invalid params
          if (bail || !is.number(zoom) || zoom === currentZoom || pos != null && (!is.number(pos.x) || !is.number(pos.y))) {
            return null;
          }

          if (pos != null) {
            // set zoom about position
            var pan1 = currentPan;
            var zoom1 = currentZoom;
            var zoom2 = zoom;

            var pan2 = {
              x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
              y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
            };

            return {
              zoomed: true,
              panned: true,
              zoom: zoom2,
              pan: pan2
            };
          } else {
            // just set the zoom
            return {
              zoomed: true,
              panned: false,
              zoom: zoom,
              pan: currentPan
            };
          }
        },

        zoom: function zoom(params) {
          if (params === undefined) {
            // get
            return this._private.zoom;
          } else {
            // set
            var vp = this.getZoomedViewport(params);
            var _p = this._private;

            if (vp == null || !vp.zoomed) {
              return this;
            }

            _p.zoom = vp.zoom;

            if (vp.panned) {
              _p.pan.x = vp.pan.x;
              _p.pan.y = vp.pan.y;
            }

            this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');

            this.notify({ // notify the renderer that the viewport changed
              type: 'viewport'
            });

            return this; // chaining
          }
        },

        viewport: function viewport(opts) {
          var _p = this._private;
          var zoomDefd = true;
          var panDefd = true;
          var events = []; // to trigger
          var zoomFailed = false;
          var panFailed = false;

          if (!opts) {
            return this;
          }
          if (!is.number(opts.zoom)) {
            zoomDefd = false;
          }
          if (!is.plainObject(opts.pan)) {
            panDefd = false;
          }
          if (!zoomDefd && !panDefd) {
            return this;
          }

          if (zoomDefd) {
            var z = opts.zoom;

            if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
              zoomFailed = true;
            } else {
              _p.zoom = z;

              events.push('zoom');
            }
          }

          if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
            var p = opts.pan;

            if (is.number(p.x)) {
              _p.pan.x = p.x;
              panFailed = false;
            }

            if (is.number(p.y)) {
              _p.pan.y = p.y;
              panFailed = false;
            }

            if (!panFailed) {
              events.push('pan');
            }
          }

          if (events.length > 0) {
            events.push('viewport');
            this.emit(events.join(' '));

            this.notify({
              type: 'viewport'
            });
          }

          return this; // chaining
        },

        center: function center(elements) {
          var pan = this.getCenterPan(elements);

          if (pan) {
            this._private.pan = pan;

            this.emit('pan viewport');

            this.notify({ // notify the renderer that the viewport changed
              type: 'viewport'
            });
          }

          return this; // chaining
        },

        getCenterPan: function getCenterPan(elements, zoom) {
          if (!this._private.panningEnabled) {
            return;
          }

          if (is.string(elements)) {
            var selector = elements;
            elements = this.mutableElements().filter(selector);
          } else if (!is.elementOrCollection(elements)) {
            elements = this.mutableElements();
          }

          if (elements.length === 0) {
            return;
          } // can't centre pan to nothing

          var bb = elements.boundingBox();
          var w = this.width();
          var h = this.height();
          zoom = zoom === undefined ? this._private.zoom : zoom;

          var pan = { // middle
            x: (w - zoom * (bb.x1 + bb.x2)) / 2,
            y: (h - zoom * (bb.y1 + bb.y2)) / 2
          };

          return pan;
        },

        reset: function reset() {
          if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
            return this;
          }

          this.viewport({
            pan: { x: 0, y: 0 },
            zoom: 1
          });

          return this; // chaining
        },

        invalidateSize: function invalidateSize() {
          this._private.sizeCache = null;
        },

        size: function size() {
          var _p = this._private;
          var container = _p.container;

          return _p.sizeCache = _p.sizeCache || (container ? function () {
            var style = window.getComputedStyle(container);
            var val = function val(name) {
              return parseFloat(style.getPropertyValue(name));
            };

            return {
              width: container.clientWidth - val('padding-left') - val('padding-right'),
              height: container.clientHeight - val('padding-top') - val('padding-bottom')
            };
          }() : { // fallback if no container (not 0 b/c can be used for dividing etc)
            width: 1,
            height: 1
          });
        },

        width: function width() {
          return this.size().width;
        },

        height: function height() {
          return this.size().height;
        },

        extent: function extent() {
          var pan = this._private.pan;
          var zoom = this._private.zoom;
          var rb = this.renderedExtent();

          var b = {
            x1: (rb.x1 - pan.x) / zoom,
            x2: (rb.x2 - pan.x) / zoom,
            y1: (rb.y1 - pan.y) / zoom,
            y2: (rb.y2 - pan.y) / zoom
          };

          b.w = b.x2 - b.x1;
          b.h = b.y2 - b.y1;

          return b;
        },

        renderedExtent: function renderedExtent() {
          var width = this.width();
          var height = this.height();

          return {
            x1: 0,
            y1: 0,
            x2: width,
            y2: height,
            w: width,
            h: height
          };
        }
      };

      // aliases
      corefn.centre = corefn.center;

      // backwards compatibility
      corefn.autolockNodes = corefn.autolock;
      corefn.autoungrabifyNodes = corefn.autoungrabify;

      module.exports = corefn;

      /***/
    },
    /* 94 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var define = __webpack_require__(4);
      var Collection = __webpack_require__(7);
      var Core = __webpack_require__(12);
      var incExts = __webpack_require__(95);
      var is = __webpack_require__(0);
      var Emitter = __webpack_require__(11);

      // registered extensions to cytoscape, indexed by name
      var extensions = {};

      // registered modules for extensions, indexed by name
      var modules = {};

      function setExtension(type, name, registrant) {

        var ext = registrant;

        var overrideErr = function overrideErr(field) {
          util.error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
        };

        if (type === 'core') {
          if (Core.prototype[name]) {
            return overrideErr(name);
          } else {
            Core.prototype[name] = registrant;
          }
        } else if (type === 'collection') {
          if (Collection.prototype[name]) {
            return overrideErr(name);
          } else {
            Collection.prototype[name] = registrant;
          }
        } else if (type === 'layout') {
          // fill in missing layout functions in the prototype

          var Layout = function Layout(options) {
            this.options = options;

            registrant.call(this, options);

            // make sure layout has _private for use w/ std apis like .on()
            if (!is.plainObject(this._private)) {
              this._private = {};
            }

            this._private.cy = options.cy;
            this._private.listeners = [];

            this.createEmitter();
          };

          var layoutProto = Layout.prototype = Object.create(registrant.prototype);

          var optLayoutFns = [];

          for (var i = 0; i < optLayoutFns.length; i++) {
            var fnName = optLayoutFns[i];

            layoutProto[fnName] = layoutProto[fnName] || function () {
              return this;
            };
          }

          // either .start() or .run() is defined, so autogen the other
          if (layoutProto.start && !layoutProto.run) {
            layoutProto.run = function () {
              this.start();return this;
            };
          } else if (!layoutProto.start && layoutProto.run) {
            layoutProto.start = function () {
              this.run();return this;
            };
          }

          var regStop = registrant.prototype.stop;
          layoutProto.stop = function () {
            var opts = this.options;

            if (opts && opts.animate) {
              var anis = this.animations;

              if (anis) {
                for (var _i = 0; _i < anis.length; _i++) {
                  anis[_i].stop();
                }
              }
            }

            if (regStop) {
              regStop.call(this);
            } else {
              this.emit('layoutstop');
            }

            return this;
          };

          if (!layoutProto.destroy) {
            layoutProto.destroy = function () {
              return this;
            };
          }

          layoutProto.cy = function () {
            return this._private.cy;
          };

          var getCy = function getCy(layout) {
            return layout._private.cy;
          };

          util.assign(layoutProto, {
            createEmitter: function createEmitter() {
              this._private.emitter = new Emitter({
                eventFields: function eventFields(layout) {
                  return {
                    layout: layout,
                    cy: getCy(layout),
                    target: layout
                  };
                },
                bubble: function bubble() {
                  return true;
                },
                parent: function parent(layout) {
                  return getCy(layout);
                },
                context: this
              });

              return this;
            },
            emitter: function emitter() {
              return this._private.emitter;
            },
            on: function on(evt, cb) {
              this.emitter().on(evt, cb);return this;
            },
            one: function one(evt, cb) {
              this.emitter().one(evt, cb);return this;
            },
            once: function once(evt, cb) {
              this.emitter().one(evt, cb);return this;
            },
            removeListener: function removeListener(evt, cb) {
              this.emitter().removeListener(evt, cb);return this;
            },
            emit: function emit(evt, params) {
              this.emitter().emit(evt, params);return this;
            }
          });

          define.eventAliasesOn(layoutProto);

          ext = Layout; // replace with our wrapped layout
        } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
          // user registered renderers inherit from base

          var BaseRenderer = getExtension('renderer', 'base');
          var bProto = BaseRenderer.prototype;
          var RegistrantRenderer = registrant;
          var rProto = registrant.prototype;

          var Renderer = function Renderer() {
            BaseRenderer.apply(this, arguments);
            RegistrantRenderer.apply(this, arguments);
          };

          var proto = Renderer.prototype;

          for (var pName in bProto) {
            var pVal = bProto[pName];
            var existsInR = rProto[pName] != null;

            if (existsInR) {
              return overrideErr(pName);
            }

            proto[pName] = pVal; // take impl from base
          }

          for (var _pName in rProto) {
            proto[_pName] = rProto[_pName]; // take impl from registrant
          }

          bProto.clientFunctions.forEach(function (name) {
            proto[name] = proto[name] || function () {
              util.error('Renderer does not implement `renderer.' + name + '()` on its prototype');
            };
          });

          ext = Renderer;
        }

        return util.setMap({
          map: extensions,
          keys: [type, name],
          value: ext
        });
      }

      function getExtension(type, name) {
        return util.getMap({
          map: extensions,
          keys: [type, name]
        });
      }

      function setModule(type, name, moduleType, moduleName, registrant) {
        return util.setMap({
          map: modules,
          keys: [type, name, moduleType, moduleName],
          value: registrant
        });
      }

      function getModule(type, name, moduleType, moduleName) {
        return util.getMap({
          map: modules,
          keys: [type, name, moduleType, moduleName]
        });
      }

      var extension = function extension() {
        // e.g. extension('renderer', 'svg')
        if (arguments.length === 2) {
          return getExtension.apply(null, arguments);
        }

        // e.g. extension('renderer', 'svg', { ... })
        else if (arguments.length === 3) {
            return setExtension.apply(null, arguments);
          }

          // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
          else if (arguments.length === 4) {
              return getModule.apply(null, arguments);
            }

            // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
            else if (arguments.length === 5) {
                return setModule.apply(null, arguments);
              } else {
                util.error('Invalid extension access syntax');
              }
      };

      // allows a core instance to access extensions internally
      Core.prototype.extension = extension;

      // included extensions
      incExts.forEach(function (group) {
        group.extensions.forEach(function (ext) {
          setExtension(group.type, ext.name, ext.impl);
        });
      });

      module.exports = extension;

      /***/
    },
    /* 95 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = [{
        type: 'layout',
        extensions: __webpack_require__(96)
      }, {
        type: 'renderer',
        extensions: __webpack_require__(105)
      }];

      /***/
    },
    /* 96 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = [{ name: 'breadthfirst', impl: __webpack_require__(97) }, { name: 'circle', impl: __webpack_require__(98) }, { name: 'concentric', impl: __webpack_require__(99) }, { name: 'cose', impl: __webpack_require__(100) }, { name: 'grid', impl: __webpack_require__(101) }, { name: 'null', impl: __webpack_require__(102) }, { name: 'preset', impl: __webpack_require__(103) }, { name: 'random', impl: __webpack_require__(104) }];

      /***/
    },
    /* 97 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);
      var is = __webpack_require__(0);

      var defaults = {
        fit: true, // whether to fit the viewport to the graph
        directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)
        padding: 30, // padding on fit
        circle: false, // put depths in concentric circles if true, put depths top down if false
        spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        roots: undefined, // the roots of the trees
        maximalAdjustments: 0, // how many times to try to position the nodes in a maximal way (i.e. no backtracking)
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled,
        animateFilter: function animateFilter(node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function transform(node, position) {
          return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts
      };

      function BreadthFirstLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      BreadthFirstLayout.prototype.run = function () {
        var params = this.options;
        var options = params;

        var cy = params.cy;
        var eles = options.eles;
        var nodes = eles.nodes().not(':parent');
        var graph = eles;

        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0, y1: 0, w: cy.width(), h: cy.height()
        });

        var roots = void 0;
        if (is.elementOrCollection(options.roots)) {
          roots = options.roots;
        } else if (is.array(options.roots)) {
          var rootsArray = [];

          for (var i = 0; i < options.roots.length; i++) {
            var id = options.roots[i];
            var ele = cy.getElementById(id);
            rootsArray.push(ele);
          }

          roots = cy.collection(rootsArray);
        } else if (is.string(options.roots)) {
          roots = cy.$(options.roots);
        } else {
          if (options.directed) {
            roots = nodes.roots();
          } else {
            var components = [];
            var unhandledNodes = nodes;

            var _loop = function _loop() {
              var currComp = cy.collection();

              eles.bfs({
                roots: unhandledNodes[0],
                visit: function visit(node, edge, pNode, i, depth) {
                  currComp = currComp.add(node);
                },
                directed: false
              });

              unhandledNodes = unhandledNodes.not(currComp);
              components.push(currComp);
            };

            while (unhandledNodes.length > 0) {
              _loop();
            }

            roots = cy.collection();

            var _loop2 = function _loop2(_i) {
              var comp = components[_i];
              var maxDegree = comp.maxDegree(false);
              var compRoots = comp.filter(function (ele) {
                return ele.degree(false) === maxDegree;
              });

              roots = roots.add(compRoots);
            };

            for (var _i = 0; _i < components.length; _i++) {
              _loop2(_i);
            }
          }
        }

        var depths = [];
        var foundByBfs = {};
        var id2depth = {};
        var prevNode = {};
        var prevEdge = {};
        var successors = {};

        // find the depths of the nodes
        graph.bfs({
          roots: roots,
          directed: options.directed,
          visit: function visit(node, edge, pNode, i, depth) {
            var ele = node[0];
            var id = ele.id();

            if (!depths[depth]) {
              depths[depth] = [];
            }

            depths[depth].push(ele);
            foundByBfs[id] = true;
            id2depth[id] = depth;
            prevNode[id] = pNode;
            prevEdge[id] = edge;

            if (pNode) {
              var prevId = pNode.id();
              var succ = successors[prevId] = successors[prevId] || [];

              succ.push(node);
            }
          }
        });

        // check for nodes not found by bfs
        var orphanNodes = [];
        for (var _i2 = 0; _i2 < nodes.length; _i2++) {
          var _ele = nodes[_i2];

          if (foundByBfs[_ele.id()]) {
            continue;
          } else {
            orphanNodes.push(_ele);
          }
        }

        // assign orphan nodes a depth from their neighborhood
        var maxChecks = orphanNodes.length * 3;
        var checks = 0;
        while (orphanNodes.length !== 0 && checks < maxChecks) {
          var node = orphanNodes.shift();
          var neighbors = node.neighborhood().nodes();
          var assignedDepth = false;

          for (var _i3 = 0; _i3 < neighbors.length; _i3++) {
            var depth = id2depth[neighbors[_i3].id()];

            if (depth !== undefined) {
              depths[depth].push(node);
              assignedDepth = true;
              break;
            }
          }

          if (!assignedDepth) {
            orphanNodes.push(node);
          }

          checks++;
        }

        // assign orphan nodes that are still left to the depth of their subgraph
        while (orphanNodes.length !== 0) {
          var _node = orphanNodes.shift();
          //let subgraph = graph.bfs( node ).path;
          var _assignedDepth = false;

          // for( let i = 0; i < subgraph.length; i++ ){
          //   let depth = id2depth[ subgraph[i].id() ];

          //   if( depth !== undefined ){
          //     depths[depth].push( node );
          //     assignedDepth = true;
          //     break;
          //   }
          // }

          if (!_assignedDepth) {
            // worst case if the graph really isn't tree friendly, then just dump it in 0
            if (depths.length === 0) {
              depths.push([]);
            }

            depths[0].push(_node);
          }
        }

        // assign the nodes a depth and index
        var assignDepthsToEles = function assignDepthsToEles() {
          for (var _i4 = 0; _i4 < depths.length; _i4++) {
            var _eles = depths[_i4];

            for (var j = 0; j < _eles.length; j++) {
              var _ele2 = _eles[j];

              if (_ele2 == null) {
                _eles.splice(j, 1);
                j--;
                continue;
              }

              _ele2._private.scratch.breadthfirst = {
                depth: _i4,
                index: j
              };
            }
          }
        };
        assignDepthsToEles();

        var intersectsDepth = function intersectsDepth(node) {
          // returns true if has edges pointing in from a higher depth
          var edges = node.connectedEdges(function (ele) {
            return ele.data('target') === node.id();
          });
          var thisInfo = node._private.scratch.breadthfirst;
          var highestDepthOfOther = 0;
          var highestOther = void 0;
          for (var _i5 = 0; _i5 < edges.length; _i5++) {
            var edge = edges[_i5];
            var otherNode = edge.source()[0];
            var otherInfo = otherNode._private.scratch.breadthfirst;

            if (thisInfo.depth <= otherInfo.depth && highestDepthOfOther < otherInfo.depth) {
              highestDepthOfOther = otherInfo.depth;
              highestOther = otherNode;
            }
          }

          return highestOther;
        };

        // make maximal if so set by adjusting depths
        for (var adj = 0; adj < options.maximalAdjustments; adj++) {

          var nDepths = depths.length;
          var elesToMove = [];
          for (var _i6 = 0; _i6 < nDepths; _i6++) {
            var _depth = depths[_i6];

            var nDepth = _depth.length;
            for (var j = 0; j < nDepth; j++) {
              var _ele3 = _depth[j];
              var info = _ele3._private.scratch.breadthfirst;
              var intEle = intersectsDepth(_ele3);

              if (intEle) {
                info.intEle = intEle;
                elesToMove.push(_ele3);
              }
            }
          }

          for (var _i7 = 0; _i7 < elesToMove.length; _i7++) {
            var _ele4 = elesToMove[_i7];
            var _info = _ele4._private.scratch.breadthfirst;
            var _intEle = _info.intEle;
            var intInfo = _intEle._private.scratch.breadthfirst;

            depths[_info.depth][_info.index] = null; // remove from old depth & index (create hole to be cleaned)

            // add to end of new depth
            var newDepth = intInfo.depth + 1;
            while (newDepth > depths.length - 1) {
              depths.push([]);
            }
            depths[newDepth].push(_ele4);

            _info.depth = newDepth;
            _info.index = depths[newDepth].length - 1;
          }

          assignDepthsToEles();
        }

        // find min distance we need to leave between nodes
        var minDistance = 0;
        if (options.avoidOverlap) {
          for (var _i8 = 0; _i8 < nodes.length; _i8++) {
            var n = nodes[_i8];
            var nbb = n.layoutDimensions(options);
            var w = nbb.w;
            var h = nbb.h;

            minDistance = Math.max(minDistance, w, h);
          }
        }

        // get the weighted percent for an element based on its connectivity to other levels
        var cachedWeightedPercent = {};
        var getWeightedPercent = function getWeightedPercent(ele) {
          if (cachedWeightedPercent[ele.id()]) {
            return cachedWeightedPercent[ele.id()];
          }

          var eleDepth = ele._private.scratch.breadthfirst.depth;
          var neighbors = ele.neighborhood().nodes().not(':parent').intersection(nodes);
          var percent = 0;
          var samples = 0;

          for (var _i9 = 0; _i9 < neighbors.length; _i9++) {
            var neighbor = neighbors[_i9];
            var bf = neighbor._private.scratch.breadthfirst;
            var index = bf.index;
            var _depth2 = bf.depth;
            var _nDepth = depths[_depth2].length;

            if (eleDepth > _depth2 || eleDepth === 0) {
              // only get influenced by elements above
              percent += index / _nDepth;
              samples++;
            }
          }

          samples = Math.max(1, samples);
          percent = percent / samples;

          if (samples === 0) {
            // so lone nodes have a "don't care" state in sorting
            percent = undefined;
          }

          cachedWeightedPercent[ele.id()] = percent;
          return percent;
        };

        // rearrange the indices in each depth level based on connectivity

        var sortFn = function sortFn(a, b) {
          var apct = getWeightedPercent(a);
          var bpct = getWeightedPercent(b);

          return apct - bpct;
        };

        for (var times = 0; times < 3; times++) {
          // do it a few times b/c the depths are dynamic and we want a more stable result

          for (var _i10 = 0; _i10 < depths.length; _i10++) {
            depths[_i10] = depths[_i10].sort(sortFn);
          }
          assignDepthsToEles(); // and update
        }

        var biggestDepthSize = 0;
        for (var _i11 = 0; _i11 < depths.length; _i11++) {
          biggestDepthSize = Math.max(depths[_i11].length, biggestDepthSize);
        }

        var center = {
          x: bb.x1 + bb.w / 2,
          y: bb.x1 + bb.h / 2
        };

        var getPosition = function getPosition(ele, isBottomDepth) {
          var info = ele._private.scratch.breadthfirst;
          var depth = info.depth;
          var index = info.index;
          var depthSize = depths[depth].length;

          var distanceX = Math.max(bb.w / (depthSize + 1), minDistance);
          var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
          var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
          radiusStepSize = Math.max(radiusStepSize, minDistance);

          if (!options.circle) {

            var epos = {
              x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
              y: (depth + 1) * distanceY
            };

            if (isBottomDepth) {
              return epos;
            }

            // let succs = successors[ ele.id() ];
            // if( succs ){
            //   epos.x = 0;
            //
            //   for( let i = 0 ; i < succs.length; i++ ){
            //     let spos = pos[ succs[i].id() ];
            //
            //     epos.x += spos.x;
            //   }
            //
            //   epos.x /= succs.length;
            // } else {
            //   //debugger;
            // }

            return epos;
          } else {
            if (options.circle) {
              var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
              var theta = 2 * Math.PI / depths[depth].length * index;

              if (depth === 0 && depths[0].length === 1) {
                radius = 1;
              }

              return {
                x: center.x + radius * Math.cos(theta),
                y: center.y + radius * Math.sin(theta)
              };
            } else {
              return {
                x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
                y: (depth + 1) * distanceY
              };
            }
          }
        };

        // get positions in reverse depth order
        var pos = {};
        for (var _i12 = depths.length - 1; _i12 >= 0; _i12--) {
          var _depth3 = depths[_i12];

          for (var _j = 0; _j < _depth3.length; _j++) {
            var _node2 = _depth3[_j];

            pos[_node2.id()] = getPosition(_node2, _i12 === depths.length - 1);
          }
        }

        nodes.layoutPositions(this, options, function (node) {
          return pos[node.id()];
        });

        return this; // chaining
      };

      module.exports = BreadthFirstLayout;

      /***/
    },
    /* 98 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);
      var is = __webpack_require__(0);

      var defaults = {
        fit: true, // whether to fit the viewport to the graph
        padding: 30, // the padding on fit
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
        radius: undefined, // the radius of the circle
        startAngle: 3 / 2 * Math.PI, // where nodes start in radians
        sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
        clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
        sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function animateFilter(node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function transform(node, position) {
          return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts 

      };

      function CircleLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      CircleLayout.prototype.run = function () {
        var params = this.options;
        var options = params;

        var cy = params.cy;
        var eles = options.eles;

        var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

        var nodes = eles.nodes().not(':parent');

        if (options.sort) {
          nodes = nodes.sort(options.sort);
        }

        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0, y1: 0, w: cy.width(), h: cy.height()
        });

        var center = {
          x: bb.x1 + bb.w / 2,
          y: bb.y1 + bb.h / 2
        };

        var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
        var dTheta = sweep / Math.max(1, nodes.length - 1);
        var r = void 0;

        var minDistance = 0;
        for (var i = 0; i < nodes.length; i++) {
          var n = nodes[i];
          var nbb = n.layoutDimensions(options);
          var w = nbb.w;
          var h = nbb.h;

          minDistance = Math.max(minDistance, w, h);
        }

        if (is.number(options.radius)) {
          r = options.radius;
        } else if (nodes.length <= 1) {
          r = 0;
        } else {
          r = Math.min(bb.h, bb.w) / 2 - minDistance;
        }

        // calculate the radius
        if (nodes.length > 1 && options.avoidOverlap) {
          // but only if more than one node (can't overlap)
          minDistance *= 1.75; // just to have some nice spacing

          var dcos = Math.cos(dTheta) - Math.cos(0);
          var dsin = Math.sin(dTheta) - Math.sin(0);
          var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping
          r = Math.max(rMin, r);
        }

        var getPos = function getPos(ele, i) {
          var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);

          var rx = r * Math.cos(theta);
          var ry = r * Math.sin(theta);
          var pos = {
            x: center.x + rx,
            y: center.y + ry
          };

          return pos;
        };

        nodes.layoutPositions(this, options, getPos);

        return this; // chaining
      };

      module.exports = CircleLayout;

      /***/
    },
    /* 99 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);

      var defaults = {
        fit: true, // whether to fit the viewport to the graph
        padding: 30, // the padding on fit
        startAngle: 3 / 2 * Math.PI, // where nodes start in radians
        sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)
        clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
        equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow
        minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        height: undefined, // height of layout area (overrides container height)
        width: undefined, // width of layout area (overrides container width)
        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
        concentric: function concentric(node) {
          // returns numeric value for each node, placing higher nodes in levels towards the centre
          return node.degree();
        },
        levelWidth: function levelWidth(nodes) {
          // the letiation of concentric values in each level
          return nodes.maxDegree() / 4;
        },
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function animateFilter(node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function transform(node, position) {
          return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts 
      };

      function ConcentricLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      ConcentricLayout.prototype.run = function () {
        var params = this.options;
        var options = params;

        var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;

        var cy = params.cy;

        var eles = options.eles;
        var nodes = eles.nodes().not(':parent');

        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0, y1: 0, w: cy.width(), h: cy.height()
        });

        var center = {
          x: bb.x1 + bb.w / 2,
          y: bb.y1 + bb.h / 2
        };

        var nodeValues = []; // { node, value }
        var theta = options.startAngle;
        var maxNodeSize = 0;

        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var value = void 0;

          // calculate the node value
          value = options.concentric(node);
          nodeValues.push({
            value: value,
            node: node
          });

          // for style mapping
          node._private.scratch.concentric = value;
        }

        // in case we used the `concentric` in style
        nodes.updateStyle();

        // calculate max size now based on potentially updated mappers
        for (var _i = 0; _i < nodes.length; _i++) {
          var _node = nodes[_i];
          var nbb = _node.layoutDimensions(options);

          maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
        }

        // sort node values in descreasing order
        nodeValues.sort(function (a, b) {
          return b.value - a.value;
        });

        var levelWidth = options.levelWidth(nodes);

        // put the values into levels
        var levels = [[]];
        var currentLevel = levels[0];
        for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
          var val = nodeValues[_i2];

          if (currentLevel.length > 0) {
            var diff = Math.abs(currentLevel[0].value - val.value);

            if (diff >= levelWidth) {
              currentLevel = [];
              levels.push(currentLevel);
            }
          }

          currentLevel.push(val);
        }

        // create positions from levels

        var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

        if (!options.avoidOverlap) {
          // then strictly constrain to bb
          var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
          var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
          var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);

          minDist = Math.min(minDist, rStep);
        }

        // find the metrics for each level
        var r = 0;
        for (var _i3 = 0; _i3 < levels.length; _i3++) {
          var level = levels[_i3];
          var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
          var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1);

          // calculate the radius
          if (level.length > 1 && options.avoidOverlap) {
            // but only if more than one node (can't overlap)
            var dcos = Math.cos(dTheta) - Math.cos(0);
            var dsin = Math.sin(dTheta) - Math.sin(0);
            var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

            r = Math.max(rMin, r);
          }

          level.r = r;

          r += minDist;
        }

        if (options.equidistant) {
          var rDeltaMax = 0;
          var _r = 0;

          for (var _i4 = 0; _i4 < levels.length; _i4++) {
            var _level = levels[_i4];
            var rDelta = _level.r - _r;

            rDeltaMax = Math.max(rDeltaMax, rDelta);
          }

          _r = 0;
          for (var _i5 = 0; _i5 < levels.length; _i5++) {
            var _level2 = levels[_i5];

            if (_i5 === 0) {
              _r = _level2.r;
            }

            _level2.r = _r;

            _r += rDeltaMax;
          }
        }

        // calculate the node positions
        var pos = {}; // id => position
        for (var _i6 = 0; _i6 < levels.length; _i6++) {
          var _level3 = levels[_i6];
          var _dTheta = _level3.dTheta;
          var _r2 = _level3.r;

          for (var j = 0; j < _level3.length; j++) {
            var _val = _level3[j];
            var _theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;

            var p = {
              x: center.x + _r2 * Math.cos(_theta),
              y: center.y + _r2 * Math.sin(_theta)
            };

            pos[_val.node.id()] = p;
          }
        }

        // position the nodes
        nodes.layoutPositions(this, options, function (ele) {
          var id = ele.id();

          return pos[id];
        });

        return this; // chaining
      };

      module.exports = ConcentricLayout;

      /***/
    },
    /* 100 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /*
      The CoSE layout was written by Gerardo Huck.
      https://www.linkedin.com/in/gerardohuck/
      
      Based on the following article:
      http://dl.acm.org/citation.cfm?id=1498047
      
      Modifications tracked on Github.
      */

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);
      var is = __webpack_require__(0);
      var Promise = __webpack_require__(5);

      var DEBUG;

      /**
       * @brief :  default layout options
       */
      var defaults = {
        // Called on `layoutready`
        ready: function ready() {},

        // Called on `layoutstop`
        stop: function stop() {},

        // Whether to animate while running the layout
        // true : Animate continuously as the layout is running
        // false : Just show the end result
        // 'end' : Animate with the end result, from the initial positions to the end positions
        animate: true,

        // Easing of the animation for animate:'end'
        animationEasing: undefined,

        // The duration of the animation for animate:'end'
        animationDuration: undefined,

        // A function that determines whether the node should be animated
        // All nodes animated by default on animate enabled
        // Non-animated nodes are positioned immediately when the layout starts
        animateFilter: function animateFilter(node, i) {
          return true;
        },

        // The layout animates only after this many milliseconds for animate:true
        // (prevents flashing on fast runs)
        animationThreshold: 250,

        // Number of iterations between consecutive screen positions update
        // (0 -> only updated on the end)
        refresh: 20,

        // Whether to fit the network view after when done
        fit: true,

        // Padding on fit
        padding: 30,

        // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        boundingBox: undefined,

        // Excludes the label when calculating node bounding boxes for the layout algorithm
        nodeDimensionsIncludeLabels: false,

        // Randomize the initial positions of the nodes (true) or use existing positions (false)
        randomize: false,

        // Extra spacing between components in non-compound graphs
        componentSpacing: 40,

        // Node repulsion (non overlapping) multiplier
        nodeRepulsion: function nodeRepulsion(node) {
          return 2048;
        },

        // Node repulsion (overlapping) multiplier
        nodeOverlap: 4,

        // Ideal edge (non nested) length
        idealEdgeLength: function idealEdgeLength(edge) {
          return 32;
        },

        // Divisor to compute edge forces
        edgeElasticity: function edgeElasticity(edge) {
          return 32;
        },

        // Nesting factor (multiplier) to compute ideal edge length for nested edges
        nestingFactor: 1.2,

        // Gravity force (constant)
        gravity: 1,

        // Maximum number of iterations to perform
        numIter: 1000,

        // Initial temperature (maximum node displacement)
        initialTemp: 1000,

        // Cooling factor (how the temperature is reduced between consecutive iterations
        coolingFactor: 0.99,

        // Lower temperature threshold (below this point the layout will end)
        minTemp: 1.0,

        // Pass a reference to weaver to use threads for calculations
        weaver: false
      };

      /**
       * @brief       : constructor
       * @arg options : object containing layout options
       */
      function CoseLayout(options) {
        this.options = util.extend({}, defaults, options);

        this.options.layout = this;
      }

      /**
       * @brief : runs the layout
       */
      CoseLayout.prototype.run = function () {
        var options = this.options;
        var cy = options.cy;
        var layout = this;
        var thread = this.thread;
        var Thread = options.weaver ? options.weaver.Thread : null;

        var falseThread = { // use false thread as polyfill
          listeners: [],
          on: function on(e, cb) {
            this.listeners.push({ event: e, callback: cb });

            return this;
          },
          trigger: function trigger(e) {
            if (is.string(e)) {
              e = { type: e };
            }

            var matchesEvent = function matchesEvent(l) {
              return l.event === e.type;
            };
            var trigger = function trigger(l) {
              l.callback(e);
            };

            this.listeners.filter(matchesEvent).forEach(trigger);

            return this;
          },
          pass: function pass(data) {
            this.pass = data;

            return this;
          },
          run: function run(cb) {
            var pass = this.pass;

            return new Promise(function (resolve) {
              resolve(cb(pass));
            });
          },
          stop: function stop() {
            return this;
          }
        };

        function broadcast(message) {
          // for false thread
          var e = { type: 'message', message: message };

          falseThread.trigger(e);
        }

        if (!thread || thread.stopped()) {
          thread = this.thread = Thread ? new Thread() : falseThread;
        }

        layout.stopped = false;

        if (options.animate === true || options.animate === false) {
          layout.emit({ type: 'layoutstart', layout: layout });
        }

        // Set DEBUG - Global variable
        if (true === options.debug) {
          DEBUG = true;
        } else {
          DEBUG = false;
        }

        // Initialize layout info
        var layoutInfo = createLayoutInfo(cy, layout, options);

        // Show LayoutInfo contents if debugging
        if (DEBUG) {
          printLayoutInfo(layoutInfo);
        }

        // If required, randomize node positions
        if (options.randomize) {
          randomizePositions(layoutInfo, cy);
        }

        var startTime = Date.now();
        var refreshRequested = false;
        var refresh = function refresh(rOpts) {
          rOpts = rOpts || {};

          if (refreshRequested && !rOpts.next) {
            return;
          }

          if (!rOpts.force && Date.now() - startTime < options.animationThreshold) {
            return;
          }

          refreshRequested = true;

          util.requestAnimationFrame(function () {
            refreshPositions(layoutInfo, cy, options);

            // Fit the graph if necessary
            if (true === options.fit) {
              cy.fit(options.padding);
            }

            refreshRequested = false;

            if (rOpts.next) {
              rOpts.next();
            }
          });
        };

        thread.on('message', function (e) {
          var layoutNodes = e.message;

          layoutInfo.layoutNodes = layoutNodes;
          refresh();
        });

        thread.pass({
          layoutInfo: layoutInfo,
          options: {
            animate: options.animate,
            refresh: options.refresh,
            componentSpacing: options.componentSpacing,
            nodeOverlap: options.nodeOverlap,
            nestingFactor: options.nestingFactor,
            gravity: options.gravity,
            numIter: options.numIter,
            initialTemp: options.initialTemp,
            coolingFactor: options.coolingFactor,
            minTemp: options.minTemp
          }
        }).run(function (pass) {
          var layoutInfo = pass.layoutInfo;
          var options = pass.options;
          var stopped = false;

          /**
           * @brief          : Performs one iteration of the physical simulation
           * @arg layoutInfo : LayoutInfo object already initialized
           * @arg cy         : Cytoscape object
           * @arg options    : Layout options
           */
          var step = function step(layoutInfo, options, _step) {
            // var s = "\n\n###############################";
            // s += "\nSTEP: " + step;
            // s += "\n###############################\n";
            // logDebug(s);

            // Calculate node repulsions
            calculateNodeForces(layoutInfo, options);
            // Calculate edge forces
            calculateEdgeForces(layoutInfo, options);
            // Calculate gravity forces
            calculateGravityForces(layoutInfo, options);
            // Propagate forces from parent to child
            propagateForces(layoutInfo, options);
            // Update positions based on calculated forces
            updatePositions(layoutInfo, options);
          };

          /**
           * @brief : Computes the node repulsion forces
           */
          var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
            // Go through each of the graphs in graphSet
            // Nodes only repel each other if they belong to the same graph
            // var s = 'calculateNodeForces';
            // logDebug(s);
            for (var i = 0; i < layoutInfo.graphSet.length; i++) {
              var graph = layoutInfo.graphSet[i];
              var numNodes = graph.length;

              // s = "Set: " + graph.toString();
              // logDebug(s);

              // Now get all the pairs of nodes
              // Only get each pair once, (A, B) = (B, A)
              for (var j = 0; j < numNodes; j++) {
                var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

                for (var k = j + 1; k < numNodes; k++) {
                  var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];

                  nodeRepulsion(node1, node2, layoutInfo, options);
                }
              }
            }
          };

          var randomDistance = function randomDistance(max) {
            return -max + 2 * max * Math.random();
          };

          /**
           * @brief : Compute the node repulsion forces between a pair of nodes
           */
          var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
            // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;

            var cmptId1 = node1.cmptId;
            var cmptId2 = node2.cmptId;

            if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
              return;
            }

            // Get direction of line connecting both node centers
            var directionX = node2.positionX - node1.positionX;
            var directionY = node2.positionY - node1.positionY;
            var maxRandDist = 1;
            // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;

            // If both centers are the same, apply a random force
            if (0 === directionX && 0 === directionY) {
              directionX = randomDistance(maxRandDist);
              directionY = randomDistance(maxRandDist);
            }

            var overlap = nodesOverlap(node1, node2, directionX, directionY);

            if (overlap > 0) {
              // s += "\nNodes DO overlap.";
              // s += "\nOverlap: " + overlap;
              // If nodes overlap, repulsion force is proportional
              // to the overlap
              var force = options.nodeOverlap * overlap;

              // Compute the module and components of the force vector
              var distance = Math.sqrt(directionX * directionX + directionY * directionY);
              // s += "\nDistance: " + distance;
              var forceX = force * directionX / distance;
              var forceY = force * directionY / distance;
            } else {
              // s += "\nNodes do NOT overlap.";
              // If there's no overlap, force is inversely proportional
              // to squared distance

              // Get clipping points for both nodes
              var point1 = findClippingPoint(node1, directionX, directionY);
              var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY);

              // Use clipping points to compute distance
              var distanceX = point2.x - point1.x;
              var distanceY = point2.y - point1.y;
              var distanceSqr = distanceX * distanceX + distanceY * distanceY;
              var distance = Math.sqrt(distanceSqr);
              // s += "\nDistance: " + distance;

              // Compute the module and components of the force vector
              var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
              var forceX = force * distanceX / distance;
              var forceY = force * distanceY / distance;
            }

            // Apply force
            if (!node1.isLocked) {
              node1.offsetX -= forceX;
              node1.offsetY -= forceY;
            }

            if (!node2.isLocked) {
              node2.offsetX += forceX;
              node2.offsetY += forceY;
            }

            // s += "\nForceX: " + forceX + " ForceY: " + forceY;
            // logDebug(s);

            return;
          };

          /**
           * @brief  : Determines whether two nodes overlap or not
           * @return : Amount of overlapping (0 => no overlap)
           */
          var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {

            if (dX > 0) {
              var overlapX = node1.maxX - node2.minX;
            } else {
              var overlapX = node2.maxX - node1.minX;
            }

            if (dY > 0) {
              var overlapY = node1.maxY - node2.minY;
            } else {
              var overlapY = node2.maxY - node1.minY;
            }

            if (overlapX >= 0 && overlapY >= 0) {
              return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
            } else {
              return 0;
            }
          };

          /**
           * @brief : Finds the point in which an edge (direction dX, dY) intersects
           *          the rectangular bounding box of it's source/target node
           */
          var findClippingPoint = function findClippingPoint(node, dX, dY) {

            // Shorcuts
            var X = node.positionX;
            var Y = node.positionY;
            var H = node.height || 1;
            var W = node.width || 1;
            var dirSlope = dY / dX;
            var nodeSlope = H / W;

            // var s = 'Computing clipping point of node ' + node.id +
            //   " . Height:  " + H + ", Width: " + W +
            //   "\nDirection " + dX + ", " + dY;
            //
            // Compute intersection
            var res = {};

            // Case: Vertical direction (up)
            if (0 === dX && 0 < dY) {
              res.x = X;
              // s += "\nUp direction";
              res.y = Y + H / 2;

              return res;
            }

            // Case: Vertical direction (down)
            if (0 === dX && 0 > dY) {
              res.x = X;
              res.y = Y + H / 2;
              // s += "\nDown direction";

              return res;
            }

            // Case: Intersects the right border
            if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
              res.x = X + W / 2;
              res.y = Y + W * dY / 2 / dX;
              // s += "\nRightborder";

              return res;
            }

            // Case: Intersects the left border
            if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
              res.x = X - W / 2;
              res.y = Y - W * dY / 2 / dX;
              // s += "\nLeftborder";

              return res;
            }

            // Case: Intersects the top border
            if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
              res.x = X + H * dX / 2 / dY;
              res.y = Y + H / 2;
              // s += "\nTop border";

              return res;
            }

            // Case: Intersects the bottom border
            if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
              res.x = X - H * dX / 2 / dY;
              res.y = Y - H / 2;
              // s += "\nBottom border";

              return res;
            }

            // s += "\nClipping point found at " + res.x + ", " + res.y;
            // logDebug(s);
            return res;
          };

          /**
           * @brief : Calculates all edge forces
           */
          var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
            // Iterate over all edges
            for (var i = 0; i < layoutInfo.edgeSize; i++) {
              // Get edge, source & target nodes
              var edge = layoutInfo.layoutEdges[i];
              var sourceIx = layoutInfo.idToIndex[edge.sourceId];
              var source = layoutInfo.layoutNodes[sourceIx];
              var targetIx = layoutInfo.idToIndex[edge.targetId];
              var target = layoutInfo.layoutNodes[targetIx];

              // Get direction of line connecting both node centers
              var directionX = target.positionX - source.positionX;
              var directionY = target.positionY - source.positionY;

              // If both centers are the same, do nothing.
              // A random force has already been applied as node repulsion
              if (0 === directionX && 0 === directionY) {
                continue;
              }

              // Get clipping points for both nodes
              var point1 = findClippingPoint(source, directionX, directionY);
              var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);

              var lx = point2.x - point1.x;
              var ly = point2.y - point1.y;
              var l = Math.sqrt(lx * lx + ly * ly);

              var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

              if (0 !== l) {
                var forceX = force * lx / l;
                var forceY = force * ly / l;
              } else {
                var forceX = 0;
                var forceY = 0;
              }

              // Add this force to target and source nodes
              if (!source.isLocked) {
                source.offsetX += forceX;
                source.offsetY += forceY;
              }

              if (!target.isLocked) {
                target.offsetX -= forceX;
                target.offsetY -= forceY;
              }

              // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
              // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
              // logDebug(s);
            }
          };

          /**
           * @brief : Computes gravity forces for all nodes
           */
          var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
            var distThreshold = 1;

            // var s = 'calculateGravityForces';
            // logDebug(s);
            for (var i = 0; i < layoutInfo.graphSet.length; i++) {
              var graph = layoutInfo.graphSet[i];
              var numNodes = graph.length;

              // s = "Set: " + graph.toString();
              // logDebug(s);

              // Compute graph center
              if (0 === i) {
                var centerX = layoutInfo.clientHeight / 2;
                var centerY = layoutInfo.clientWidth / 2;
              } else {
                // Get Parent node for this graph, and use its position as center
                var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
                var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
                var centerX = parent.positionX;
                var centerY = parent.positionY;
              }
              // s = "Center found at: " + centerX + ", " + centerY;
              // logDebug(s);

              // Apply force to all nodes in graph
              for (var j = 0; j < numNodes; j++) {
                var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];
                // s = "Node: " + node.id;

                if (node.isLocked) {
                  continue;
                }

                var dx = centerX - node.positionX;
                var dy = centerY - node.positionY;
                var d = Math.sqrt(dx * dx + dy * dy);
                if (d > distThreshold) {
                  var fx = options.gravity * dx / d;
                  var fy = options.gravity * dy / d;
                  node.offsetX += fx;
                  node.offsetY += fy;
                  // s += ": Applied force: " + fx + ", " + fy;
                } else {}
                // s += ": skypped since it's too close to center";

                // logDebug(s);
              }
            }
          };

          /**
           * @brief          : This function propagates the existing offsets from
           *                   parent nodes to its descendents.
           * @arg layoutInfo : layoutInfo Object
           * @arg cy         : cytoscape Object
           * @arg options    : Layout options
           */
          var propagateForces = function propagateForces(layoutInfo, options) {
            // Inline implementation of a queue, used for traversing the graph in BFS order
            var queue = [];
            var start = 0; // Points to the start the queue
            var end = -1; // Points to the end of the queue

            // logDebug('propagateForces');

            // Start by visiting the nodes in the root graph
            queue.push.apply(queue, layoutInfo.graphSet[0]);
            end += layoutInfo.graphSet[0].length;

            // Traverse the graph, level by level,
            while (start <= end) {
              // Get the node to visit and remove it from queue
              var nodeId = queue[start++];
              var nodeIndex = layoutInfo.idToIndex[nodeId];
              var node = layoutInfo.layoutNodes[nodeIndex];
              var children = node.children;

              // We only need to process the node if it's compound
              if (0 < children.length && !node.isLocked) {
                var offX = node.offsetX;
                var offY = node.offsetY;

                // var s = "Propagating offset from parent node : " + node.id +
                //   ". OffsetX: " + offX + ". OffsetY: " + offY;
                // s += "\n Children: " + children.toString();
                // logDebug(s);

                for (var i = 0; i < children.length; i++) {
                  var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]];
                  // Propagate offset
                  childNode.offsetX += offX;
                  childNode.offsetY += offY;
                  // Add children to queue to be visited
                  queue[++end] = children[i];
                }

                // Reset parent offsets
                node.offsetX = 0;
                node.offsetY = 0;
              }
            }
          };

          /**
           * @brief : Updates the layout model positions, based on
           *          the accumulated forces
           */
          var updatePositions = function updatePositions(layoutInfo, options) {
            // var s = 'Updating positions';
            // logDebug(s);

            // Reset boundaries for compound nodes
            for (var i = 0; i < layoutInfo.nodeSize; i++) {
              var n = layoutInfo.layoutNodes[i];
              if (0 < n.children.length) {
                // logDebug("Resetting boundaries of compound node: " + n.id);
                n.maxX = undefined;
                n.minX = undefined;
                n.maxY = undefined;
                n.minY = undefined;
              }
            }

            for (var i = 0; i < layoutInfo.nodeSize; i++) {
              var n = layoutInfo.layoutNodes[i];
              if (0 < n.children.length || n.isLocked) {
                // No need to set compound or locked node position
                // logDebug("Skipping position update of node: " + n.id);
                continue;
              }
              // s = "Node: " + n.id + " Previous position: (" +
              // n.positionX + ", " + n.positionY + ").";

              // Limit displacement in order to improve stability
              var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
              n.positionX += tempForce.x;
              n.positionY += tempForce.y;
              n.offsetX = 0;
              n.offsetY = 0;
              n.minX = n.positionX - n.width;
              n.maxX = n.positionX + n.width;
              n.minY = n.positionY - n.height;
              n.maxY = n.positionY + n.height;
              // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
              // logDebug(s);

              // Update ancestry boudaries
              updateAncestryBoundaries(n, layoutInfo);
            }

            // Update size, position of compund nodes
            for (var i = 0; i < layoutInfo.nodeSize; i++) {
              var n = layoutInfo.layoutNodes[i];
              if (0 < n.children.length && !n.isLocked) {
                n.positionX = (n.maxX + n.minX) / 2;
                n.positionY = (n.maxY + n.minY) / 2;
                n.width = n.maxX - n.minX;
                n.height = n.maxY - n.minY;
                // s = "Updating position, size of compound node " + n.id;
                // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
                // s += "\nWidth: " + n.width + ", Height: " + n.height;
                // logDebug(s);
              }
            }
          };

          /**
           * @brief : Limits a force (forceX, forceY) to be not
           *          greater (in modulo) than max.
           8          Preserves force direction.
           */
          var limitForce = function limitForce(forceX, forceY, max) {
            // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
            var force = Math.sqrt(forceX * forceX + forceY * forceY);

            if (force > max) {
              var res = {
                x: max * forceX / force,
                y: max * forceY / force
              };
            } else {
              var res = {
                x: forceX,
                y: forceY
              };
            }

            // s += ".\nResult: (" + res.x + ", " + res.y + ")";
            // logDebug(s);

            return res;
          };

          /**
           * @brief : Function used for keeping track of compound node
           *          sizes, since they should bound all their subnodes.
           */
          var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
            // var s = "Propagating new position/size of node " + node.id;
            var parentId = node.parentId;
            if (null == parentId) {
              // If there's no parent, we are done
              // s += ". No parent node.";
              // logDebug(s);
              return;
            }

            // Get Parent Node
            var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
            var flag = false;

            // MaxX
            if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
              p.maxX = node.maxX + p.padRight;
              flag = true;
              // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
            }

            // MinX
            if (null == p.minX || node.minX - p.padLeft < p.minX) {
              p.minX = node.minX - p.padLeft;
              flag = true;
              // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
            }

            // MaxY
            if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
              p.maxY = node.maxY + p.padBottom;
              flag = true;
              // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
            }

            // MinY
            if (null == p.minY || node.minY - p.padTop < p.minY) {
              p.minY = node.minY - p.padTop;
              flag = true;
              // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
            }

            // If updated boundaries, propagate changes upward
            if (flag) {
              // logDebug(s);
              return updateAncestryBoundaries(p, layoutInfo);
            }

            // s += ". No changes in boundaries/position of parent node " + p.id;
            // logDebug(s);
            return;
          };

          var separateComponents = function separateComponents(layutInfo, options) {
            var nodes = layoutInfo.layoutNodes;
            var components = [];

            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              var cid = node.cmptId;
              var component = components[cid] = components[cid] || [];

              component.push(node);
            }

            var totalA = 0;

            for (var i = 0; i < components.length; i++) {
              var c = components[i];

              if (!c) {
                continue;
              }

              c.x1 = Infinity;
              c.x2 = -Infinity;
              c.y1 = Infinity;
              c.y2 = -Infinity;

              for (var j = 0; j < c.length; j++) {
                var n = c[j];

                c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
                c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
                c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
                c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
              }

              c.w = c.x2 - c.x1;
              c.h = c.y2 - c.y1;

              totalA += c.w * c.h;
            }

            components.sort(function (c1, c2) {
              return c2.w * c2.h - c1.w * c1.h;
            });

            var x = 0;
            var y = 0;
            var usedW = 0;
            var rowH = 0;
            var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

            for (var i = 0; i < components.length; i++) {
              var c = components[i];

              if (!c) {
                continue;
              }

              for (var j = 0; j < c.length; j++) {
                var n = c[j];

                if (!n.isLocked) {
                  n.positionX += x;
                  n.positionY += y;
                }
              }

              x += c.w + options.componentSpacing;
              usedW += c.w + options.componentSpacing;
              rowH = Math.max(rowH, c.h);

              if (usedW > maxRowW) {
                y += rowH + options.componentSpacing;
                x = 0;
                usedW = 0;
                rowH = 0;
              }
            }
          };

          var mainLoop = function mainLoop(i) {
            if (stopped) {
              // logDebug("Layout manually stopped. Stopping computation in step " + i);
              return false;
            }

            // Do one step in the phisical simulation
            step(layoutInfo, options, i);

            // Update temperature
            layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor;
            // logDebug("New temperature: " + layoutInfo.temperature);

            if (layoutInfo.temperature < options.minTemp) {
              // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
              return false;
            }

            return true;
          };

          var i = 0;
          var loopRet;

          do {
            var f = 0;

            while (f < options.refresh && i < options.numIter) {
              var loopRet = mainLoop(i);
              if (!loopRet) {
                break;
              }

              f++;
              i++;
            }

            if (options.animate === true) {
              broadcast(layoutInfo.layoutNodes); // eslint-disable-line no-undef
            }
          } while (loopRet && i + 1 < options.numIter);

          separateComponents(layoutInfo, options);

          return layoutInfo;
        }).then(function (layoutInfoUpdated) {
          layoutInfo.layoutNodes = layoutInfoUpdated.layoutNodes; // get the positions

          thread.stop();
          done();
        });

        var done = function done() {
          if (options.animate === true || options.animate === false) {
            refresh({
              force: true,
              next: function next() {
                // Layout has finished
                layout.one('layoutstop', options.stop);
                layout.emit({ type: 'layoutstop', layout: layout });
              }
            });
          } else {
            options.eles.nodes().layoutPositions(layout, options, function (node) {
              var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];

              return { x: lnode.positionX, y: lnode.positionY };
            });
          }
        };

        return this; // chaining
      };

      /**
       * @brief : called on continuous layouts to stop them before they finish
       */
      CoseLayout.prototype.stop = function () {
        this.stopped = true;

        if (this.thread) {
          this.thread.stop();
        }

        this.emit('layoutstop');

        return this; // chaining
      };

      CoseLayout.prototype.destroy = function () {
        if (this.thread) {
          this.thread.stop();
        }

        return this; // chaining
      };

      /**
       * @brief     : Creates an object which is contains all the data
       *              used in the layout process
       * @arg cy    : cytoscape.js object
       * @return    : layoutInfo object initialized
       */
      var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
        // Shortcut
        var edges = options.eles.edges();
        var nodes = options.eles.nodes();

        var layoutInfo = {
          isCompound: cy.hasCompoundNodes(),
          layoutNodes: [],
          idToIndex: {},
          nodeSize: nodes.size(),
          graphSet: [],
          indexToGraph: [],
          layoutEdges: [],
          edgeSize: edges.size(),
          temperature: options.initialTemp,
          clientWidth: cy.width(),
          clientHeight: cy.width(),
          boundingBox: math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
            x1: 0, y1: 0, w: cy.width(), h: cy.height()
          })
        };

        var components = options.eles.components();
        var id2cmptId = {};

        for (var i = 0; i < components.length; i++) {
          var component = components[i];

          for (var j = 0; j < component.length; j++) {
            var node = component[j];

            id2cmptId[node.id()] = i;
          }
        }

        // Iterate over all nodes, creating layout nodes
        for (var i = 0; i < layoutInfo.nodeSize; i++) {
          var n = nodes[i];
          var nbb = n.layoutDimensions(options);

          var tempNode = {};
          tempNode.isLocked = n.locked();
          tempNode.id = n.data('id');
          tempNode.parentId = n.data('parent');
          tempNode.cmptId = id2cmptId[n.id()];
          tempNode.children = [];
          tempNode.positionX = n.position('x');
          tempNode.positionY = n.position('y');
          tempNode.offsetX = 0;
          tempNode.offsetY = 0;
          tempNode.height = nbb.w;
          tempNode.width = nbb.h;
          tempNode.maxX = tempNode.positionX + tempNode.width / 2;
          tempNode.minX = tempNode.positionX - tempNode.width / 2;
          tempNode.maxY = tempNode.positionY + tempNode.height / 2;
          tempNode.minY = tempNode.positionY - tempNode.height / 2;
          tempNode.padLeft = parseFloat(n.style('padding'));
          tempNode.padRight = parseFloat(n.style('padding'));
          tempNode.padTop = parseFloat(n.style('padding'));
          tempNode.padBottom = parseFloat(n.style('padding'));

          // forces
          tempNode.nodeRepulsion = is.fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion;

          // Add new node
          layoutInfo.layoutNodes.push(tempNode);
          // Add entry to id-index map
          layoutInfo.idToIndex[tempNode.id] = i;
        }

        // Inline implementation of a queue, used for traversing the graph in BFS order
        var queue = [];
        var start = 0; // Points to the start the queue
        var end = -1; // Points to the end of the queue

        var tempGraph = [];

        // Second pass to add child information and
        // initialize queue for hierarchical traversal
        for (var i = 0; i < layoutInfo.nodeSize; i++) {
          var n = layoutInfo.layoutNodes[i];
          var p_id = n.parentId;
          // Check if node n has a parent node
          if (null != p_id) {
            // Add node Id to parent's list of children
            layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
          } else {
            // If a node doesn't have a parent, then it's in the root graph
            queue[++end] = n.id;
            tempGraph.push(n.id);
          }
        }

        // Add root graph to graphSet
        layoutInfo.graphSet.push(tempGraph);

        // Traverse the graph, level by level,
        while (start <= end) {
          // Get the node to visit and remove it from queue
          var node_id = queue[start++];
          var node_ix = layoutInfo.idToIndex[node_id];
          var node = layoutInfo.layoutNodes[node_ix];
          var children = node.children;
          if (children.length > 0) {
            // Add children nodes as a new graph to graph set
            layoutInfo.graphSet.push(children);
            // Add children to que queue to be visited
            for (var i = 0; i < children.length; i++) {
              queue[++end] = children[i];
            }
          }
        }

        // Create indexToGraph map
        for (var i = 0; i < layoutInfo.graphSet.length; i++) {
          var graph = layoutInfo.graphSet[i];
          for (var j = 0; j < graph.length; j++) {
            var index = layoutInfo.idToIndex[graph[j]];
            layoutInfo.indexToGraph[index] = i;
          }
        }

        // Iterate over all edges, creating Layout Edges
        for (var i = 0; i < layoutInfo.edgeSize; i++) {
          var e = edges[i];
          var tempEdge = {};
          tempEdge.id = e.data('id');
          tempEdge.sourceId = e.data('source');
          tempEdge.targetId = e.data('target');

          // Compute ideal length
          var idealLength = is.fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
          var elasticity = is.fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity;

          // Check if it's an inter graph edge
          var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
          var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
          var sourceGraph = layoutInfo.indexToGraph[sourceIx];
          var targetGraph = layoutInfo.indexToGraph[targetIx];

          if (sourceGraph != targetGraph) {
            // Find lowest common graph ancestor
            var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo);

            // Compute sum of node depths, relative to lca graph
            var lcaGraph = layoutInfo.graphSet[lca];
            var depth = 0;

            // Source depth
            var tempNode = layoutInfo.layoutNodes[sourceIx];
            while (-1 === lcaGraph.indexOf(tempNode.id)) {
              tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
              depth++;
            }

            // Target depth
            tempNode = layoutInfo.layoutNodes[targetIx];
            while (-1 === lcaGraph.indexOf(tempNode.id)) {
              tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
              depth++;
            }

            // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
            //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
            //  ". Depth: " + depth);

            // Update idealLength
            idealLength *= depth * options.nestingFactor;
          }

          tempEdge.idealLength = idealLength;
          tempEdge.elasticity = elasticity;

          layoutInfo.layoutEdges.push(tempEdge);
        }

        // Finally, return layoutInfo object
        return layoutInfo;
      };

      /**
       * @brief : This function finds the index of the lowest common
       *          graph ancestor between 2 nodes in the subtree
       *          (from the graph hierarchy induced tree) whose
       *          root is graphIx
       *
       * @arg node1: node1's ID
       * @arg node2: node2's ID
       * @arg layoutInfo: layoutInfo object
       *
       */
      var findLCA = function findLCA(node1, node2, layoutInfo) {
        // Find their common ancester, starting from the root graph
        var res = findLCA_aux(node1, node2, 0, layoutInfo);
        if (2 > res.count) {
          // If aux function couldn't find the common ancester,
          // then it is the root graph
          return 0;
        } else {
          return res.graph;
        }
      };

      /**
       * @brief          : Auxiliary function used for LCA computation
       *
       * @arg node1      : node1's ID
       * @arg node2      : node2's ID
       * @arg graphIx    : subgraph index
       * @arg layoutInfo : layoutInfo object
       *
       * @return         : object of the form {count: X, graph: Y}, where:
       *                   X is the number of ancesters (max: 2) found in
       *                   graphIx (and it's subgraphs),
       *                   Y is the graph index of the lowest graph containing
       *                   all X nodes
       */
      var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
        var graph = layoutInfo.graphSet[graphIx];
        // If both nodes belongs to graphIx
        if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
          return { count: 2, graph: graphIx };
        }

        // Make recursive calls for all subgraphs
        var c = 0;
        for (var i = 0; i < graph.length; i++) {
          var nodeId = graph[i];
          var nodeIx = layoutInfo.idToIndex[nodeId];
          var children = layoutInfo.layoutNodes[nodeIx].children;

          // If the node has no child, skip it
          if (0 === children.length) {
            continue;
          }

          var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
          var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);
          if (0 === result.count) {
            // Neither node1 nor node2 are present in this subgraph
            continue;
          } else if (1 === result.count) {
            // One of (node1, node2) is present in this subgraph
            c++;
            if (2 === c) {
              // We've already found both nodes, no need to keep searching
              break;
            }
          } else {
            // Both nodes are present in this subgraph
            return result;
          }
        }

        return { count: c, graph: graphIx };
      };

      /**
       * @brief: printsLayoutInfo into js console
       *         Only used for debbuging
       */
      var printLayoutInfo = function printLayoutInfo(layoutInfo) {
        /* eslint-disable */

        if (!DEBUG) {
          return;
        }
        console.debug('layoutNodes:');
        for (var i = 0; i < layoutInfo.nodeSize; i++) {
          var n = layoutInfo.layoutNodes[i];
          var s = '\nindex: ' + i + '\nId: ' + n.id + '\nChildren: ' + n.children.toString() + '\nparentId: ' + n.parentId + '\npositionX: ' + n.positionX + '\npositionY: ' + n.positionY + '\nOffsetX: ' + n.offsetX + '\nOffsetY: ' + n.offsetY + '\npadLeft: ' + n.padLeft + '\npadRight: ' + n.padRight + '\npadTop: ' + n.padTop + '\npadBottom: ' + n.padBottom;

          console.debug(s);
        }

        console.debug('idToIndex');
        for (var i in layoutInfo.idToIndex) {
          console.debug('Id: ' + i + '\nIndex: ' + layoutInfo.idToIndex[i]);
        }

        console.debug('Graph Set');
        var set = layoutInfo.graphSet;
        for (var i = 0; i < set.length; i++) {
          console.debug('Set : ' + i + ': ' + set[i].toString());
        }

        var s = 'IndexToGraph';
        for (var i = 0; i < layoutInfo.indexToGraph.length; i++) {
          s += '\nIndex : ' + i + ' Graph: ' + layoutInfo.indexToGraph[i];
        }
        console.debug(s);

        s = 'Layout Edges';
        for (var i = 0; i < layoutInfo.layoutEdges.length; i++) {
          var e = layoutInfo.layoutEdges[i];
          s += '\nEdge Index: ' + i + ' ID: ' + e.id + ' SouceID: ' + e.sourceId + ' TargetId: ' + e.targetId + ' Ideal Length: ' + e.idealLength;
        }
        console.debug(s);

        s = 'nodeSize: ' + layoutInfo.nodeSize;
        s += '\nedgeSize: ' + layoutInfo.edgeSize;
        s += '\ntemperature: ' + layoutInfo.temperature;
        console.debug(s);

        return;
        /* eslint-enable */
      };

      /**
       * @brief : Randomizes the position of all nodes
       */
      var randomizePositions = function randomizePositions(layoutInfo, cy) {
        var width = layoutInfo.clientWidth;
        var height = layoutInfo.clientHeight;

        for (var i = 0; i < layoutInfo.nodeSize; i++) {
          var n = layoutInfo.layoutNodes[i];

          // No need to randomize compound nodes or locked nodes
          if (0 === n.children.length && !n.isLocked) {
            n.positionX = Math.random() * width;
            n.positionY = Math.random() * height;
          }
        }
      };

      /**
       * @brief          : Updates the positions of nodes in the network
       * @arg layoutInfo : LayoutInfo object
       * @arg cy         : Cytoscape object
       * @arg options    : Layout options
       */
      var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
        // var s = 'Refreshing positions';
        // logDebug(s);

        var layout = options.layout;
        var nodes = options.eles.nodes();
        var bb = layoutInfo.boundingBox;
        var coseBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };

        if (options.boundingBox) {
          nodes.forEach(function (node) {
            var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];

            coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
            coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);

            coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
            coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
          });

          coseBB.w = coseBB.x2 - coseBB.x1;
          coseBB.h = coseBB.y2 - coseBB.y1;
        }

        nodes.positions(function (ele, i) {
          var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];
          // s = "Node: " + lnode.id + ". Refreshed position: (" +
          // lnode.positionX + ", " + lnode.positionY + ").";
          // logDebug(s);

          if (options.boundingBox) {
            // then add extra bounding box constraint
            var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
            var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;

            return {
              x: bb.x1 + pctX * bb.w,
              y: bb.y1 + pctY * bb.h
            };
          } else {
            return {
              x: lnode.positionX,
              y: lnode.positionY
            };
          }
        });

        // Trigger layoutReady only on first call
        if (true !== layoutInfo.ready) {
          // s = 'Triggering layoutready';
          // logDebug(s);
          layoutInfo.ready = true;
          layout.one('layoutready', options.ready);
          layout.emit({ type: 'layoutready', layout: this });
        }
      };

      /**
       * @brief : Logs a debug message in JS console, if DEBUG is ON
       */
      // var logDebug = function(text) {
      //   if (DEBUG) {
      //     console.debug(text);
      //   }
      // };

      module.exports = CoseLayout;

      /***/
    },
    /* 101 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);

      var defaults = {
        fit: true, // whether to fit the viewport to the graph
        padding: 30, // padding used on fit
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
        avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
        condense: false, // uses all available space on false, uses minimal space on true
        rows: undefined, // force num of rows in the grid
        cols: undefined, // force num of columns in the grid
        position: function position(node) {}, // returns { row, col } for element
        sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function animateFilter(node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function transform(node, position) {
          return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts 
      };

      function GridLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      GridLayout.prototype.run = function () {
        var params = this.options;
        var options = params;

        var cy = params.cy;
        var eles = options.eles;
        var nodes = eles.nodes().not(':parent');

        if (options.sort) {
          nodes = nodes.sort(options.sort);
        }

        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0, y1: 0, w: cy.width(), h: cy.height()
        });

        if (bb.h === 0 || bb.w === 0) {
          nodes.layoutPositions(this, options, function (ele) {
            return { x: bb.x1, y: bb.y1 };
          });
        } else {

          // width/height * splits^2 = cells where splits is number of times to split width
          var cells = nodes.size();
          var splits = Math.sqrt(cells * bb.h / bb.w);
          var rows = Math.round(splits);
          var cols = Math.round(bb.w / bb.h * splits);

          var small = function small(val) {
            if (val == null) {
              return Math.min(rows, cols);
            } else {
              var min = Math.min(rows, cols);
              if (min == rows) {
                rows = val;
              } else {
                cols = val;
              }
            }
          };

          var large = function large(val) {
            if (val == null) {
              return Math.max(rows, cols);
            } else {
              var max = Math.max(rows, cols);
              if (max == rows) {
                rows = val;
              } else {
                cols = val;
              }
            }
          };

          var oRows = options.rows;
          var oCols = options.cols != null ? options.cols : options.columns;

          // if rows or columns were set in options, use those values
          if (oRows != null && oCols != null) {
            rows = oRows;
            cols = oCols;
          } else if (oRows != null && oCols == null) {
            rows = oRows;
            cols = Math.ceil(cells / rows);
          } else if (oRows == null && oCols != null) {
            cols = oCols;
            rows = Math.ceil(cells / cols);
          }

          // otherwise use the automatic values and adjust accordingly

          // if rounding was up, see if we can reduce rows or columns
          else if (cols * rows > cells) {
              var sm = small();
              var lg = large();

              // reducing the small side takes away the most cells, so try it first
              if ((sm - 1) * lg >= cells) {
                small(sm - 1);
              } else if ((lg - 1) * sm >= cells) {
                large(lg - 1);
              }
            } else {

              // if rounding was too low, add rows or columns
              while (cols * rows < cells) {
                var _sm = small();
                var _lg = large();

                // try to add to larger side first (adds less in multiplication)
                if ((_lg + 1) * _sm >= cells) {
                  large(_lg + 1);
                } else {
                  small(_sm + 1);
                }
              }
            }

          var cellWidth = bb.w / cols;
          var cellHeight = bb.h / rows;

          if (options.condense) {
            cellWidth = 0;
            cellHeight = 0;
          }

          if (options.avoidOverlap) {
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              var pos = node._private.position;

              if (pos.x == null || pos.y == null) {
                // for bb
                pos.x = 0;
                pos.y = 0;
              }

              var nbb = node.layoutDimensions(options);
              var p = options.avoidOverlapPadding;

              var w = nbb.w + p;
              var h = nbb.h + p;

              cellWidth = Math.max(cellWidth, w);
              cellHeight = Math.max(cellHeight, h);
            }
          }

          var cellUsed = {}; // e.g. 'c-0-2' => true

          var used = function used(row, col) {
            return cellUsed['c-' + row + '-' + col] ? true : false;
          };

          var use = function use(row, col) {
            cellUsed['c-' + row + '-' + col] = true;
          };

          // to keep track of current cell position
          var row = 0;
          var col = 0;
          var moveToNextCell = function moveToNextCell() {
            col++;
            if (col >= cols) {
              col = 0;
              row++;
            }
          };

          // get a cache of all the manual positions
          var id2manPos = {};
          for (var _i = 0; _i < nodes.length; _i++) {
            var _node = nodes[_i];
            var rcPos = options.position(_node);

            if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
              // must have at least row or col def'd
              var _pos = {
                row: rcPos.row,
                col: rcPos.col
              };

              if (_pos.col === undefined) {
                // find unused col
                _pos.col = 0;

                while (used(_pos.row, _pos.col)) {
                  _pos.col++;
                }
              } else if (_pos.row === undefined) {
                // find unused row
                _pos.row = 0;

                while (used(_pos.row, _pos.col)) {
                  _pos.row++;
                }
              }

              id2manPos[_node.id()] = _pos;
              use(_pos.row, _pos.col);
            }
          }

          var getPos = function getPos(element, i) {
            var x = void 0,
                y = void 0;

            if (element.locked() || element.isParent()) {
              return false;
            }

            // see if we have a manual position set
            var rcPos = id2manPos[element.id()];
            if (rcPos) {
              x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
              y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
            } else {
              // otherwise set automatically

              while (used(row, col)) {
                moveToNextCell();
              }

              x = col * cellWidth + cellWidth / 2 + bb.x1;
              y = row * cellHeight + cellHeight / 2 + bb.y1;
              use(row, col);

              moveToNextCell();
            }

            return { x: x, y: y };
          };

          nodes.layoutPositions(this, options, getPos);
        }

        return this; // chaining
      };

      module.exports = GridLayout;

      /***/
    },
    /* 102 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      // default layout options
      var defaults = {
        ready: function ready() {}, // on layoutready
        stop: function stop() {} // on layoutstop
      };

      // constructor
      // options : object containing layout options
      function NullLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      // runs the layout
      NullLayout.prototype.run = function () {
        var options = this.options;
        var eles = options.eles; // elements to consider in the layout
        var layout = this;

        // cy is automatically populated for us in the constructor
        var cy = options.cy; // jshint ignore:line

        layout.emit('layoutstart');

        // puts all nodes at (0, 0)
        eles.nodes().positions(function () {
          return {
            x: 0,
            y: 0
          };
        });

        // trigger layoutready when each node has had its position set at least once
        layout.one('layoutready', options.ready);
        layout.emit('layoutready');

        // trigger layoutstop when the layout stops (e.g. finishes)
        layout.one('layoutstop', options.stop);
        layout.emit('layoutstop');

        return this; // chaining
      };

      // called on continuous layouts to stop them before they finish
      NullLayout.prototype.stop = function () {
        return this; // chaining
      };

      module.exports = NullLayout;

      /***/
    },
    /* 103 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);

      var defaults = {
        positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }
        zoom: undefined, // the zoom level to set (prob want fit = false if set)
        pan: undefined, // the pan level to set (prob want fit = false if set)
        fit: true, // whether to fit to viewport
        padding: 30, // padding on fit
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function animateFilter(node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function transform(node, position) {
          return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts 
      };

      function PresetLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      PresetLayout.prototype.run = function () {
        var options = this.options;
        var eles = options.eles;

        var nodes = eles.nodes();
        var posIsFn = is.fn(options.positions);

        function getPosition(node) {
          if (options.positions == null) {
            return null;
          }

          if (posIsFn) {
            return options.positions(node);
          }

          var pos = options.positions[node._private.data.id];

          if (pos == null) {
            return null;
          }

          return pos;
        }

        nodes.layoutPositions(this, options, function (node, i) {
          var position = getPosition(node);

          if (node.locked() || position == null) {
            return false;
          }

          return position;
        });

        return this; // chaining
      };

      module.exports = PresetLayout;

      /***/
    },
    /* 104 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);

      var defaults = {
        fit: true, // whether to fit to viewport
        padding: 30, // fit padding
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled
        animateFilter: function animateFilter(node, i) {
          return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function transform(node, position) {
          return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts 
      };

      function RandomLayout(options) {
        this.options = util.extend({}, defaults, options);
      }

      RandomLayout.prototype.run = function () {
        var options = this.options;
        var cy = options.cy;
        var eles = options.eles;
        var nodes = eles.nodes().not(':parent');

        var bb = math.makeBoundingBox(options.boundingBox ? options.boundingBox : {
          x1: 0, y1: 0, w: cy.width(), h: cy.height()
        });

        var getPos = function getPos(node, i) {
          return {
            x: bb.x1 + Math.round(Math.random() * bb.w),
            y: bb.y1 + Math.round(Math.random() * bb.h)
          };
        };

        nodes.layoutPositions(this, options, getPos);

        return this; // chaining
      };

      module.exports = RandomLayout;

      /***/
    },
    /* 105 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = [{ name: 'null', impl: __webpack_require__(106) }, { name: 'base', impl: __webpack_require__(107) }, { name: 'canvas', impl: __webpack_require__(123) }];

      /***/
    },
    /* 106 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      function NullRenderer(options) {
        this.options = options;
        this.notifications = 0; // for testing
      }

      var noop = function noop() {};

      NullRenderer.prototype = {
        recalculateRenderedStyle: noop,
        notify: function notify() {
          this.notifications++;
        },
        init: noop
      };

      module.exports = NullRenderer;

      /***/
    },
    /* 107 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var window = __webpack_require__(3);

      var BaseRenderer = function BaseRenderer(options) {
        this.init(options);
      };
      var BR = BaseRenderer;
      var BRp = BR.prototype;

      BRp.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

      BRp.init = function (options) {
        var r = this;

        r.options = options;

        r.cy = options.cy;

        var ctr = r.container = options.cy.container();

        // prepend a stylesheet in the head such that
        if (window) {
          var document = window.document;
          var head = document.head;
          var stylesheetId = '__________cytoscape_stylesheet';
          var className = '__________cytoscape_container';
          var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

          if (ctr.className.indexOf(className) < 0) {
            ctr.className = (ctr.className || '') + ' ' + className;
          }

          if (!stylesheetAlreadyExists) {
            var stylesheet = document.createElement('style');

            stylesheet.id = stylesheetId;
            stylesheet.innerHTML = '.' + className + ' { position: relative; }';

            head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
          }

          var computedStyle = window.getComputedStyle(ctr);
          var position = computedStyle.getPropertyValue('position');

          if (position === 'static') {
            util.error('A Cytoscape container has style position:static and so can not use UI extensions properly');
          }
        }

        r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

        r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95];

        //--Pointer-related data
        r.hoverData = { down: null, last: null,
          downTime: null, triggerMode: null,
          dragging: false,
          initialPan: [null, null], capture: false };

        r.dragData = { possibleDragElements: [] };

        r.touchData = {
          start: null, capture: false,

          // These 3 fields related to tap, taphold events
          startPosition: [null, null, null, null, null, null],
          singleTouchStartTime: null,
          singleTouchMoved: true,

          now: [null, null, null, null, null, null],
          earlier: [null, null, null, null, null, null]
        };

        r.redraws = 0;
        r.showFps = options.showFps;
        r.debug = options.debug;

        r.hideEdgesOnViewport = options.hideEdgesOnViewport;
        r.hideLabelsOnViewport = options.hideLabelsOnViewport;
        r.textureOnViewport = options.textureOnViewport;
        r.wheelSensitivity = options.wheelSensitivity;
        r.motionBlurEnabled = options.motionBlur; // on by default
        r.forcedPixelRatio = options.pixelRatio;
        r.motionBlur = options.motionBlur; // for initial kick off
        r.motionBlurOpacity = options.motionBlurOpacity;
        r.motionBlurTransparency = 1 - r.motionBlurOpacity;
        r.motionBlurPxRatio = 1;
        r.mbPxRBlurry = 1; //0.8;
        r.minMbLowQualFrames = 4;
        r.fullQualityMb = false;
        r.clearedForMotionBlur = [];
        r.desktopTapThreshold = options.desktopTapThreshold;
        r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
        r.touchTapThreshold = options.touchTapThreshold;
        r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
        r.tapholdDuration = 500;

        r.bindings = [];
        r.beforeRenderCallbacks = [];
        r.beforeRenderPriorities = { // higher priority execs before lower one
          animations: 400,
          eleCalcs: 300,
          eleTxrDeq: 200,
          lyrTxrDeq: 100
        };

        r.registerNodeShapes();
        r.registerArrowShapes();
        r.registerCalculationListeners();
      };

      BRp.notify = function (params) {
        var types;
        var r = this;

        // the renderer can't be notified after it's destroyed
        if (this.destroyed) {
          return;
        }

        if (is.array(params.type)) {
          types = params.type;
        } else {
          types = [params.type];
        }

        var has = {};
        for (var i = 0; i < types.length; i++) {
          var type = types[i];

          has[type] = true;
        } // for

        if (has['init']) {
          r.load();
          return;
        }

        if (has['destroy']) {
          r.destroy();
          return;
        }

        if (has['add'] || has['remove'] || has['load'] || has['zorder']) {
          r.invalidateCachedZSortedEles();
        }

        if (has['viewport']) {
          r.redrawHint('select', true);
        }

        if (has['load'] || has['resize']) {
          r.invalidateContainerClientCoordsCache();
          r.matchCanvasSize(r.container);
        }

        r.redrawHint('eles', true);
        r.redrawHint('drag', true);

        this.startRenderLoop();

        this.redraw();
      };

      BRp.destroy = function () {
        var r = this;

        r.destroyed = true;

        r.cy.stopAnimationLoop();

        for (var i = 0; i < r.bindings.length; i++) {
          var binding = r.bindings[i];
          var b = binding;
          var tgt = b.target;

          (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
        }

        r.bindings = [];
        r.beforeRenderCallbacks = [];
        r.onUpdateEleCalcsFns = [];

        if (r.removeObserver) {
          r.removeObserver.disconnect();
        }

        if (r.styleObserver) {
          r.styleObserver.disconnect();
        }

        if (r.labelCalcDiv) {
          try {
            document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
          } catch (e) {
            // ie10 issue #1014
          }
        }
      };

      [__webpack_require__(108), __webpack_require__(109), __webpack_require__(119), __webpack_require__(120), __webpack_require__(121), __webpack_require__(122)].forEach(function (props) {
        util.extend(BRp, props);
      });

      module.exports = BR;

      /***/
    },
    /* 108 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);
      var is = __webpack_require__(0);
      var util = __webpack_require__(1);

      var BRp = {};

      BRp.arrowShapeWidth = 0.3;

      BRp.registerArrowShapes = function () {
        var arrowShapes = this.arrowShapes = {};
        var renderer = this;

        // Contract for arrow shapes:
        // 0, 0 is arrow tip
        // (0, 1) is direction towards node
        // (1, 0) is right
        //
        // functional api:
        // collide: check x, y in shape
        // roughCollide: called before collide, no false negatives
        // draw: draw
        // spacing: dist(arrowTip, nodeBoundary)
        // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

        var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
          var x1 = translation.x - size / 2 - padding;
          var x2 = translation.x + size / 2 + padding;
          var y1 = translation.y - size / 2 - padding;
          var y2 = translation.y + size / 2 + padding;

          var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;

          return inside;
        };

        var transform = function transform(x, y, size, angle, translation) {
          var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
          var yRotated = x * Math.sin(angle) + y * Math.cos(angle);

          var xScaled = xRotated * size;
          var yScaled = yRotated * size;

          var xTranslated = xScaled + translation.x;
          var yTranslated = yScaled + translation.y;

          return {
            x: xTranslated,
            y: yTranslated
          };
        };

        var transformPoints = function transformPoints(pts, size, angle, translation) {
          var retPts = [];

          for (var i = 0; i < pts.length; i += 2) {
            var x = pts[i];
            var y = pts[i + 1];

            retPts.push(transform(x, y, size, angle, translation));
          }

          return retPts;
        };

        var pointsToArr = function pointsToArr(pts) {
          var ret = [];

          for (var i = 0; i < pts.length; i++) {
            var p = pts[i];

            ret.push(p.x, p.y);
          }

          return ret;
        };

        var standardGap = function standardGap(edge) {
          return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
        };

        var defineArrowShape = function defineArrowShape(name, defn) {
          if (is.string(defn)) {
            defn = arrowShapes[defn];
          }

          arrowShapes[name] = util.extend({
            name: name,

            points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],

            collide: function collide(x, y, size, angle, translation, padding) {
              var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
              var inside = math.pointInsidePolygonPoints(x, y, points);

              return inside;
            },

            roughCollide: bbCollide,

            draw: function draw(context, size, angle, translation) {
              var points = transformPoints(this.points, size, angle, translation);

              renderer.arrowShapeImpl('polygon')(context, points);
            },

            spacing: function spacing(edge) {
              return 0;
            },

            gap: standardGap
          }, defn);
        };

        defineArrowShape('none', {
          collide: util.falsify,

          roughCollide: util.falsify,

          draw: util.noop,

          spacing: util.zeroify,

          gap: util.zeroify
        });

        defineArrowShape('triangle', {
          points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
        });

        defineArrowShape('arrow', 'triangle');

        defineArrowShape('triangle-backcurve', {
          points: arrowShapes['triangle'].points,

          controlPoint: [0, -0.15],

          roughCollide: bbCollide,

          draw: function draw(context, size, angle, translation, edgeWidth) {
            var ptsTrans = transformPoints(this.points, size, angle, translation);
            var ctrlPt = this.controlPoint;
            var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);

            renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
          },

          gap: function gap(edge) {
            return standardGap(edge) * 0.8;
          }
        });

        defineArrowShape('triangle-tee', {
          points: [-0.15, -0.3, 0, 0, 0.15, -0.3, -0.15, -0.3],

          pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],

          collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
            var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
            var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));

            var inside = math.pointInsidePolygonPoints(x, y, triPts) || math.pointInsidePolygonPoints(x, y, teePts);

            return inside;
          },

          draw: function draw(context, size, angle, translation, edgeWidth) {
            var triPts = transformPoints(this.points, size, angle, translation);
            var teePts = transformPoints(this.pointsTee, size, angle, translation);

            renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
          }
        });

        defineArrowShape('triangle-cross', {
          points: [-0.15, -0.3, 0, 0, 0.15, -0.3, -0.15, -0.3],

          baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
          -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
          0.15, -0.4],

          crossLinePts: function crossLinePts(size, edgeWidth) {
            // shift points so that the distance between the cross points matches edge width
            var p = this.baseCrossLinePts.slice();
            var shiftFactor = edgeWidth / size;
            var y0 = 3;
            var y1 = 5;

            p[y0] = p[y0] - shiftFactor;
            p[y1] = p[y1] - shiftFactor;

            return p;
          },

          collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
            var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
            var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
            var inside = math.pointInsidePolygonPoints(x, y, triPts) || math.pointInsidePolygonPoints(x, y, teePts);

            return inside;
          },

          draw: function draw(context, size, angle, translation, edgeWidth) {
            var triPts = transformPoints(this.points, size, angle, translation);
            var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);

            renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
          }
        });

        defineArrowShape('vee', {
          points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],

          gap: function gap(edge) {
            return standardGap(edge) * 0.525;
          }
        });

        defineArrowShape('circle', {
          radius: 0.15,

          collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
            var t = translation;
            var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);

            return inside;
          },

          draw: function draw(context, size, angle, translation, edgeWidth) {
            renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
          },

          spacing: function spacing(edge) {
            return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
          }
        });

        defineArrowShape('tee', {
          points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],

          spacing: function spacing(edge) {
            return 1;
          },

          gap: function gap(edge) {
            return 1;
          }
        });

        defineArrowShape('square', {
          points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
        });

        defineArrowShape('diamond', {
          points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],

          gap: function gap(edge) {
            return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
          }
        });
      };

      module.exports = BRp;

      /***/
    },
    /* 109 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var BRp = {};

      [__webpack_require__(110), __webpack_require__(111), __webpack_require__(112), __webpack_require__(113), __webpack_require__(114), __webpack_require__(115), __webpack_require__(116), __webpack_require__(117), __webpack_require__(118)].forEach(function (props) {
        util.extend(BRp, props);
      });

      module.exports = BRp;

      /***/
    },
    /* 110 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var window = __webpack_require__(3);
      var math = __webpack_require__(2);
      var util = __webpack_require__(1);
      var window = __webpack_require__(3);

      var BRp = {};

      // Project mouse
      BRp.projectIntoViewport = function (clientX, clientY) {
        var cy = this.cy;
        var offsets = this.findContainerClientCoords();
        var offsetLeft = offsets[0];
        var offsetTop = offsets[1];
        var scale = offsets[4];
        var pan = cy.pan();
        var zoom = cy.zoom();

        var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
        var y = ((clientY - offsetTop) / scale - pan.y) / zoom;

        return [x, y];
      };

      BRp.findContainerClientCoords = function () {
        if (this.containerBB) {
          return this.containerBB;
        }

        var container = this.container;
        var rect = container.getBoundingClientRect();
        var style = window.getComputedStyle(container);
        var styleValue = function styleValue(name) {
          return parseFloat(style.getPropertyValue(name));
        };

        var padding = {
          left: styleValue('padding-left'),
          right: styleValue('padding-right'),
          top: styleValue('padding-top'),
          bottom: styleValue('padding-bottom')
        };

        var border = {
          left: styleValue('border-left-width'),
          right: styleValue('border-right-width'),
          top: styleValue('border-top-width'),
          bottom: styleValue('border-bottom-width')
        };

        var clientWidth = container.clientWidth;
        var clientHeight = container.clientHeight;

        var paddingHor = padding.left + padding.right;
        var paddingVer = padding.top + padding.bottom;

        var borderHor = border.left + border.right;
        var borderVer = border.top + border.bottom;

        var scale = rect.width / (clientWidth + borderHor);

        var unscaledW = clientWidth - paddingHor;
        var unscaledH = clientHeight - paddingVer;

        var scaledW = rect.width - (paddingHor + borderHor) * scale;
        var scaledH = rect.height - (paddingVer + borderVer) * scale;

        var left = rect.left + padding.left + border.left;
        var top = rect.top + padding.top + border.top;

        return this.containerBB = [left, top, unscaledW, unscaledH, scale];
      };

      BRp.invalidateContainerClientCoordsCache = function () {
        this.containerBB = null;
      };

      BRp.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
        return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
      };

      BRp.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
        var self = this;
        var r = this;
        var eles = r.getCachedZSortedEles();
        var near = []; // 1 node max, 1 edge max
        var zoom = r.cy.zoom();
        var hasCompounds = r.cy.hasCompoundNodes();
        var edgeThreshold = (isTouch ? 24 : 8) / zoom;
        var nodeThreshold = (isTouch ? 8 : 2) / zoom;
        var labelThreshold = (isTouch ? 8 : 2) / zoom;
        var minSqDist = Infinity;
        var nearEdge;
        var nearNode;

        if (interactiveElementsOnly) {
          eles = eles.interactive;
        }

        function addEle(ele, sqDist) {
          if (ele.isNode()) {
            if (nearNode) {
              return; // can't replace node
            } else {
              nearNode = ele;
              near.push(ele);
            }
          }

          if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
            if (nearEdge) {
              // then replace existing edge
              // can replace only if same z-index
              if (nearEdge.pstyle('z-index').value === ele.pstyle('z-index').value) {
                for (var i = 0; i < near.length; i++) {
                  if (near[i].isEdge()) {
                    near[i] = ele;
                    nearEdge = ele;
                    minSqDist = sqDist != null ? sqDist : minSqDist;
                    break;
                  }
                }
              }
            } else {
              near.push(ele);
              nearEdge = ele;
              minSqDist = sqDist != null ? sqDist : minSqDist;
            }
          }
        }

        function checkNode(node) {
          var width = node.outerWidth() + 2 * nodeThreshold;
          var height = node.outerHeight() + 2 * nodeThreshold;
          var hw = width / 2;
          var hh = height / 2;
          var pos = node.position();

          if (pos.x - hw <= x && x <= pos.x + hw // bb check x
          && pos.y - hh <= y && y <= pos.y + hh // bb check y
          ) {
              var shape = r.nodeShapes[self.getNodeShape(node)];

              if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
                addEle(node, 0);
                return true;
              }
            }
        }

        function checkEdge(edge) {
          var _p = edge._private;

          var rs = _p.rscratch;
          var styleWidth = edge.pstyle('width').pfValue;
          var scale = edge.pstyle('arrow-scale').value;
          var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre
          var widthSq = width * width;
          var width2 = width * 2;
          var src = _p.source;
          var tgt = _p.target;
          var inEdgeBB = false;
          var sqDist;

          if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
            var pts = rs.allpts;

            for (var i = 0; i + 3 < pts.length; i += 2) {
              if ((inEdgeBB = math.inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2)) && widthSq > (sqDist = math.sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
                addEle(edge, sqDist);
                return true;
              }
            }
          } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
            var pts = rs.allpts;
            for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
              if ((inEdgeBB = math.inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2)) && widthSq > (sqDist = math.sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
                addEle(edge, sqDist);
                return true;
              }
            }
          }

          // if we're close to the edge but didn't hit it, maybe we hit its arrows

          var src = src || _p.source;
          var tgt = tgt || _p.target;

          var arSize = self.getArrowWidth(styleWidth, scale);

          var arrows = [{ name: 'source', x: rs.arrowStartX, y: rs.arrowStartY, angle: rs.srcArrowAngle }, { name: 'target', x: rs.arrowEndX, y: rs.arrowEndY, angle: rs.tgtArrowAngle }, { name: 'mid-source', x: rs.midX, y: rs.midY, angle: rs.midsrcArrowAngle }, { name: 'mid-target', x: rs.midX, y: rs.midY, angle: rs.midtgtArrowAngle }];

          for (var i = 0; i < arrows.length; i++) {
            var ar = arrows[i];
            var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
            var edgeWidth = edge.pstyle('width').pfValue;
            if (shape.roughCollide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, { x: ar.x, y: ar.y }, edgeWidth, edgeThreshold)) {
              addEle(edge);
              return true;
            }
          }

          // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)
          if (hasCompounds && near.length > 0) {
            checkNode(src);
            checkNode(tgt);
          }
        }

        function preprop(obj, name, pre) {
          return util.getPrefixedProperty(obj, name, pre);
        }

        function checkLabel(ele, prefix) {
          var _p = ele._private;
          var th = labelThreshold;

          var prefixDash;
          if (prefix) {
            prefixDash = prefix + '-';
          } else {
            prefixDash = '';
          }

          var text = ele.pstyle(prefixDash + 'label').value;
          var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

          if (!eventsEnabled || !text) {
            return;
          }

          var rstyle = _p.rstyle;
          var bw = ele.pstyle('text-border-width').pfValue;
          var pw = ele.pstyle('text-background-padding').pfValue;
          var lw = preprop(rstyle, 'labelWidth', prefix) + bw + 2 * th + 2 * pw;
          var lh = preprop(rstyle, 'labelHeight', prefix) + bw + 2 * th + 2 * pw;
          var lx = preprop(rstyle, 'labelX', prefix);
          var ly = preprop(rstyle, 'labelY', prefix);

          var theta = preprop(_p.rscratch, 'labelAngle', prefix);

          var lx1 = lx - lw / 2;
          var lx2 = lx + lw / 2;
          var ly1 = ly - lh / 2;
          var ly2 = ly + lh / 2;

          if (theta) {
            var cos = Math.cos(theta);
            var sin = Math.sin(theta);

            var rotate = function rotate(x, y) {
              x = x - lx;
              y = y - ly;

              return {
                x: x * cos - y * sin + lx,
                y: x * sin + y * cos + ly
              };
            };

            var px1y1 = rotate(lx1, ly1);
            var px1y2 = rotate(lx1, ly2);
            var px2y1 = rotate(lx2, ly1);
            var px2y2 = rotate(lx2, ly2);

            var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];

            if (math.pointInsidePolygonPoints(x, y, points)) {
              addEle(ele);
              return true;
            }
          } else {
            // do a cheaper bb check
            var bb = {
              w: lw,
              h: lh,
              x1: lx1,
              x2: lx2,
              y1: ly1,
              y2: ly2
            };

            if (math.inBoundingBox(bb, x, y)) {
              addEle(ele);
              return true;
            }
          }
        }

        for (var i = eles.length - 1; i >= 0; i--) {
          // reverse order for precedence
          var ele = eles[i];

          if (ele.isNode()) {
            checkNode(ele) || checkLabel(ele);
          } else {
            // then edge
            checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
          }
        }

        return near;
      };

      // 'Give me everything from this box'
      BRp.getAllInBox = function (x1, y1, x2, y2) {
        var eles = this.getCachedZSortedEles().interactive;
        var box = [];

        var x1c = Math.min(x1, x2);
        var x2c = Math.max(x1, x2);
        var y1c = Math.min(y1, y2);
        var y2c = Math.max(y1, y2);

        x1 = x1c;
        x2 = x2c;
        y1 = y1c;
        y2 = y2c;

        var boxBb = math.makeBoundingBox({
          x1: x1, y1: y1,
          x2: x2, y2: y2
        });

        for (var e = 0; e < eles.length; e++) {
          var ele = eles[e];

          if (ele.isNode()) {
            var node = ele;
            var nodeBb = node.boundingBox({
              includeNodes: true,
              includeEdges: false,
              includeLabels: false
            });

            if (math.boundingBoxesIntersect(boxBb, nodeBb) && !math.boundingBoxInBoundingBox(nodeBb, boxBb)) {
              box.push(node);
            }
          } else {
            var edge = ele;
            var _p = edge._private;
            var rs = _p.rscratch;

            if (rs.startX != null && rs.startY != null && !math.inBoundingBox(boxBb, rs.startX, rs.startY)) {
              continue;
            }
            if (rs.endX != null && rs.endY != null && !math.inBoundingBox(boxBb, rs.endX, rs.endY)) {
              continue;
            }

            if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {

              var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
              var allInside = true;

              for (var i = 0; i < pts.length; i++) {
                if (!math.pointInBoundingBox(boxBb, pts[i])) {
                  allInside = false;
                  break;
                }
              }

              if (allInside) {
                box.push(edge);
              }
            } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
              box.push(edge);
            }
          }
        }

        return box;
      };

      module.exports = BRp;

      /***/
    },
    /* 111 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);

      var BRp = {};

      BRp.calculateArrowAngles = function (edge) {
        var rs = edge._private.rscratch;
        var isHaystack = rs.edgeType === 'haystack';
        var isBezier = rs.edgeType === 'bezier';
        var isMultibezier = rs.edgeType === 'multibezier';
        var isSegments = rs.edgeType === 'segments';
        var isCompound = rs.edgeType === 'compound';
        var isSelf = rs.edgeType === 'self';

        // Displacement gives direction for arrowhead orientation
        var dispX, dispY;
        var startX, startY, endX, endY, midX, midY;

        if (isHaystack) {
          startX = rs.haystackPts[0];
          startY = rs.haystackPts[1];
          endX = rs.haystackPts[2];
          endY = rs.haystackPts[3];
        } else {
          startX = rs.arrowStartX;
          startY = rs.arrowStartY;
          endX = rs.arrowEndX;
          endY = rs.arrowEndY;
        }

        midX = rs.midX;
        midY = rs.midY;

        // source
        //

        if (isSegments) {
          dispX = startX - rs.segpts[0];
          dispY = startY - rs.segpts[1];
        } else if (isMultibezier || isCompound || isSelf || isBezier) {
          var pts = rs.allpts;
          var bX = math.qbezierAt(pts[0], pts[2], pts[4], 0.1);
          var bY = math.qbezierAt(pts[1], pts[3], pts[5], 0.1);

          dispX = startX - bX;
          dispY = startY - bY;
        } else {
          dispX = startX - midX;
          dispY = startY - midY;
        }

        rs.srcArrowAngle = math.getAngleFromDisp(dispX, dispY);

        // mid target
        //

        var midX = rs.midX;
        var midY = rs.midY;

        if (isHaystack) {
          midX = (startX + endX) / 2;
          midY = (startY + endY) / 2;
        }

        dispX = endX - startX;
        dispY = endY - startY;

        if (isSegments) {
          var pts = rs.allpts;

          if (pts.length / 2 % 2 === 0) {
            var i2 = pts.length / 2;
            var i1 = i2 - 2;

            dispX = pts[i2] - pts[i1];
            dispY = pts[i2 + 1] - pts[i1 + 1];
          } else {
            var i2 = pts.length / 2 - 1;
            var i1 = i2 - 2;
            var i3 = i2 + 2;

            dispX = pts[i2] - pts[i1];
            dispY = pts[i2 + 1] - pts[i1 + 1];
          }
        } else if (isMultibezier || isCompound || isSelf) {
          var pts = rs.allpts;
          var cpts = rs.ctrlpts;
          var bp0x, bp0y;
          var bp1x, bp1y;

          if (cpts.length / 2 % 2 === 0) {
            var p0 = pts.length / 2 - 1; // startpt
            var ic = p0 + 2;
            var p1 = ic + 2;

            bp0x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
            bp0y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);

            bp1x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
            bp1y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
          } else {
            var ic = pts.length / 2 - 1; // ctrpt
            var p0 = ic - 2; // startpt
            var p1 = ic + 2; // endpt

            bp0x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
            bp0y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);

            bp1x = math.qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
            bp1y = math.qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
          }

          dispX = bp1x - bp0x;
          dispY = bp1y - bp0y;
        }

        rs.midtgtArrowAngle = math.getAngleFromDisp(dispX, dispY);

        rs.midDispX = dispX;
        rs.midDispY = dispY;

        // mid source
        //

        dispX *= -1;
        dispY *= -1;

        if (isSegments) {
          var pts = rs.allpts;

          if (pts.length / 2 % 2 === 0) {
            // already ok
          } else {
            var i2 = pts.length / 2 - 1;
            var i3 = i2 + 2;

            dispX = -(pts[i3] - pts[i2]);
            dispY = -(pts[i3 + 1] - pts[i2 + 1]);
          }
        }

        rs.midsrcArrowAngle = math.getAngleFromDisp(dispX, dispY);

        // target
        //

        if (isSegments) {
          dispX = endX - rs.segpts[rs.segpts.length - 2];
          dispY = endY - rs.segpts[rs.segpts.length - 1];
        } else if (isMultibezier || isCompound || isSelf || isBezier) {
          var pts = rs.allpts;
          var l = pts.length;
          var bX = math.qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
          var bY = math.qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);

          dispX = endX - bX;
          dispY = endY - bY;
        } else {
          dispX = endX - midX;
          dispY = endY - midY;
        }

        rs.tgtArrowAngle = math.getAngleFromDisp(dispX, dispY);
      };

      BRp.getArrowWidth = BRp.getArrowHeight = function (edgeWidth, scale) {
        var cache = this.arrowWidthCache = this.arrowWidthCache || {};

        var cachedVal = cache[edgeWidth + ', ' + scale];
        if (cachedVal) {
          return cachedVal;
        }

        cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
        cache[edgeWidth + ', ' + scale] = cachedVal;

        return cachedVal;
      };

      module.exports = BRp;

      /***/
    },
    /* 112 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);
      var is = __webpack_require__(0);

      var BRp = {};

      BRp.findEdgeControlPoints = function (edges) {
        if (!edges || edges.length === 0) {
          return;
        }

        var r = this;
        var cy = r.cy;
        var hasCompounds = cy.hasCompoundNodes();
        var hashTable = {};
        var pairIds = [];
        var haystackEdges = [];

        // create a table of edge (src, tgt) => list of edges between them
        var pairId;
        for (var i = 0; i < edges.length; i++) {
          var edge = edges[i];
          var _p = edge._private;
          var data = _p.data;
          var curveStyle = edge.pstyle('curve-style').value;
          var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';
          var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';

          // ignore edges who are not to be displayed
          // they shouldn't take up space
          if (edge.pstyle('display').value === 'none') {
            continue;
          }

          if (curveStyle === 'haystack') {
            haystackEdges.push(edge);
            continue;
          }

          var srcId = data.source;
          var tgtId = data.target;

          pairId = srcId > tgtId ? tgtId + '$-$' + srcId : srcId + '$-$' + tgtId;

          if (edgeIsUnbundled) {
            pairId = 'unbundled' + '$-$' + data.id;
          }

          var tableEntry = hashTable[pairId];

          if (tableEntry == null) {
            tableEntry = hashTable[pairId] = [];
            pairIds.push(pairId);
          }

          tableEntry.push(edge);

          if (edgeIsUnbundled) {
            tableEntry.hasUnbundled = true;
          }

          if (edgeIsBezier) {
            tableEntry.hasBezier = true;
          }
        }

        var src, tgt, srcPos, tgtPos, srcW, srcH, tgtW, tgtH, srcShape, tgtShape;
        var vectorNormInverse;
        var badBezier;

        // for each pair (src, tgt), create the ctrl pts
        // Nested for loop is OK; total number of iterations for both loops = edgeCount
        for (var p = 0; p < pairIds.length; p++) {
          pairId = pairIds[p];
          var pairEdges = hashTable[pairId];

          // for each pair id, the edges should be sorted by index
          pairEdges.sort(function (edge1, edge2) {
            return edge1.poolIndex() - edge2.poolIndex();
          });

          src = pairEdges[0]._private.source;
          tgt = pairEdges[0]._private.target;

          // make sure src/tgt distinction is consistent for bundled edges
          if (!pairEdges.hasUnbundled && src.id() > tgt.id()) {
            var temp = src;
            src = tgt;
            tgt = temp;
          }

          srcPos = src.position();
          tgtPos = tgt.position();

          srcW = src.outerWidth();
          srcH = src.outerHeight();

          tgtW = tgt.outerWidth();
          tgtH = tgt.outerHeight();

          srcShape = r.nodeShapes[this.getNodeShape(src)];
          tgtShape = r.nodeShapes[this.getNodeShape(tgt)];

          badBezier = false;

          var edge;
          var edge_p;
          var rs;

          var dirCounts = {
            'north': 0,
            'west': 0,
            'south': 0,
            'east': 0,
            'northwest': 0,
            'southwest': 0,
            'northeast': 0,
            'southeast': 0
          };

          var srcX2 = srcPos.x;
          var srcY2 = srcPos.y;
          var srcW2 = srcW;
          var srcH2 = srcH;

          var tgtX2 = tgtPos.x;
          var tgtY2 = tgtPos.y;
          var tgtW2 = tgtW;
          var tgtH2 = tgtH;

          var numEdges2 = pairEdges.length;

          for (var i = 0; i < pairEdges.length; i++) {
            edge = pairEdges[i];
            edge_p = edge._private;
            rs = edge_p.rscratch;

            var edgeIndex1 = rs.lastEdgeIndex;
            var edgeIndex2 = i;

            var numEdges1 = rs.lastNumEdges;

            var curveStyle = edge.pstyle('curve-style').value;

            var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments';

            // whether the normalised pair order is the reverse of the edge's src-tgt order
            var edgeIsSwapped = src.id() !== edge.source().id();

            var ctrlptDists = edge.pstyle('control-point-distances');
            var loopDir = edge.pstyle('loop-direction').pfValue;
            var loopSwp = edge.pstyle('loop-sweep').pfValue;
            var ctrlptWs = edge.pstyle('control-point-weights');
            var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
            var stepSize = edge.pstyle('control-point-step-size').pfValue;
            var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
            var ctrlptWeight = ctrlptWs.value[0];
            var edgeDistances = edge.pstyle('edge-distances').value;
            var segmentWs = edge.pstyle('segment-weights');
            var segmentDs = edge.pstyle('segment-distances');
            var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
            var srcEndpt = edge.pstyle('source-endpoint').value;
            var tgtEndpt = edge.pstyle('target-endpoint').value;
            var srcArrShape = edge.pstyle('source-arrow-shape').value;
            var tgtArrShape = edge.pstyle('target-arrow-shape').value;
            var arrowScale = edge.pstyle('arrow-scale').value;
            var lineWidth = edge.pstyle('width').pfValue;

            var srcX1 = rs.lastSrcCtlPtX;
            var srcY1 = rs.lastSrcCtlPtY;
            var srcW1 = rs.lastSrcCtlPtW;
            var srcH1 = rs.lastSrcCtlPtH;

            var tgtX1 = rs.lastTgtCtlPtX;
            var tgtY1 = rs.lastTgtCtlPtY;
            var tgtW1 = rs.lastTgtCtlPtW;
            var tgtH1 = rs.lastTgtCtlPtH;

            var curveStyle1 = rs.lastCurveStyle;
            var curveStyle2 = curveStyle;

            var ctrlptDists1 = rs.lastCtrlptDists;
            var ctrlptDists2 = ctrlptDists ? ctrlptDists.strValue : null;

            var ctrlptWs1 = rs.lastCtrlptWs;
            var ctrlptWs2 = ctrlptWs.strValue;

            var segmentWs1 = rs.lastSegmentWs;
            var segmentWs2 = segmentWs.strValue;

            var segmentDs1 = rs.lastSegmentDs;
            var segmentDs2 = segmentDs.strValue;

            var stepSize1 = rs.lastStepSize;
            var stepSize2 = stepSize;

            var loopDir1 = rs.lastLoopDir;
            var loopDir2 = loopDir;

            var loopSwp1 = rs.lastLoopSwp;
            var loopSwp2 = loopSwp;

            var edgeDistances1 = rs.lastEdgeDistances;
            var edgeDistances2 = edgeDistances;

            var srcEndpt1 = rs.lastSrcEndpt;
            var srcEndpt2 = srcEndpt;

            var tgtEndpt1 = rs.lastTgtEndpt;
            var tgtEndpt2 = tgtEndpt;

            var srcArr1 = rs.lastSrcArr;
            var srcArr2 = srcArrShape;

            var tgtArr1 = rs.lastTgtArr;
            var tgtArr2 = tgtArrShape;

            var lineW1 = rs.lastLineW;
            var lineW2 = lineWidth;

            var arrScl1 = rs.lastArrScl;
            var arrScl2 = arrowScale;

            if (badBezier) {
              rs.badBezier = true;
            } else {
              rs.badBezier = false;
            }

            var ptCacheHit;

            if (srcX1 === srcX2 && srcY1 === srcY2 && srcW1 === srcW2 && srcH1 === srcH2 && tgtX1 === tgtX2 && tgtY1 === tgtY2 && tgtW1 === tgtW2 && tgtH1 === tgtH2 && curveStyle1 === curveStyle2 && ctrlptDists1 === ctrlptDists2 && ctrlptWs1 === ctrlptWs2 && segmentWs1 === segmentWs2 && segmentDs1 === segmentDs2 && stepSize1 === stepSize2 && loopDir1 === loopDir2 && loopSwp1 === loopSwp2 && edgeDistances1 === edgeDistances2 && srcEndpt1 === srcEndpt2 && tgtEndpt1 === tgtEndpt2 && srcArr1 === srcArr2 && tgtArr1 === tgtArr2 && lineW1 === lineW2 && arrScl1 === arrScl2 && (edgeIndex1 === edgeIndex2 && numEdges1 === numEdges2 || edgeIsUnbundled)) {
              ptCacheHit = true; // then the control points haven't changed and we can skip calculating them
            } else {
              ptCacheHit = false;

              rs.lastSrcCtlPtX = srcX2;
              rs.lastSrcCtlPtY = srcY2;
              rs.lastSrcCtlPtW = srcW2;
              rs.lastSrcCtlPtH = srcH2;
              rs.lastTgtCtlPtX = tgtX2;
              rs.lastTgtCtlPtY = tgtY2;
              rs.lastTgtCtlPtW = tgtW2;
              rs.lastTgtCtlPtH = tgtH2;
              rs.lastEdgeIndex = edgeIndex2;
              rs.lastNumEdges = numEdges2;
              rs.lastCurveStyle = curveStyle2;
              rs.lastCtrlptDists = ctrlptDists2;
              rs.lastCtrlptWs = ctrlptWs2;
              rs.lastSegmentDs = segmentDs2;
              rs.lastSegmentWs = segmentWs2;
              rs.lastStepSize = stepSize2;
              rs.lastLoopDir = loopDir2;
              rs.lastLoopSwp = loopSwp2;
              rs.lastEdgeDistances = edgeDistances2;
              rs.lastSrcEndpt = srcEndpt2;
              rs.lastTgtEndpt = tgtEndpt2;
              rs.lastSrcArr = srcArr2;
              rs.lastTgtArr = tgtArr2;
              rs.lastLineW = lineW2;
              rs.lastArrScl = arrScl2;
            }

            if (!ptCacheHit) {

              if (!pairEdges.calculatedIntersection && src !== tgt && (pairEdges.hasBezier || pairEdges.hasUnbundled)) {

                pairEdges.calculatedIntersection = true;

                // pt outside src shape to calc distance/displacement from src to tgt
                var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);

                pairEdges.srcIntn = srcOutside;

                // pt outside tgt shape to calc distance/displacement from src to tgt
                var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);

                pairEdges.tgtIntn = tgtOutside;

                var midptSrcPts = {
                  x1: srcOutside[0],
                  x2: tgtOutside[0],
                  y1: srcOutside[1],
                  y2: tgtOutside[1]
                };

                var posPts = {
                  x1: srcPos.x,
                  x2: tgtPos.x,
                  y1: srcPos.y,
                  y2: tgtPos.y
                };

                var dy = tgtOutside[1] - srcOutside[1];
                var dx = tgtOutside[0] - srcOutside[0];
                var l = Math.sqrt(dx * dx + dy * dy);

                var vector = {
                  x: dx,
                  y: dy
                };

                var vectorNorm = {
                  x: vector.x / l,
                  y: vector.y / l
                };
                vectorNormInverse = {
                  x: -vectorNorm.y,
                  y: vectorNorm.x
                };

                // if node shapes overlap, then no ctrl pts to draw
                if (tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) && srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y)) {
                  vectorNormInverse = {};
                  badBezier = true;
                }
              }

              if (!edgeIsSwapped) {
                rs.srcIntn = pairEdges.srcIntn;
                rs.tgtIntn = pairEdges.tgtIntn;
              } else {
                // ensure that the per-edge cached value for intersections are correct for swapped bundled edges
                rs.srcIntn = pairEdges.tgtIntn;
                rs.tgtIntn = pairEdges.srcIntn;
              }

              if (src === tgt) {
                // Self-edge

                rs.edgeType = 'self';

                var j = i;
                var loopDist = stepSize;

                if (edgeIsUnbundled) {
                  j = 0;
                  loopDist = ctrlptDist;
                }

                var loopAngle = loopDir - Math.PI / 2;
                var outAngle = loopAngle - loopSwp / 2;
                var inAngle = loopAngle + loopSwp / 2;

                // increase by step size for overlapping loops, keyed on direction and sweep values
                var dc = String(loopDir + '_' + loopSwp);
                j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];

                rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
              } else if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src))) {
                // Compound edge

                rs.edgeType = 'compound';

                // because the line approximation doesn't apply for compound beziers
                // (loop/self edges are already elided b/c of cheap src==tgt check)
                rs.badBezier = false;

                var j = i;
                var loopDist = stepSize;

                if (edgeIsUnbundled) {
                  j = 0;
                  loopDist = ctrlptDist;
                }

                var loopW = 50;

                var loopaPos = {
                  x: srcPos.x - srcW / 2,
                  y: srcPos.y - srcH / 2
                };

                var loopbPos = {
                  x: tgtPos.x - tgtW / 2,
                  y: tgtPos.y - tgtH / 2
                };

                var loopPos = {
                  x: Math.min(loopaPos.x, loopbPos.x),
                  y: Math.min(loopaPos.y, loopbPos.y)
                };

                // avoids cases with impossible beziers
                var minCompoundStretch = 0.5;
                var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
                var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));

                rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
              } else if (curveStyle === 'segments') {
                // Segments (multiple straight lines)

                rs.edgeType = 'segments';
                rs.segpts = [];

                for (var s = 0; s < segmentsN; s++) {
                  var w = segmentWs.pfValue[s];
                  var d = segmentDs.pfValue[s];

                  var w1 = 1 - w;
                  var w2 = w;

                  var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

                  var adjustedMidpt = {
                    x: midptPts.x1 * w1 + midptPts.x2 * w2,
                    y: midptPts.y1 * w1 + midptPts.y2 * w2
                  };

                  rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
                }

                // Straight edge
              } else if (pairEdges.length % 2 === 1 && i === Math.floor(pairEdges.length / 2) && !edgeIsUnbundled) {

                rs.edgeType = 'straight';
              } else {
                // (Multi)bezier

                var multi = edgeIsUnbundled;

                rs.edgeType = multi ? 'multibezier' : 'bezier';
                rs.ctrlpts = [];

                for (var b = 0; b < bezierN; b++) {
                  var normctrlptDist = (0.5 - pairEdges.length / 2 + i) * stepSize;
                  var manctrlptDist;
                  var sign = math.signum(normctrlptDist);

                  if (multi) {
                    ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size
                    ctrlptWeight = ctrlptWs.value[b];
                  }

                  if (edgeIsUnbundled) {
                    // multi or single unbundled
                    manctrlptDist = ctrlptDist;
                  } else {
                    manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
                  }

                  var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;

                  var w1 = 1 - ctrlptWeight;
                  var w2 = ctrlptWeight;

                  if (edgeIsSwapped) {
                    var temp = w1;
                    w1 = w2;
                    w2 = temp;
                  }

                  var midptPts = edgeDistances === 'node-position' ? posPts : midptSrcPts;

                  var adjustedMidpt = {
                    x: midptPts.x1 * w1 + midptPts.x2 * w2,
                    y: midptPts.y1 * w1 + midptPts.y2 * w2
                  };

                  rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
                }
              }

              // find endpts for edge
              this.findEndpoints(edge);

              var badStart = !is.number(rs.startX) || !is.number(rs.startY);
              var badAStart = !is.number(rs.arrowStartX) || !is.number(rs.arrowStartY);
              var badEnd = !is.number(rs.endX) || !is.number(rs.endY);
              var badAEnd = !is.number(rs.arrowEndX) || !is.number(rs.arrowEndY);

              var minCpADistFactor = 3;
              var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
              var minCpADist = minCpADistFactor * arrowW;

              if (rs.edgeType === 'bezier') {
                var startACpDist = math.dist({ x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.startX, y: rs.startY });
                var closeStartACp = startACpDist < minCpADist;
                var endACpDist = math.dist({ x: rs.ctrlpts[0], y: rs.ctrlpts[1] }, { x: rs.endX, y: rs.endY });
                var closeEndACp = endACpDist < minCpADist;

                var overlapping = false;

                if (badStart || badAStart || closeStartACp) {
                  overlapping = true;

                  // project control point along line from src centre to outside the src shape
                  // (otherwise intersection will yield nothing)
                  var cpD = { // delta
                    x: rs.ctrlpts[0] - srcPos.x,
                    y: rs.ctrlpts[1] - srcPos.y
                  };
                  var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line
                  var cpM = { // normalised delta
                    x: cpD.x / cpL,
                    y: cpD.y / cpL
                  };
                  var radius = Math.max(srcW, srcH);
                  var cpProj = { // *2 radius guarantees outside shape
                    x: rs.ctrlpts[0] + cpM.x * 2 * radius,
                    y: rs.ctrlpts[1] + cpM.y * 2 * radius
                  };

                  var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

                  if (closeStartACp) {
                    rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
                    rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
                  } else {
                    rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
                    rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
                  }
                }

                if (badEnd || badAEnd || closeEndACp) {
                  overlapping = true;

                  // project control point along line from tgt centre to outside the tgt shape
                  // (otherwise intersection will yield nothing)
                  var cpD = { // delta
                    x: rs.ctrlpts[0] - tgtPos.x,
                    y: rs.ctrlpts[1] - tgtPos.y
                  };
                  var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line
                  var cpM = { // normalised delta
                    x: cpD.x / cpL,
                    y: cpD.y / cpL
                  };
                  var radius = Math.max(srcW, srcH);
                  var cpProj = { // *2 radius guarantees outside shape
                    x: rs.ctrlpts[0] + cpM.x * 2 * radius,
                    y: rs.ctrlpts[1] + cpM.y * 2 * radius
                  };

                  var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, cpProj.x, cpProj.y, 0);

                  if (closeEndACp) {
                    rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - endACpDist);
                    rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - endACpDist);
                  } else {
                    rs.ctrlpts[0] = tgtCtrlPtIntn[0] + cpM.x * minCpADist;
                    rs.ctrlpts[1] = tgtCtrlPtIntn[1] + cpM.y * minCpADist;
                  }
                }

                if (overlapping) {
                  // recalc endpts
                  this.findEndpoints(edge);
                }
              }

              if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
                rs.allpts = [];

                rs.allpts.push(rs.startX, rs.startY);

                for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
                  // ctrl pt itself
                  rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]);

                  // the midpt between ctrlpts as intermediate destination pts
                  if (b + 3 < rs.ctrlpts.length) {
                    rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
                  }
                }

                rs.allpts.push(rs.endX, rs.endY);

                var m, mt;
                if (rs.ctrlpts.length / 2 % 2 === 0) {
                  m = rs.allpts.length / 2 - 1;

                  rs.midX = rs.allpts[m];
                  rs.midY = rs.allpts[m + 1];
                } else {
                  m = rs.allpts.length / 2 - 3;
                  mt = 0.5;

                  rs.midX = math.qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
                  rs.midY = math.qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
                }
              } else if (rs.edgeType === 'straight') {
                // need to calc these after endpts
                rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY];

                // default midpt for labels etc
                rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
                rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
              } else if (rs.edgeType === 'segments') {
                rs.allpts = [];
                rs.allpts.push(rs.startX, rs.startY);
                rs.allpts.push.apply(rs.allpts, rs.segpts);
                rs.allpts.push(rs.endX, rs.endY);

                if (rs.segpts.length % 4 === 0) {
                  var i2 = rs.segpts.length / 2;
                  var i1 = i2 - 2;

                  rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
                  rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
                } else {
                  var i1 = rs.segpts.length / 2 - 1;

                  rs.midX = rs.segpts[i1];
                  rs.midY = rs.segpts[i1 + 1];
                }
              }

              this.storeEdgeProjections(edge);
              this.calculateArrowAngles(edge);
            } // if point cache miss

            this.recalculateEdgeLabelProjections(edge);
            this.calculateLabelAngles(edge);
          } // for pair edges
        } // for pair ids

        for (var i = 0; i < haystackEdges.length; i++) {
          var edge = haystackEdges[i];
          var _p = edge._private;
          var rscratch = _p.rscratch;
          var rs = rscratch;

          if (!rscratch.haystack) {
            var angle = Math.random() * 2 * Math.PI;

            rscratch.source = {
              x: Math.cos(angle),
              y: Math.sin(angle)
            };

            var angle = Math.random() * 2 * Math.PI;

            rscratch.target = {
              x: Math.cos(angle),
              y: Math.sin(angle)
            };
          }

          var src = _p.source;
          var tgt = _p.target;
          var srcPos = src.position();
          var tgtPos = tgt.position();
          var srcW = src.width();
          var tgtW = tgt.width();
          var srcH = src.height();
          var tgtH = tgt.height();
          var radius = edge.pstyle('haystack-radius').value;
          var halfRadius = radius / 2; // b/c have to half width/height

          rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];

          rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
          rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2;

          // always override as haystack in case set to different type previously
          rscratch.edgeType = rscratch.lastCurveStyle = 'haystack';
          rscratch.haystack = true;

          this.storeEdgeProjections(edge);
          this.calculateArrowAngles(edge);
          this.recalculateEdgeLabelProjections(edge);
          this.calculateLabelAngles(edge);
        }
      };

      function getPts(pts) {
        var retPts = [];

        if (pts == null) {
          return;
        }

        for (var i = 0; i < pts.length; i += 2) {
          var x = pts[i];
          var y = pts[i + 1];

          retPts.push({ x: x, y: y });
        }

        return retPts;
      }

      BRp.getSegmentPoints = function (edge) {
        var rs = edge[0]._private.rscratch;
        var type = rs.edgeType;

        if (type === 'segments') {
          return getPts(rs.segpts);
        }
      };

      BRp.getControlPoints = function (edge) {
        var rs = edge[0]._private.rscratch;
        var type = rs.edgeType;

        if (type === 'bezier' || type === 'multibezier') {
          return getPts(rs.ctrlpts);
        }
      };

      BRp.getEdgeMidpoint = function (edge) {
        var rs = edge[0]._private.rscratch;

        return {
          x: rs.midX,
          y: rs.midY
        };
      };

      module.exports = BRp;

      /***/
    },
    /* 113 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);
      var is = __webpack_require__(0);

      var BRp = {};

      BRp.manualEndptToPx = function (node, prop) {
        var r = this;
        var npos = node.position();
        var w = node.outerWidth();
        var h = node.outerHeight();

        if (prop.value.length === 2) {
          var p = [prop.pfValue[0], prop.pfValue[1]];

          if (prop.units[0] === '%') {
            p[0] = p[0] * w;
          }

          if (prop.units[1] === '%') {
            p[1] = p[1] * h;
          }

          p[0] += npos.x;
          p[1] += npos.y;

          return p;
        } else {
          var angle = prop.pfValue[0];

          angle = -Math.PI / 2 + angle; // start at 12 o'clock

          var l = 2 * Math.max(w, h);

          var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];

          return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
        }
      };

      BRp.findEndpoints = function (edge) {
        var r = this;
        var intersect = void 0;

        var source = edge.source()[0];
        var target = edge.target()[0];

        var srcPos = source.position();
        var tgtPos = target.position();

        var tgtArShape = edge.pstyle('target-arrow-shape').value;
        var srcArShape = edge.pstyle('source-arrow-shape').value;

        var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
        var srcDist = edge.pstyle('source-distance-from-node').pfValue;

        var rs = edge._private.rscratch;

        var et = rs.edgeType;
        var self = et === 'self' || et === 'compound';
        var bezier = et === 'bezier' || et === 'multibezier' || self;
        var multi = et !== 'bezier';
        var lines = et === 'straight' || et === 'segments';
        var segments = et === 'segments';
        var hasEndpts = bezier || multi || lines;
        var srcManEndpt = edge.pstyle('source-endpoint');
        var srcManEndptVal = self ? 'outside-to-node' : srcManEndpt.value;
        var tgtManEndpt = edge.pstyle('target-endpoint');
        var tgtManEndptVal = self ? 'outside-to-node' : tgtManEndpt.value;

        rs.srcManEndpt = srcManEndpt;
        rs.tgtManEndpt = tgtManEndpt;

        var p1 = void 0; // last known point of edge on target side
        var p2 = void 0; // last known point of edge on source side

        var p1_i = void 0; // point to intersect with target shape
        var p2_i = void 0; // point to intersect with source shape

        if (bezier) {
          var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
          var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;

          p1 = cpEnd;
          p2 = cpStart;
        } else if (lines) {
          var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
          var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);

          p1 = tgtArrowFromPt;
          p2 = srcArrowFromPt;
        }

        if (tgtManEndptVal === 'inside-to-node') {
          intersect = [tgtPos.x, tgtPos.y];
        } else if (tgtManEndpt.units) {
          intersect = this.manualEndptToPx(target, tgtManEndpt);
        } else if (tgtManEndptVal === 'outside-to-line') {
          intersect = rs.tgtIntn; // use cached value from ctrlpt calc
        } else {
          if (tgtManEndptVal === 'outside-to-node') {
            p1_i = p1;
          } else if (tgtManEndptVal === 'outside-to-line') {
            p1_i = [srcPos.x, srcPos.y];
          }

          intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);
        }

        var arrowEnd = math.shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
        var edgeEnd = math.shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);

        rs.endX = edgeEnd[0];
        rs.endY = edgeEnd[1];

        rs.arrowEndX = arrowEnd[0];
        rs.arrowEndY = arrowEnd[1];

        if (srcManEndptVal === 'inside-to-node') {
          intersect = [srcPos.x, srcPos.y];
        } else if (srcManEndpt.units) {
          intersect = this.manualEndptToPx(source, srcManEndpt);
        } else if (srcManEndptVal === 'outside-to-line') {
          intersect = rs.srcIntn; // use cached value from ctrlpt calc
        } else {
          if (srcManEndptVal === 'outside-to-node') {
            p2_i = p2;
          } else if (srcManEndptVal === 'outside-to-line') {
            p2_i = [tgtPos.x, tgtPos.y];
          }

          intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);
        }

        var arrowStart = math.shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
        var edgeStart = math.shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);

        rs.startX = edgeStart[0];
        rs.startY = edgeStart[1];

        rs.arrowStartX = arrowStart[0];
        rs.arrowStartY = arrowStart[1];

        if (hasEndpts) {
          if (!is.number(rs.startX) || !is.number(rs.startY) || !is.number(rs.endX) || !is.number(rs.endY)) {
            rs.badLine = true;
          } else {
            rs.badLine = false;
          }
        }
      };

      BRp.getSourceEndpoint = function (edge) {
        var rs = edge[0]._private.rscratch;

        switch (rs.edgeType) {
          case 'haystack':
            return {
              x: rs.haystackPts[0],
              y: rs.haystackPts[1]
            };
          default:
            return {
              x: rs.arrowStartX,
              y: rs.arrowStartY
            };
        }
      };

      BRp.getTargetEndpoint = function (edge) {
        var rs = edge[0]._private.rscratch;

        switch (rs.edgeType) {
          case 'haystack':
            return {
              x: rs.haystackPts[2],
              y: rs.haystackPts[3]
            };
          default:
            return {
              x: rs.arrowEndX,
              y: rs.arrowEndY
            };
        }
      };

      module.exports = BRp;

      /***/
    },
    /* 114 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);

      var BRp = {};

      function pushBezierPts(r, edge, pts) {
        var qbezierAt = function qbezierAt(p1, p2, p3, t) {
          return math.qbezierAt(p1, p2, p3, t);
        };
        var _p = edge._private;
        var bpts = _p.rstyle.bezierPts;

        for (var i = 0; i < r.bezierProjPcts.length; i++) {
          var p = r.bezierProjPcts[i];

          bpts.push({
            x: qbezierAt(pts[0], pts[2], pts[4], p),
            y: qbezierAt(pts[1], pts[3], pts[5], p)
          });
        }
      }

      BRp.storeEdgeProjections = function (edge) {
        var _p = edge._private;
        var rs = _p.rscratch;
        var et = rs.edgeType;

        // clear the cached points state
        _p.rstyle.bezierPts = null;
        _p.rstyle.linePts = null;
        _p.rstyle.haystackPts = null;

        if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
          var bpts = _p.rstyle.bezierPts = []; // jshint ignore:line

          for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
            pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
          }
        } else if (et === 'segments') {
          var lpts = _p.rstyle.linePts = [];

          for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
            lpts.push({
              x: rs.allpts[i],
              y: rs.allpts[i + 1]
            });
          }
        } else if (et === 'haystack') {
          var hpts = rs.haystackPts;

          _p.rstyle.haystackPts = [{ x: hpts[0], y: hpts[1] }, { x: hpts[2], y: hpts[3] }];
        }

        _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
      };

      BRp.recalculateEdgeProjections = function (edges) {
        this.findEdgeControlPoints(edges);
      };

      module.exports = BRp;

      /***/
    },
    /* 115 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);
      var is = __webpack_require__(0);
      var util = __webpack_require__(1);

      var BRp = {};

      BRp.recalculateNodeLabelProjection = function (node) {
        var content = node.pstyle('label').strValue;

        if (is.emptyString(content)) {
          return;
        }

        var textX, textY;
        var _p = node._private;
        var nodeWidth = node.width();
        var nodeHeight = node.height();
        var padding = node.padding();
        var nodePos = node.position();
        var textHalign = node.pstyle('text-halign').strValue;
        var textValign = node.pstyle('text-valign').strValue;
        var rs = _p.rscratch;
        var rstyle = _p.rstyle;

        switch (textHalign) {
          case 'left':
            textX = nodePos.x - nodeWidth / 2 - padding;
            break;

          case 'right':
            textX = nodePos.x + nodeWidth / 2 + padding;
            break;

          default:
            // e.g. center
            textX = nodePos.x;
        }

        switch (textValign) {
          case 'top':
            textY = nodePos.y - nodeHeight / 2 - padding;
            break;

          case 'bottom':
            textY = nodePos.y + nodeHeight / 2 + padding;
            break;

          default:
            // e.g. middle
            textY = nodePos.y;
        }

        rs.labelX = textX;
        rs.labelY = textY;
        rstyle.labelX = textX;
        rstyle.labelY = textY;

        this.applyLabelDimensions(node);
      };

      BRp.recalculateEdgeLabelProjections = function (edge) {
        var p;
        var _p = edge._private;
        var rs = _p.rscratch;
        var r = this;
        var content = {
          mid: edge.pstyle('label').strValue,
          source: edge.pstyle('source-label').strValue,
          target: edge.pstyle('target-label').strValue
        };

        if (content.mid || content.source || content.target) {
          // then we have to calculate...
        } else {
            return; // no labels => no calcs
          }

        // add center point to style so bounding box calculations can use it
        //
        p = {
          x: rs.midX,
          y: rs.midY
        };

        var setRs = function setRs(propName, prefix, value) {
          util.setPrefixedProperty(_p.rscratch, propName, prefix, value);
          util.setPrefixedProperty(_p.rstyle, propName, prefix, value);
        };

        setRs('labelX', null, p.x);
        setRs('labelY', null, p.y);

        var createControlPointInfo = function createControlPointInfo() {
          if (createControlPointInfo.cache) {
            return createControlPointInfo.cache;
          } // use cache so only 1x per edge

          var ctrlpts = [];

          // store each ctrlpt info init
          for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
            var p0 = { x: rs.allpts[i], y: rs.allpts[i + 1] };
            var p1 = { x: rs.allpts[i + 2], y: rs.allpts[i + 3] }; // ctrlpt
            var p2 = { x: rs.allpts[i + 4], y: rs.allpts[i + 5] };

            ctrlpts.push({
              p0: p0,
              p1: p1,
              p2: p2,
              startDist: 0,
              length: 0,
              segments: []
            });
          }

          var bpts = _p.rstyle.bezierPts;
          var nProjs = r.bezierProjPcts.length;

          function addSegment(cp, p0, p1, t0, t1) {
            var length = math.dist(p0, p1);
            var prevSegment = cp.segments[cp.segments.length - 1];
            var segment = {
              p0: p0,
              p1: p1,
              t0: t0,
              t1: t1,
              startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
              length: length
            };

            cp.segments.push(segment);

            cp.length += length;
          }

          // update each ctrlpt with segment info
          for (var i = 0; i < ctrlpts.length; i++) {
            var cp = ctrlpts[i];
            var prevCp = ctrlpts[i - 1];

            if (prevCp) {
              cp.startDist = prevCp.startDist + prevCp.length;
            }

            addSegment(cp, cp.p0, bpts[i * nProjs], 0, r.bezierProjPcts[0]); // first

            for (var j = 0; j < nProjs - 1; j++) {
              addSegment(cp, bpts[i * nProjs + j], bpts[i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
            }

            addSegment(cp, bpts[i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
          }

          return createControlPointInfo.cache = ctrlpts;
        };

        var calculateEndProjection = function calculateEndProjection(prefix) {
          var angle;
          var isSrc = prefix === 'source';

          if (!content[prefix]) {
            return;
          }

          var offset = edge.pstyle(prefix + '-text-offset').pfValue;

          var lineAngle = function lineAngle(p0, p1) {
            var dx = p1.x - p0.x;
            var dy = p1.y - p0.y;

            return Math.atan(dy / dx);
          };

          var bezierAngle = function bezierAngle(p0, p1, p2, t) {
            var t0 = math.bound(0, t - 0.001, 1);
            var t1 = math.bound(0, t + 0.001, 1);

            var lp0 = math.qbezierPtAt(p0, p1, p2, t0);
            var lp1 = math.qbezierPtAt(p0, p1, p2, t1);

            return lineAngle(lp0, lp1);
          };

          switch (rs.edgeType) {
            case 'self':
            case 'compound':
            case 'bezier':
            case 'multibezier':
              var cps = createControlPointInfo();
              var selected;
              var startDist = 0;
              var totalDist = 0;

              // find the segment we're on
              for (var i = 0; i < cps.length; i++) {
                var cp = cps[isSrc ? i : cps.length - 1 - i];

                for (var j = 0; j < cp.segments.length; j++) {
                  var seg = cp.segments[isSrc ? j : cp.segments.length - 1 - j];
                  var lastSeg = i === cps.length - 1 && j === cp.segments.length - 1;

                  startDist = totalDist;
                  totalDist += seg.length;

                  if (totalDist >= offset || lastSeg) {
                    selected = { cp: cp, segment: seg };
                    break;
                  }
                }

                if (selected) {
                  break;
                }
              }

              var cp = selected.cp;
              var seg = selected.segment;
              var tSegment = (offset - startDist) / seg.length;
              var segDt = seg.t1 - seg.t0;
              var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;

              t = math.bound(0, t, 1);
              p = math.qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
              angle = bezierAngle(cp.p0, cp.p1, cp.p2, t, p);

              break;

            case 'straight':
            case 'segments':
            case 'haystack':
              var d = 0,
                  di,
                  d0;
              var p0, p1;
              var l = rs.allpts.length;

              for (var i = 0; i + 3 < l; i += 2) {
                if (isSrc) {
                  p0 = { x: rs.allpts[i], y: rs.allpts[i + 1] };
                  p1 = { x: rs.allpts[i + 2], y: rs.allpts[i + 3] };
                } else {
                  p0 = { x: rs.allpts[l - 2 - i], y: rs.allpts[l - 1 - i] };
                  p1 = { x: rs.allpts[l - 4 - i], y: rs.allpts[l - 3 - i] };
                }

                di = math.dist(p0, p1);
                d0 = d;
                d += di;

                if (d >= offset) {
                  break;
                }
              }

              var pD = offset - d0;
              var t = pD / di;

              t = math.bound(0, t, 1);
              p = math.lineAt(p0, p1, t);
              angle = lineAngle(p0, p1);

              break;
          }

          setRs('labelX', prefix, p.x);
          setRs('labelY', prefix, p.y);
          setRs('labelAutoAngle', prefix, angle);
        };

        calculateEndProjection('source');
        calculateEndProjection('target');

        this.applyLabelDimensions(edge);
      };

      BRp.applyLabelDimensions = function (ele) {
        this.applyPrefixedLabelDimensions(ele);

        if (ele.isEdge()) {
          this.applyPrefixedLabelDimensions(ele, 'source');
          this.applyPrefixedLabelDimensions(ele, 'target');
        }
      };

      BRp.applyPrefixedLabelDimensions = function (ele, prefix) {
        var _p = ele._private;

        var text = this.getLabelText(ele, prefix);
        var labelDims = this.calculateLabelDimensions(ele, text);

        util.setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, labelDims.width);
        util.setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, labelDims.width);

        util.setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, labelDims.height);
        util.setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, labelDims.height);
      };

      BRp.getLabelText = function (ele, prefix) {
        var _p = ele._private;
        var pfd = prefix ? prefix + '-' : '';
        var text = ele.pstyle(pfd + 'label').strValue;
        var textTransform = ele.pstyle('text-transform').value;
        var rscratch = function rscratch(propName, value) {
          if (value) {
            util.setPrefixedProperty(_p.rscratch, propName, prefix, value);
            return value;
          } else {
            return util.getPrefixedProperty(_p.rscratch, propName, prefix);
          }
        };

        if (textTransform == 'none') {
          // passthrough
        } else if (textTransform == 'uppercase') {
          text = text.toUpperCase();
        } else if (textTransform == 'lowercase') {
          text = text.toLowerCase();
        }

        var wrapStyle = ele.pstyle('text-wrap').value;

        if (wrapStyle === 'wrap') {
          //console.log('wrap');

          var labelKey = rscratch('labelKey');

          // save recalc if the label is the same as before
          if (labelKey && rscratch('labelWrapKey') === labelKey) {
            // console.log('wrap cache hit');
            return rscratch('labelWrapCachedText');
          }
          // console.log('wrap cache miss');

          var lines = text.split('\n');
          var maxW = ele.pstyle('text-max-width').pfValue;
          var wrappedLines = [];

          for (var l = 0; l < lines.length; l++) {
            var line = lines[l];
            var lineDims = this.calculateLabelDimensions(ele, line, 'line=' + line);
            var lineW = lineDims.width;

            if (lineW > maxW) {
              // line is too long
              var words = line.split(/\s+/); // NB: assume collapsed whitespace into single space
              var subline = '';

              for (var w = 0; w < words.length; w++) {
                var word = words[w];
                var testLine = subline.length === 0 ? word : subline + ' ' + word;
                var testDims = this.calculateLabelDimensions(ele, testLine, 'testLine=' + testLine);
                var testW = testDims.width;

                if (testW <= maxW) {
                  // word fits on current line
                  subline += word + ' ';
                } else {
                  // word starts new line
                  wrappedLines.push(subline);
                  subline = word + ' ';
                }
              }

              // if there's remaining text, put it in a wrapped line
              if (!subline.match(/^\s+$/)) {
                wrappedLines.push(subline);
              }
            } else {
              // line is already short enough
              wrappedLines.push(line);
            }
          } // for

          rscratch('labelWrapCachedLines', wrappedLines);
          text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
          rscratch('labelWrapKey', labelKey);

          // console.log(text)
        } else if (wrapStyle === 'ellipsis') {
          var maxW = ele.pstyle('text-max-width').pfValue;
          var ellipsized = '';
          var ellipsis = '\u2026';
          var incLastCh = false;

          for (var i = 0; i < text.length; i++) {
            var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

            if (widthWithNextCh > maxW) {
              break;
            }

            ellipsized += text[i];

            if (i === text.length - 1) {
              incLastCh = true;
            }
          }

          if (!incLastCh) {
            ellipsized += ellipsis;
          }

          return ellipsized;
        } // if ellipsize

        return text;
      };

      BRp.calculateLabelDimensions = function (ele, text, extraKey) {
        var r = this;

        var cacheKey = ele._private.labelStyleKey + '$@$' + text;

        if (extraKey) {
          cacheKey += '$@$' + extraKey;
        }

        var cache = r.labelDimCache || (r.labelDimCache = {});

        if (cache[cacheKey]) {
          return cache[cacheKey];
        }

        var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text
        var fStyle = ele.pstyle('font-style').strValue;
        var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';
        var family = ele.pstyle('font-family').strValue;
        var weight = ele.pstyle('font-weight').strValue;

        var div = this.labelCalcDiv;

        if (!div) {
          div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef
          document.body.appendChild(div); // eslint-disable-line no-undef
        }

        var ds = div.style;

        // from ele style
        ds.fontFamily = family;
        ds.fontStyle = fStyle;
        ds.fontSize = size;
        ds.fontWeight = weight;

        // forced style
        ds.position = 'absolute';
        ds.left = '-9999px';
        ds.top = '-9999px';
        ds.zIndex = '-1';
        ds.visibility = 'hidden';
        ds.pointerEvents = 'none';
        ds.padding = '0';
        ds.lineHeight = '1';

        if (ele.pstyle('text-wrap').value === 'wrap') {
          ds.whiteSpace = 'pre'; // so newlines are taken into account
        } else {
          ds.whiteSpace = 'normal';
        }

        // put label content in div
        div.textContent = text;

        cache[cacheKey] = {
          width: Math.ceil(div.clientWidth / sizeMult),
          height: Math.ceil(div.clientHeight / sizeMult)
        };

        return cache[cacheKey];
      };

      BRp.calculateLabelAngles = function (ele) {
        var _p = ele._private;
        var rs = _p.rscratch;
        var isEdge = ele.isEdge();
        var rot = ele.pstyle('text-rotation');
        var rotStr = rot.strValue;

        if (rotStr === 'none') {
          rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
        } else if (isEdge && rotStr === 'autorotate') {
          rs.labelAngle = Math.atan(rs.midDispY / rs.midDispX);
          rs.sourceLabelAngle = rs.sourceLabelAutoAngle;
          rs.targetLabelAngle = rs.targetLabelAutoAngle;
        } else if (rotStr === 'autorotate') {
          rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = 0;
        } else {
          rs.labelAngle = rs.sourceLabelAngle = rs.targetLabelAngle = rot.pfValue;
        }
      };

      module.exports = BRp;

      /***/
    },
    /* 116 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var BRp = {};

      BRp.getNodeShape = function (node) {
        var r = this;
        var shape = node.pstyle('shape').value;

        if (node.isParent()) {
          if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {
            return shape;
          } else {
            return 'rectangle';
          }
        }

        if (shape === 'polygon') {
          var points = node.pstyle('shape-polygon-points').value;

          return r.nodeShapes.makePolygon(points).name;
        }

        return shape;
      };

      module.exports = BRp;

      /***/
    },
    /* 117 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var BRp = {};

      BRp.registerCalculationListeners = function () {
        var cy = this.cy;
        var elesToUpdate = cy.collection();
        var r = this;

        var enqueue = function enqueue(eles, e) {
          var dirtyStyleCaches = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

          elesToUpdate.merge(eles);

          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var _p = ele._private;
            var rstyle = _p.rstyle;

            if (dirtyStyleCaches) {
              rstyle.clean = false;
              _p.bbCache = null;
            }

            var evts = rstyle.dirtyEvents = rstyle.dirtyEvents || { length: 0 };

            if (!evts[e.type]) {
              evts[e.type] = true;
              evts.length++;
            }
          }
        };

        r.binder(cy)
        // nodes

        .on('position.* style.* free.* bounds.*', 'node', function onDirtyModNode(e) {
          var node = e.target;

          enqueue(node, e);
          enqueue(node.connectedEdges(), e);
        }).on('add.*', 'node', function onDirtyAddNode(e) {
          var ele = e.target;

          enqueue(ele, e);
        }).on('background.*', 'node', function onDirtyBgNode(e) {
          var ele = e.target;

          enqueue(ele, e, false);
        })

        // edges

        .on('add.* style.*', 'edge', function onDirtyEdge(e) {
          var edge = e.target;

          enqueue(edge, e);
          enqueue(edge.parallelEdges(), e);
        }).on('remove.*', 'edge', function onDirtyRemoveEdge(e) {
          var edge = e.target;
          var pEdges = edge.parallelEdges();

          for (var i = 0; i < pEdges.length; i++) {
            var pEdge = pEdges[i];

            if (!pEdge.removed()) {
              enqueue(pEdge, e);
            }
          }
        })

        // manual dirtying

        .on('dirty.*', 'node', function onDirtyEle(e) {
          var ele = e.target;

          enqueue(ele, e);
        });

        var updateEleCalcs = function updateEleCalcs(willDraw) {
          if (willDraw) {
            var fns = r.onUpdateEleCalcsFns;

            if (fns) {
              for (var i = 0; i < fns.length; i++) {
                var fn = fns[i];

                fn(willDraw, elesToUpdate);
              }
            }

            r.recalculateRenderedStyle(elesToUpdate, false);

            for (var i = 0; i < elesToUpdate.length; i++) {
              elesToUpdate[i]._private.rstyle.dirtyEvents = null;
            }

            elesToUpdate = cy.collection();
          }
        };

        r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
      };

      BRp.onUpdateEleCalcs = function (fn) {
        var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];

        fns.push(fn);
      };

      BRp.recalculateRenderedStyle = function (eles, useCache) {
        var edges = [];
        var nodes = [];

        // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()
        if (this.destroyed) {
          return;
        }

        // use cache by default for perf
        if (useCache === undefined) {
          useCache = true;
        }

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var _p = ele._private;
          var rstyle = _p.rstyle;

          // only update if dirty and in graph
          if (useCache && rstyle.clean || ele.removed()) {
            continue;
          }

          // only update if not display: none
          if (ele.pstyle('display').value === 'none') {
            continue;
          }

          if (_p.group === 'nodes') {
            nodes.push(ele);
          } else {
            // edges
            edges.push(ele);
          }

          rstyle.clean = true;
          // rstyle.dirtyEvents = null;
        }

        // update node data from projections
        for (var i = 0; i < nodes.length; i++) {
          var ele = nodes[i];
          var _p = ele._private;
          var rstyle = _p.rstyle;
          var pos = ele.position();

          this.recalculateNodeLabelProjection(ele);

          rstyle.nodeX = pos.x;
          rstyle.nodeY = pos.y;
          rstyle.nodeW = ele.pstyle('width').pfValue;
          rstyle.nodeH = ele.pstyle('height').pfValue;
        }

        this.recalculateEdgeProjections(edges);

        // update edge data from projections
        for (var i = 0; i < edges.length; i++) {
          var ele = edges[i];
          var _p = ele._private;
          var rstyle = _p.rstyle;
          var rs = _p.rscratch;

          this.recalculateEdgeLabelProjections(ele);

          // update rstyle positions
          rstyle.srcX = rs.arrowStartX;
          rstyle.srcY = rs.arrowStartY;
          rstyle.tgtX = rs.arrowEndX;
          rstyle.tgtY = rs.arrowEndY;
          rstyle.midX = rs.midX;
          rstyle.midY = rs.midY;
          rstyle.labelAngle = rs.labelAngle;
          rstyle.sourceLabelAngle = rs.sourceLabelAngle;
          rstyle.targetLabelAngle = rs.targetLabelAngle;
        }
      };

      module.exports = BRp;

      /***/
    },
    /* 118 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var zIndexSort = __webpack_require__(17);

      var BRp = {};

      BRp.updateCachedGrabbedEles = function () {
        var eles = this.cachedZSortedEles;

        if (!eles) {
          // just let this be recalculated on the next z sort tick
          return;
        }

        eles.drag = [];
        eles.nondrag = [];

        var grabTargets = [];

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var rs = ele._private.rscratch;

          if (ele.grabbed() && !ele.isParent()) {
            grabTargets.push(ele);
          } else if (rs.inDragLayer) {
            eles.drag.push(ele);
          } else {
            eles.nondrag.push(ele);
          }
        }

        // put the grab target nodes last so it's on top of its neighbourhood
        for (var i = 0; i < grabTargets.length; i++) {
          var ele = grabTargets[i];

          eles.drag.push(ele);
        }
      };

      BRp.invalidateCachedZSortedEles = function () {
        this.cachedZSortedEles = null;
      };

      BRp.getCachedZSortedEles = function (forceRecalc) {
        if (forceRecalc || !this.cachedZSortedEles) {
          //console.time('cachezorder')

          var eles = this.cy.mutableElements().toArray();

          eles.sort(zIndexSort);

          eles.interactive = eles.filter(function (ele) {
            return ele.interactive();
          });

          this.cachedZSortedEles = eles;

          this.updateCachedGrabbedEles();
        } else {
          eles = this.cachedZSortedEles;
        }

        return eles;
      };

      module.exports = BRp;

      /***/
    },
    /* 119 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var BRp = {};

      BRp.getCachedImage = function (url, crossOrigin, onLoad) {
        var r = this;
        var imageCache = r.imageCache = r.imageCache || {};
        var cache = imageCache[url];

        if (cache) {
          if (!cache.image.complete) {
            cache.image.addEventListener('load', onLoad);
          }

          return cache.image;
        } else {
          cache = imageCache[url] = imageCache[url] || {};

          var image = cache.image = new Image(); // eslint-disable-line no-undef

          image.addEventListener('load', onLoad);
          image.addEventListener('error', function () {
            image.error = true;
          });

          // #1582 safari doesn't load data uris with crossOrigin properly
          // https://bugs.webkit.org/show_bug.cgi?id=123978
          var dataUriPrefix = 'data:';
          var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;
          if (!isDataUri) {
            image.crossOrigin = crossOrigin; // prevent tainted canvas
          }

          image.src = url;

          return image;
        }
      };

      module.exports = BRp;

      /***/
    },
    /* 120 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var math = __webpack_require__(2);
      var Event = __webpack_require__(16);

      var BRp = {};

      BRp.registerBinding = function (target, event, handler, useCapture) {
        var args = Array.prototype.slice.apply(arguments, [1]); // copy
        var b = this.binder(target);

        return b.on.apply(b, args);
      };

      BRp.binder = function (tgt) {
        var r = this;

        var tgtIsDom = tgt === window || tgt === document || tgt === document.body || is.domElement(tgt);

        if (r.supportsPassiveEvents == null) {

          // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
          var supportsPassive = false;
          try {
            var opts = Object.defineProperty({}, 'passive', {
              get: function get() {
                supportsPassive = true;
              }
            });

            window.addEventListener('test', null, opts);
          } catch (err) {}

          r.supportsPassiveEvents = supportsPassive;
        }

        var on = function on(event, handler, useCapture) {
          var args = Array.prototype.slice.call(arguments);

          if (tgtIsDom && r.supportsPassiveEvents) {
            // replace useCapture w/ opts obj
            args[2] = {
              capture: useCapture != null ? useCapture : false,
              passive: false,
              once: false
            };
          }

          r.bindings.push({
            target: tgt,
            args: args
          });

          (tgt.addEventListener || tgt.on).apply(tgt, args);

          return this;
        };

        return {
          on: on,
          addEventListener: on,
          addListener: on,
          bind: on
        };
      };

      BRp.nodeIsDraggable = function (node) {
        return node && node.isNode() && !node.locked() && node.grabbable();
      };

      BRp.nodeIsGrabbable = function (node) {
        return this.nodeIsDraggable(node) && node.interactive();
      };

      BRp.load = function () {
        var r = this;

        var triggerEvents = function triggerEvents(target, names, e, props) {
          if (target == null) {
            target = r.cy;
          }

          for (var i = 0; i < names.length; i++) {
            var name = names[i];

            target.emit(util.extend({ originalEvent: e, type: name }, props));
          }
        };

        var isMultSelKeyDown = function isMultSelKeyDown(e) {
          return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
        };

        var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
          var allowPassthrough = true;

          if (r.cy.hasCompoundNodes() && down && down.isEdge()) {
            // a compound node below the edge => no passthrough panning
            for (var i = 0; downs && i < downs.length; i++) {
              var down = downs[i];

              if (down.isNode() && down.isParent()) {
                allowPassthrough = false;
                break;
              }
            }
          } else {
            allowPassthrough = true;
          }

          return allowPassthrough;
        };

        var getDragListIds = function getDragListIds(opts) {
          var listHasId;

          if (opts.addToList && r.cy.hasCompoundNodes()) {
            // only needed for compound graphs
            if (!opts.addToList.hasId) {
              // build ids lookup if doesn't already exist
              opts.addToList.hasId = {};

              for (var i = 0; i < opts.addToList.length; i++) {
                var ele = opts.addToList[i];

                opts.addToList.hasId[ele.id()] = true;
              }
            }

            listHasId = opts.addToList.hasId;
          }

          return listHasId || {};
        };

        var setGrabbed = function setGrabbed(ele) {
          ele[0]._private.grabbed = true;
        };

        var setFreed = function setFreed(ele) {
          ele[0]._private.grabbed = false;
        };

        var setInDragLayer = function setInDragLayer(ele) {
          ele[0]._private.rscratch.inDragLayer = true;
        };

        var setOutDragLayer = function setOutDragLayer(ele) {
          ele[0]._private.rscratch.inDragLayer = false;
        };

        var setGrabTarget = function setGrabTarget(ele) {
          ele[0]._private.rscratch.isGrabTarget = true;
        };

        var removeGrabTarget = function removeGrabTarget(ele) {
          ele[0]._private.rscratch.isGrabTarget = false;
        };

        var addToDragList = function addToDragList(ele, opts) {
          var listHasId = getDragListIds(opts);

          if (!listHasId[ele.id()]) {
            opts.addToList.push(ele);
            listHasId[ele.id()] = true;

            setGrabbed(ele);
          }
        };

        // helper function to determine which child nodes and inner edges
        // of a compound node to be dragged as well as the grabbed and selected nodes
        var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
          if (!node.cy().hasCompoundNodes()) {
            return;
          }

          if (opts.inDragLayer == null && opts.addToList == null) {
            return;
          } // nothing to do

          var innerNodes = node.descendants();

          if (opts.inDragLayer) {
            innerNodes.forEach(setInDragLayer);
            innerNodes.connectedEdges().forEach(setInDragLayer);
          }

          if (opts.addToList) {
            innerNodes.forEach(function (ele) {
              addToDragList(ele, opts);
            });
          }
        };

        // adds the given nodes and its neighbourhood to the drag layer
        var addNodesToDrag = function addNodesToDrag(nodes, opts) {
          opts = opts || {};

          var hasCompoundNodes = nodes.cy().hasCompoundNodes();

          if (opts.inDragLayer) {
            nodes.forEach(setInDragLayer);

            nodes.neighborhood().stdFilter(function (ele) {
              return !hasCompoundNodes || ele.isEdge();
            }).forEach(setInDragLayer);
          }

          if (opts.addToList) {
            nodes.forEach(function (ele) {
              addToDragList(ele, opts);
            });
          }

          addDescendantsToDrag(nodes, opts); // always add to drag

          // also add nodes and edges related to the topmost ancestor
          updateAncestorsInDragLayer(nodes, {
            inDragLayer: opts.inDragLayer
          });

          r.updateCachedGrabbedEles();
        };

        var addNodeToDrag = addNodesToDrag;

        var freeDraggedElements = function freeDraggedElements(grabbedEles) {
          if (!grabbedEles) {
            return;
          }

          grabbedEles.hasId = {}; // clear the id list

          // just go over all elements rather than doing a bunch of (possibly expensive) traversals
          r.getCachedZSortedEles().forEach(function (ele) {
            setFreed(ele);
            setOutDragLayer(ele);
            removeGrabTarget(ele);
          });

          r.updateCachedGrabbedEles();
        };

        // helper function to determine which ancestor nodes and edges should go
        // to the drag layer (or should be removed from drag layer).
        var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {

          if (opts.inDragLayer == null && opts.addToList == null) {
            return;
          } // nothing to do

          if (!node.cy().hasCompoundNodes()) {
            return;
          }

          // find top-level parent
          var parent = node.ancestors().orphans();

          // no parent node: no nodes to add to the drag layer
          if (parent.same(node)) {
            return;
          }

          var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());

          var edges = nodes.connectedEdges();

          if (opts.inDragLayer) {
            edges.forEach(setInDragLayer);
            nodes.forEach(setInDragLayer);
          }

          if (opts.addToList) {
            nodes.forEach(function (ele) {
              addToDragList(ele, opts);
            });
          }
        };

        var haveMutationsApi = typeof MutationObserver !== 'undefined';

        // watch for when the cy container is removed from the dom
        if (haveMutationsApi) {
          r.removeObserver = new MutationObserver(function (mutns) {
            // eslint-disable-line no-undef
            for (var i = 0; i < mutns.length; i++) {
              var mutn = mutns[i];
              var rNodes = mutn.removedNodes;

              if (rNodes) {
                for (var j = 0; j < rNodes.length; j++) {
                  var rNode = rNodes[j];

                  if (rNode === r.container) {
                    r.destroy();
                    break;
                  }
                }
              }
            }
          });

          if (r.container.parentNode) {
            r.removeObserver.observe(r.container.parentNode, { childList: true });
          }
        } else {
          r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
            r.destroy();
          });
        }

        var onResize = util.debounce(function () {
          r.cy.resize();
        }, 100);

        if (haveMutationsApi) {
          r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

          r.styleObserver.observe(r.container, { attributes: true });
        }

        // auto resize
        r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

        var forEachUp = function forEachUp(domEle, fn) {
          while (domEle != null) {
            fn(domEle);

            domEle = domEle.parentNode;
          }
        };

        var invalidateCoords = function invalidateCoords() {
          r.invalidateContainerClientCoordsCache();
        };

        forEachUp(r.container, function (domEle) {
          r.registerBinding(domEle, 'transitionend', invalidateCoords);
          r.registerBinding(domEle, 'animationend', invalidateCoords);
          r.registerBinding(domEle, 'scroll', invalidateCoords);
        });

        // stop right click menu from appearing on cy
        r.registerBinding(r.container, 'contextmenu', function (e) {
          e.preventDefault();
        });

        var inBoxSelection = function inBoxSelection() {
          return r.selection[4] !== 0;
        };

        var eventInContainer = function eventInContainer(e) {
          // save cycles if mouse events aren't to be captured
          var containerPageCoords = r.findContainerClientCoords();
          var x = containerPageCoords[0];
          var y = containerPageCoords[1];
          var width = containerPageCoords[2];
          var height = containerPageCoords[3];

          var positions = e.touches ? e.touches : [e];
          var atLeastOnePosInside = false;

          for (var i = 0; i < positions.length; i++) {
            var p = positions[i];

            if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
              atLeastOnePosInside = true;
              break;
            }
          }

          if (!atLeastOnePosInside) {
            return false;
          }

          var container = r.container;
          var target = e.target;
          var tParent = target.parentNode;
          var containerIsTarget = false;

          while (tParent) {
            if (tParent === container) {
              containerIsTarget = true;
              break;
            }

            tParent = tParent.parentNode;
          }

          if (!containerIsTarget) {
            return false;
          } // if target is outisde cy container, then this event is not for us

          return true;
        };

        // Primary key
        r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
          if (!eventInContainer(e)) {
            return;
          }

          e.preventDefault();
          r.hoverData.capture = true;
          r.hoverData.which = e.which;

          var cy = r.cy;
          var gpos = [e.clientX, e.clientY];
          var pos = r.projectIntoViewport(gpos[0], gpos[1]);
          var select = r.selection;
          var nears = r.findNearestElements(pos[0], pos[1], true, false);
          var near = nears[0];
          var draggedElements = r.dragData.possibleDragElements;

          r.hoverData.mdownPos = pos;
          r.hoverData.mdownGPos = gpos;

          var checkForTaphold = function checkForTaphold() {
            r.hoverData.tapholdCancelled = false;

            clearTimeout(r.hoverData.tapholdTimeout);

            r.hoverData.tapholdTimeout = setTimeout(function () {

              if (r.hoverData.tapholdCancelled) {
                return;
              } else {
                var ele = r.hoverData.down;

                if (ele) {
                  ele.emit({
                    originalEvent: e,
                    type: 'taphold',
                    position: { x: pos[0], y: pos[1] }
                  });
                } else {
                  cy.emit({
                    originalEvent: e,
                    type: 'taphold',
                    position: { x: pos[0], y: pos[1] }
                  });
                }
              }
            }, r.tapholdDuration);
          };

          // Right click button
          if (e.which == 3) {

            r.hoverData.cxtStarted = true;

            var cxtEvt = {
              originalEvent: e,
              type: 'cxttapstart',
              position: { x: pos[0], y: pos[1] }
            };

            if (near) {
              near.activate();
              near.emit(cxtEvt);

              r.hoverData.down = near;
            } else {
              cy.emit(cxtEvt);
            }

            r.hoverData.downTime = new Date().getTime();
            r.hoverData.cxtDragged = false;

            // Primary button
          } else if (e.which == 1) {

            if (near) {
              near.activate();
            }

            // Element dragging
            {
              // If something is under the cursor and it is draggable, prepare to grab it
              if (near != null) {

                if (r.nodeIsGrabbable(near)) {

                  var makeEvent = function makeEvent(type) {
                    return {
                      originalEvent: e,
                      type: type,
                      position: { x: pos[0], y: pos[1] }
                    };
                  };

                  var triggerGrab = function triggerGrab(ele) {
                    ele.emit(makeEvent('grab'));
                  };

                  setGrabTarget(near);

                  if (!near.selected()) {

                    draggedElements = r.dragData.possibleDragElements = [];
                    addNodeToDrag(near, { addToList: draggedElements });

                    near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
                  } else {
                    draggedElements = r.dragData.possibleDragElements = [];

                    var selectedNodes = cy.$(function (ele) {
                      return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
                    });

                    addNodesToDrag(selectedNodes, { addToList: draggedElements });

                    near.emit(makeEvent('grabon'));

                    selectedNodes.forEach(triggerGrab);
                  }

                  r.redrawHint('eles', true);
                  r.redrawHint('drag', true);
                }
              }

              r.hoverData.down = near;
              r.hoverData.downs = nears;
              r.hoverData.downTime = new Date().getTime();
            }

            triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
              position: { x: pos[0], y: pos[1] }
            });

            if (near == null) {
              select[4] = 1;

              r.data.bgActivePosistion = {
                x: pos[0],
                y: pos[1]
              };

              r.redrawHint('select', true);

              r.redraw();
            } else if (near.isEdge()) {
              select[4] = 1; // for future pan
            }

            checkForTaphold();
          }

          // Initialize selection box coordinates
          select[0] = select[2] = pos[0];
          select[1] = select[3] = pos[1];
        }, false);

        r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
          // eslint-disable-line no-undef
          var capture = r.hoverData.capture;

          if (!capture && !eventInContainer(e)) {
            return;
          }

          var preventDefault = false;
          var cy = r.cy;
          var zoom = cy.zoom();
          var gpos = [e.clientX, e.clientY];
          var pos = r.projectIntoViewport(gpos[0], gpos[1]);
          var mdownPos = r.hoverData.mdownPos;
          var mdownGPos = r.hoverData.mdownGPos;
          var select = r.selection;

          var near = null;
          if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
            near = r.findNearestElement(pos[0], pos[1], true, false);
          }
          var last = r.hoverData.last;
          var down = r.hoverData.down;

          var disp = [pos[0] - select[2], pos[1] - select[3]];

          var draggedElements = r.dragData.possibleDragElements;

          var isOverThresholdDrag;

          if (mdownGPos) {
            var dx = gpos[0] - mdownGPos[0];
            var dx2 = dx * dx;
            var dy = gpos[1] - mdownGPos[1];
            var dy2 = dy * dy;
            var dist2 = dx2 + dy2;

            r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
          }

          var multSelKeyDown = isMultSelKeyDown(e);

          if (isOverThresholdDrag) {
            r.hoverData.tapholdCancelled = true;
          }

          var updateDragDelta = function updateDragDelta() {
            var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

            if (dragDelta.length === 0) {
              dragDelta.push(disp[0]);
              dragDelta.push(disp[1]);
            } else {
              dragDelta[0] += disp[0];
              dragDelta[1] += disp[1];
            }
          };

          preventDefault = true;

          triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
            position: { x: pos[0], y: pos[1] }
          });

          var goIntoBoxMode = function goIntoBoxMode() {
            r.data.bgActivePosistion = undefined;

            if (!r.hoverData.selecting) {
              cy.emit('boxstart');
            }

            select[4] = 1;
            r.hoverData.selecting = true;

            r.redrawHint('select', true);
            r.redraw();
          };

          // trigger context drag if rmouse down
          if (r.hoverData.which === 3) {
            // but only if over threshold
            if (isOverThresholdDrag) {
              var cxtEvt = {
                originalEvent: e,
                type: 'cxtdrag',
                position: { x: pos[0], y: pos[1] }
              };

              if (down) {
                down.emit(cxtEvt);
              } else {
                cy.emit(cxtEvt);
              }

              r.hoverData.cxtDragged = true;

              if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {

                if (r.hoverData.cxtOver) {
                  r.hoverData.cxtOver.emit({
                    originalEvent: e,
                    type: 'cxtdragout',
                    position: { x: pos[0], y: pos[1] }
                  });
                }

                r.hoverData.cxtOver = near;

                if (near) {
                  near.emit({
                    originalEvent: e,
                    type: 'cxtdragover',
                    position: { x: pos[0], y: pos[1] }
                  });
                }
              }
            }

            // Check if we are drag panning the entire graph
          } else if (r.hoverData.dragging) {
            preventDefault = true;

            if (cy.panningEnabled() && cy.userPanningEnabled()) {
              var deltaP;

              if (r.hoverData.justStartedPan) {
                var mdPos = r.hoverData.mdownPos;

                deltaP = {
                  x: (pos[0] - mdPos[0]) * zoom,
                  y: (pos[1] - mdPos[1]) * zoom
                };

                r.hoverData.justStartedPan = false;
              } else {
                deltaP = {
                  x: disp[0] * zoom,
                  y: disp[1] * zoom
                };
              }

              cy.panBy(deltaP);

              r.hoverData.dragged = true;
            }

            // Needs reproject due to pan changing viewport
            pos = r.projectIntoViewport(e.clientX, e.clientY);

            // Checks primary button down & out of time & mouse not moved much
          } else if (select[4] == 1 && (down == null || down.isEdge())) {

            if (isOverThresholdDrag) {

              if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
                goIntoBoxMode();
              } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
                var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

                if (allowPassthrough) {
                  r.hoverData.dragging = true;
                  r.hoverData.justStartedPan = true;
                  select[4] = 0;

                  r.data.bgActivePosistion = math.array2point(mdownPos);

                  r.redrawHint('select', true);
                  r.redraw();
                }
              }

              if (down && down.isEdge() && down.active()) {
                down.unactivate();
              }
            }
          } else {
            if (down && down.isEdge() && down.active()) {
              down.unactivate();
            }

            if ((!down || !down.grabbed()) && near != last) {

              if (last) {
                triggerEvents(last, ['mouseout', 'tapdragout'], e, {
                  position: { x: pos[0], y: pos[1] }
                });
              }

              if (near) {
                triggerEvents(near, ['mouseover', 'tapdragover'], e, {
                  position: { x: pos[0], y: pos[1] }
                });
              }

              r.hoverData.last = near;
            }

            if (down) {

              if (isOverThresholdDrag) {
                // then we can take action

                if (cy.boxSelectionEnabled() && multSelKeyDown) {
                  // then selection overrides
                  if (down && down.grabbed()) {
                    freeDraggedElements(draggedElements);

                    down.emit('free');
                  }

                  goIntoBoxMode();
                } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
                  // drag node
                  var justStartedDrag = !r.dragData.didDrag;

                  if (justStartedDrag) {
                    r.redrawHint('eles', true);
                  }

                  r.dragData.didDrag = true; // indicate that we actually did drag the node

                  var toTrigger = [];

                  // now, add the elements to the drag layer if not done already
                  if (!r.hoverData.draggingEles) {
                    addNodesToDrag(cy.collection(draggedElements), { inDragLayer: true });
                  }

                  for (var i = 0; i < draggedElements.length; i++) {
                    var dEle = draggedElements[i];

                    // Locked nodes not draggable, as well as non-visible nodes
                    if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
                      var dPos = dEle.position();

                      toTrigger.push(dEle);

                      if (is.number(disp[0]) && is.number(disp[1])) {
                        dPos.x += disp[0];
                        dPos.y += disp[1];

                        if (justStartedDrag) {
                          var dragDelta = r.hoverData.dragDelta;

                          if (dragDelta && is.number(dragDelta[0]) && is.number(dragDelta[1])) {
                            dPos.x += dragDelta[0];
                            dPos.y += dragDelta[1];
                          }
                        }
                      }
                    }
                  }

                  r.hoverData.draggingEles = true;

                  var tcol = cy.collection(toTrigger);

                  tcol.dirtyCompoundBoundsCache();
                  tcol.emit('position drag');

                  r.redrawHint('drag', true);
                  r.redraw();
                }
              } else {
                // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
                updateDragDelta();
              }
            }

            // prevent the dragging from triggering text selection on the page
            preventDefault = true;
          }

          select[2] = pos[0];select[3] = pos[1];

          if (preventDefault) {
            if (e.stopPropagation) e.stopPropagation();
            if (e.preventDefault) e.preventDefault();
            return false;
          }
        }, false);

        r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
          // eslint-disable-line no-undef
          var capture = r.hoverData.capture;
          if (!capture) {
            return;
          }
          r.hoverData.capture = false;

          var cy = r.cy;var pos = r.projectIntoViewport(e.clientX, e.clientY);var select = r.selection;
          var near = r.findNearestElement(pos[0], pos[1], true, false);
          var draggedElements = r.dragData.possibleDragElements;var down = r.hoverData.down;
          var multSelKeyDown = isMultSelKeyDown(e);

          if (r.data.bgActivePosistion) {
            r.redrawHint('select', true);
            r.redraw();
          }

          r.hoverData.tapholdCancelled = true;

          r.data.bgActivePosistion = undefined; // not active bg now

          if (down) {
            down.unactivate();
          }

          if (r.hoverData.which === 3) {
            var cxtEvt = {
              originalEvent: e,
              type: 'cxttapend',
              position: { x: pos[0], y: pos[1] }
            };

            if (down) {
              down.emit(cxtEvt);
            } else {
              cy.emit(cxtEvt);
            }

            if (!r.hoverData.cxtDragged) {
              var cxtTap = {
                originalEvent: e,
                type: 'cxttap',
                position: { x: pos[0], y: pos[1] }
              };

              if (down) {
                down.emit(cxtTap);
              } else {
                cy.emit(cxtTap);
              }
            }

            r.hoverData.cxtDragged = false;
            r.hoverData.which = null;
          } else if (r.hoverData.which === 1) {

            // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something
            if (down == null && // not mousedown on node
            !r.dragData.didDrag // didn't move the node around
            && !r.hoverData.selecting // not box selection
            && !r.hoverData.dragged // didn't pan
            && !isMultSelKeyDown(e)) {

              cy.$(function (ele) {
                return ele.selected();
              }).unselect();

              if (draggedElements.length > 0) {
                r.redrawHint('eles', true);
              }

              r.dragData.possibleDragElements = draggedElements = [];
            }

            triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
              position: { x: pos[0], y: pos[1] }
            });

            if (!r.dragData.didDrag // didn't move a node around
            && !r.hoverData.dragged // didn't pan
            && !r.hoverData.selecting // not box selection
            && !r.hoverData.isOverThresholdDrag // didn't move too much
            ) {
                triggerEvents(down, ['click', 'tap', 'vclick'], e, {
                  position: { x: pos[0], y: pos[1] }
                });
              }

            // Single selection
            if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
              if (near != null && near._private.selectable) {

                if (r.hoverData.dragging) {
                  // if panning, don't change selection state
                } else if (cy.selectionType() === 'additive' || multSelKeyDown) {
                  if (near.selected()) {
                    near.unselect();
                  } else {
                    near.select();
                  }
                } else {
                  if (!multSelKeyDown) {
                    cy.$(':selected').unmerge(near).unselect();
                    near.select();
                  }
                }

                r.redrawHint('eles', true);
              }
            }

            if (r.hoverData.selecting) {
              var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));

              r.redrawHint('select', true);

              if (box.length > 0) {
                r.redrawHint('eles', true);
              }

              cy.emit('boxend');

              var eleWouldBeSelected = function eleWouldBeSelected(ele) {
                return ele.selectable() && !ele.selected();
              };

              if (cy.selectionType() === 'additive') {
                box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
              } else {
                if (!multSelKeyDown) {
                  cy.$(':selected').unmerge(box).unselect();
                }

                box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
              }

              // always need redraw in case eles unselectable
              r.redraw();
            }

            // Cancel drag pan
            if (r.hoverData.dragging) {
              r.hoverData.dragging = false;

              r.redrawHint('select', true);
              r.redrawHint('eles', true);

              r.redraw();
            }

            if (!select[4]) {
              r.redrawHint('drag', true);
              r.redrawHint('eles', true);

              var downWasGrabbed = down && down.grabbed();

              freeDraggedElements(draggedElements);

              if (downWasGrabbed) {
                down.emit('free');
              }
            }
          } // else not right mouse

          select[4] = 0;r.hoverData.down = null;

          r.hoverData.cxtStarted = false;
          r.hoverData.draggingEles = false;
          r.hoverData.selecting = false;
          r.hoverData.isOverThresholdDrag = false;
          r.dragData.didDrag = false;
          r.hoverData.dragged = false;
          r.hoverData.dragDelta = [];
          r.hoverData.mdownPos = null;
          r.hoverData.mdownGPos = null;
        }, false);

        var wheelHandler = function wheelHandler(e) {

          if (r.scrollingPage) {
            return;
          } // while scrolling, ignore wheel-to-zoom

          var cy = r.cy;
          var pos = r.projectIntoViewport(e.clientX, e.clientY);
          var rpos = [pos[0] * cy.zoom() + cy.pan().x, pos[1] * cy.zoom() + cy.pan().y];

          if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
            // if pan dragging or cxt dragging, wheel movements make no zoom
            e.preventDefault();
            return;
          }

          if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
            e.preventDefault();

            r.data.wheelZooming = true;
            clearTimeout(r.data.wheelTimeout);
            r.data.wheelTimeout = setTimeout(function () {
              r.data.wheelZooming = false;

              r.redrawHint('eles', true);
              r.redraw();
            }, 150);

            var diff;

            if (e.deltaY != null) {
              diff = e.deltaY / -250;
            } else if (e.wheelDeltaY != null) {
              diff = e.wheelDeltaY / 1000;
            } else {
              diff = e.wheelDelta / 1000;
            }

            diff = diff * r.wheelSensitivity;

            var needsWheelFix = e.deltaMode === 1;
            if (needsWheelFix) {
              // fixes slow wheel events on ff/linux and ff/windows
              diff *= 33;
            }

            cy.zoom({
              level: cy.zoom() * Math.pow(10, diff),
              renderedPosition: { x: rpos[0], y: rpos[1] }
            });
          }
        };

        // Functions to help with whether mouse wheel should trigger zooming
        // --
        r.registerBinding(r.container, 'wheel', wheelHandler, true);

        // disable nonstandard wheel events
        // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
        // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
        // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

        r.registerBinding(window, 'scroll', function scrollHandler(e) {
          // eslint-disable-line no-undef
          r.scrollingPage = true;

          clearTimeout(r.scrollingPageTimeout);
          r.scrollingPageTimeout = setTimeout(function () {
            r.scrollingPage = false;
          }, 250);
        }, true);

        // Functions to help with handling mouseout/mouseover on the Cytoscape container
        // Handle mouseout on Cytoscape container
        r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
          var pos = r.projectIntoViewport(e.clientX, e.clientY);

          r.cy.emit({
            originalEvent: e,
            type: 'mouseout',
            position: { x: pos[0], y: pos[1] }
          });
        }, false);

        r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
          var pos = r.projectIntoViewport(e.clientX, e.clientY);

          r.cy.emit({
            originalEvent: e,
            type: 'mouseover',
            position: { x: pos[0], y: pos[1] }
          });
        }, false);

        var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom
        var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom
        var center1, modelCenter1; // center point on start pinch to zoom
        var offsetLeft, offsetTop;
        var containerWidth, containerHeight;
        var twoFingersStartInside;

        var distance = function distance(x1, y1, x2, y2) {
          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        };

        var distanceSq = function distanceSq(x1, y1, x2, y2) {
          return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
        };

        var touchstartHandler;
        r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
          if (!eventInContainer(e)) {
            return;
          }

          r.touchData.capture = true;
          r.data.bgActivePosistion = undefined;

          var cy = r.cy;
          var now = r.touchData.now;
          var earlier = r.touchData.earlier;

          if (e.touches[0]) {
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
          }
          if (e.touches[1]) {
            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
          }
          if (e.touches[2]) {
            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
          }

          // record starting points for pinch-to-zoom
          if (e.touches[1]) {

            freeDraggedElements(r.dragData.touchDragEles);

            var offsets = r.findContainerClientCoords();
            offsetLeft = offsets[0];
            offsetTop = offsets[1];
            containerWidth = offsets[2];
            containerHeight = offsets[3];

            f1x1 = e.touches[0].clientX - offsetLeft;
            f1y1 = e.touches[0].clientY - offsetTop;

            f2x1 = e.touches[1].clientX - offsetLeft;
            f2y1 = e.touches[1].clientY - offsetTop;

            twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;

            var pan = cy.pan();
            var zoom = cy.zoom();

            distance1 = distance(f1x1, f1y1, f2x1, f2y1);
            distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
            center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
            modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom];

            // consider context tap
            var cxtDistThreshold = 200;
            var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;
            if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {

              var near1 = r.findNearestElement(now[0], now[1], true, true);
              var near2 = r.findNearestElement(now[2], now[3], true, true);

              if (near1 && near1.isNode()) {
                near1.activate().emit({
                  originalEvent: e,
                  type: 'cxttapstart',
                  position: { x: now[0], y: now[1] }
                });
                r.touchData.start = near1;
              } else if (near2 && near2.isNode()) {
                near2.activate().emit({
                  originalEvent: e,
                  type: 'cxttapstart',
                  position: { x: now[0], y: now[1] }
                });
                r.touchData.start = near2;
              } else {
                cy.emit({
                  originalEvent: e,
                  type: 'cxttapstart',
                  position: { x: now[0], y: now[1] }
                });
              }

              if (r.touchData.start) {
                r.touchData.start._private.grabbed = false;
              }
              r.touchData.cxt = true;
              r.touchData.cxtDragged = false;
              r.data.bgActivePosistion = undefined;

              r.redraw();
              return;
            }
          }

          if (e.touches[2]) {
            // ignore
          } else if (e.touches[1]) {
            // ignore
          } else if (e.touches[0]) {
            var nears = r.findNearestElements(now[0], now[1], true, true);
            var near = nears[0];

            if (near != null) {
              near.activate();

              r.touchData.start = near;
              r.touchData.starts = nears;

              if (r.nodeIsGrabbable(near)) {

                var draggedEles = r.dragData.touchDragEles = [];
                var selectedNodes = null;

                r.redrawHint('eles', true);
                r.redrawHint('drag', true);

                if (near.selected()) {
                  // reset drag elements, since near will be added again

                  selectedNodes = cy.$(function (ele) {
                    return ele.selected() && r.nodeIsGrabbable(ele);
                  });

                  addNodesToDrag(selectedNodes, { addToList: draggedEles });
                } else {
                  addNodeToDrag(near, { addToList: draggedEles });
                }

                setGrabTarget(near);

                var makeEvent = function makeEvent(type) {
                  return {
                    originalEvent: e,
                    type: type,
                    position: { x: now[0], y: now[1] }
                  };
                };

                near.emit(makeEvent('grabon'));

                if (selectedNodes) {
                  selectedNodes.forEach(function (n) {
                    n.emit(makeEvent('grab'));
                  });
                } else {
                  near.emit(makeEvent('grab'));
                }
              }
            }

            triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
              position: { x: now[0], y: now[1] }
            });

            if (near == null) {
              r.data.bgActivePosistion = {
                x: pos[0],
                y: pos[1]
              };

              r.redrawHint('select', true);
              r.redraw();
            }

            // Tap, taphold
            // -----

            r.touchData.singleTouchMoved = false;
            r.touchData.singleTouchStartTime = +new Date();

            clearTimeout(r.touchData.tapholdTimeout);
            r.touchData.tapholdTimeout = setTimeout(function () {
              if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
              && !r.touchData.selecting // box selection shouldn't allow taphold through
              ) {
                  triggerEvents(r.touchData.start, ['taphold'], e, {
                    position: { x: now[0], y: now[1] }
                  });

                  if (!r.touchData.start) {
                    cy.$(':selected').unselect();
                  }
                }
            }, r.tapholdDuration);
          }

          if (e.touches.length >= 1) {
            var sPos = r.touchData.startPosition = [];

            for (var i = 0; i < now.length; i++) {
              sPos[i] = earlier[i] = now[i];
            }

            var touch0 = e.touches[0];

            r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
          }
        }, false);

        var touchmoveHandler;
        r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
          // eslint-disable-line no-undef
          var capture = r.touchData.capture;

          if (!capture && !eventInContainer(e)) {
            return;
          }

          var select = r.selection;
          var cy = r.cy;
          var now = r.touchData.now;
          var earlier = r.touchData.earlier;
          var zoom = cy.zoom();

          if (e.touches[0]) {
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
          }
          if (e.touches[1]) {
            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
          }
          if (e.touches[2]) {
            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
          }

          var startGPos = r.touchData.startGPosition;
          var isOverThresholdDrag;

          if (capture && e.touches[0] && startGPos) {
            var disp = [];for (var j = 0; j < now.length; j++) {
              disp[j] = now[j] - earlier[j];
            }
            var dx = e.touches[0].clientX - startGPos[0];
            var dx2 = dx * dx;
            var dy = e.touches[0].clientY - startGPos[1];
            var dy2 = dy * dy;
            var dist2 = dx2 + dy2;

            isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
          }

          // context swipe cancelling
          if (capture && r.touchData.cxt) {
            e.preventDefault();

            var f1x2 = e.touches[0].clientX - offsetLeft,
                f1y2 = e.touches[0].clientY - offsetTop;
            var f2x2 = e.touches[1].clientX - offsetLeft,
                f2y2 = e.touches[1].clientY - offsetTop;
            // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );
            var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
            var factorSq = distance2Sq / distance1Sq;

            var distThreshold = 150;
            var distThresholdSq = distThreshold * distThreshold;
            var factorThreshold = 1.5;
            var factorThresholdSq = factorThreshold * factorThreshold;

            // cancel ctx gestures if the distance b/t the fingers increases
            if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
              r.touchData.cxt = false;

              r.data.bgActivePosistion = undefined;

              r.redrawHint('select', true);

              var cxtEvt = {
                originalEvent: e,
                type: 'cxttapend',
                position: { x: now[0], y: now[1] }
              };

              if (r.touchData.start) {
                r.touchData.start.unactivate().emit(cxtEvt);

                r.touchData.start = null;
              } else {
                cy.emit(cxtEvt);
              }
            }
          }

          // context swipe
          if (capture && r.touchData.cxt) {
            var cxtEvt = {
              originalEvent: e,
              type: 'cxtdrag',
              position: { x: now[0], y: now[1] }
            };
            r.data.bgActivePosistion = undefined;
            r.redrawHint('select', true);

            if (r.touchData.start) {
              r.touchData.start.emit(cxtEvt);
            } else {
              cy.emit(cxtEvt);
            }

            if (r.touchData.start) {
              r.touchData.start._private.grabbed = false;
            }
            r.touchData.cxtDragged = true;

            var near = r.findNearestElement(now[0], now[1], true, true);

            if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {

              if (r.touchData.cxtOver) {
                r.touchData.cxtOver.emit({
                  originalEvent: e,
                  type: 'cxtdragout',
                  position: { x: now[0], y: now[1] }
                });
              }

              r.touchData.cxtOver = near;

              if (near) {
                near.emit({
                  originalEvent: e,
                  type: 'cxtdragover',
                  position: { x: now[0], y: now[1] }
                });
              }
            }

            // box selection
          } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
            e.preventDefault();

            r.data.bgActivePosistion = undefined;

            this.lastThreeTouch = +new Date();

            if (!r.touchData.selecting) {
              cy.emit('boxstart');
            }

            r.touchData.selecting = true;

            r.redrawHint('select', true);

            if (!select || select.length === 0 || select[0] === undefined) {
              select[0] = (now[0] + now[2] + now[4]) / 3;
              select[1] = (now[1] + now[3] + now[5]) / 3;
              select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
              select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
            } else {
              select[2] = (now[0] + now[2] + now[4]) / 3;
              select[3] = (now[1] + now[3] + now[5]) / 3;
            }

            select[4] = 1;
            r.touchData.selecting = true;

            r.redraw();

            // pinch to zoom
          } else if (capture && e.touches[1] && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
            // two fingers => pinch to zoom
            e.preventDefault();

            r.data.bgActivePosistion = undefined;
            r.redrawHint('select', true);

            var draggedEles = r.dragData.touchDragEles;
            if (draggedEles) {
              r.redrawHint('drag', true);

              for (var i = 0; i < draggedEles.length; i++) {
                var de_p = draggedEles[i]._private;

                de_p.grabbed = false;
                de_p.rscratch.inDragLayer = false;
              }
            }

            // (x2, y2) for fingers 1 and 2
            var f1x2 = e.touches[0].clientX - offsetLeft,
                f1y2 = e.touches[0].clientY - offsetTop;
            var f2x2 = e.touches[1].clientX - offsetLeft,
                f2y2 = e.touches[1].clientY - offsetTop;

            var distance2 = distance(f1x2, f1y2, f2x2, f2y2);
            // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
            // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );
            var factor = distance2 / distance1;

            if (twoFingersStartInside) {
              // delta finger1
              var df1x = f1x2 - f1x1;
              var df1y = f1y2 - f1y1;

              // delta finger 2
              var df2x = f2x2 - f2x1;
              var df2y = f2y2 - f2y1;

              // translation is the normalised vector of the two fingers movement
              // i.e. so pinching cancels out and moving together pans
              var tx = (df1x + df2x) / 2;
              var ty = (df1y + df2y) / 2;

              // adjust factor by the speed multiplier
              // var speed = 1.5;
              // if( factor > 1 ){
              //   factor = (factor - 1) * speed + 1;
              // } else {
              //   factor = 1 - (1 - factor) * speed;
              // }

              // now calculate the zoom
              var zoom1 = cy.zoom();
              var zoom2 = zoom1 * factor;
              var pan1 = cy.pan();

              // the model center point converted to the current rendered pos
              var ctrx = modelCenter1[0] * zoom1 + pan1.x;
              var ctry = modelCenter1[1] * zoom1 + pan1.y;

              var pan2 = {
                x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
                y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
              };

              // remove dragged eles
              if (r.touchData.start && r.touchData.start.active()) {
                var draggedEles = r.dragData.touchDragEles;

                freeDraggedElements(draggedEles);

                r.redrawHint('drag', true);
                r.redrawHint('eles', true);

                r.touchData.start.unactivate().emit('free');
              }

              cy.viewport({
                zoom: zoom2,
                pan: pan2,
                cancelOnFailedZoom: true
              });

              distance1 = distance2;
              f1x1 = f1x2;
              f1y1 = f1y2;
              f2x1 = f2x2;
              f2y1 = f2y2;

              r.pinching = true;
            }

            // Re-project
            if (e.touches[0]) {
              var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
            }
            if (e.touches[1]) {
              var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
            }
            if (e.touches[2]) {
              var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
            }
          } else if (e.touches[0]) {
            var start = r.touchData.start;
            var last = r.touchData.last;
            var near;

            if (!r.hoverData.draggingEles && !r.swipePanning) {
              near = r.findNearestElement(now[0], now[1], true, true);
            }

            if (capture && start != null) {
              e.preventDefault();
            }

            // dragging nodes
            if (capture && start != null && r.nodeIsDraggable(start)) {

              if (isOverThresholdDrag) {
                // then dragging can happen
                var draggedEles = r.dragData.touchDragEles;
                var justStartedDrag = !r.dragData.didDrag;

                if (justStartedDrag) {
                  addNodesToDrag(cy.collection(draggedEles), { inDragLayer: true });
                }

                for (var k = 0; k < draggedEles.length; k++) {
                  var draggedEle = draggedEles[k];

                  if (r.nodeIsDraggable(draggedEle) && draggedEle.grabbed()) {
                    r.dragData.didDrag = true;
                    var dPos = draggedEle.position();

                    if (is.number(disp[0]) && is.number(disp[1])) {
                      dPos.x += disp[0];
                      dPos.y += disp[1];
                    }

                    if (justStartedDrag) {
                      r.redrawHint('eles', true);

                      var dragDelta = r.touchData.dragDelta;

                      if (dragDelta && is.number(dragDelta[0]) && is.number(dragDelta[1])) {
                        dPos.x += dragDelta[0];
                        dPos.y += dragDelta[1];
                      }
                    }
                  }
                }

                var tcol = cy.collection(draggedEles);

                tcol.dirtyCompoundBoundsCache();
                tcol.emit('position drag');

                r.hoverData.draggingEles = true;

                r.redrawHint('drag', true);

                if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {

                  r.redrawHint('eles', true);
                }

                r.redraw();
              } else {
                // otherise keep track of drag delta for later
                var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

                if (dragDelta.length === 0) {
                  dragDelta.push(disp[0]);
                  dragDelta.push(disp[1]);
                } else {
                  dragDelta[0] += disp[0];
                  dragDelta[1] += disp[1];
                }
              }
            }

            // touchmove
            {
              triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
                position: { x: now[0], y: now[1] }
              });

              if ((!start || !start.grabbed()) && near != last) {
                if (last) {
                  last.emit({ originalEvent: e, type: 'tapdragout', position: { x: now[0], y: now[1] } });
                }
                if (near) {
                  near.emit({ originalEvent: e, type: 'tapdragover', position: { x: now[0], y: now[1] } });
                }
              }

              r.touchData.last = near;
            }

            // check to cancel taphold
            if (capture) {
              for (var i = 0; i < now.length; i++) {
                if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {

                  r.touchData.singleTouchMoved = true;
                }
              }
            }

            // panning
            if (capture && (start == null || start.isEdge()) && cy.panningEnabled() && cy.userPanningEnabled()) {

              var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

              if (allowPassthrough) {
                e.preventDefault();

                if (r.swipePanning) {
                  cy.panBy({
                    x: disp[0] * zoom,
                    y: disp[1] * zoom
                  });
                } else if (isOverThresholdDrag) {
                  r.swipePanning = true;

                  cy.panBy({
                    x: dx * zoom,
                    y: dy * zoom
                  });

                  if (start) {
                    start.unactivate();

                    if (!r.data.bgActivePosistion) {
                      r.data.bgActivePosistion = math.array2point(r.touchData.startPosition);
                    }

                    r.redrawHint('select', true);

                    r.touchData.start = null;
                  }
                }
              }

              // Re-project
              var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
              now[0] = pos[0];now[1] = pos[1];
            }
          }

          for (var j = 0; j < now.length; j++) {
            earlier[j] = now[j];
          }
          //r.redraw();
        }, false);

        var touchcancelHandler;
        r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
          // eslint-disable-line no-undef
          var start = r.touchData.start;

          r.touchData.capture = false;

          if (start) {
            start.unactivate();
          }
        });

        var touchendHandler;
        r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
          // eslint-disable-line no-undef
          var start = r.touchData.start;

          var capture = r.touchData.capture;

          if (capture) {
            r.touchData.capture = false;

            e.preventDefault();
          } else {
            return;
          }

          var select = r.selection;

          r.swipePanning = false;
          r.hoverData.draggingEles = false;

          var cy = r.cy;
          var zoom = cy.zoom();
          var now = r.touchData.now;
          var earlier = r.touchData.earlier;

          if (e.touches[0]) {
            var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);now[0] = pos[0];now[1] = pos[1];
          }
          if (e.touches[1]) {
            var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);now[2] = pos[0];now[3] = pos[1];
          }
          if (e.touches[2]) {
            var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);now[4] = pos[0];now[5] = pos[1];
          }

          if (start) {
            start.unactivate();
          }

          var ctxTapend;
          if (r.touchData.cxt) {
            ctxTapend = {
              originalEvent: e,
              type: 'cxttapend',
              position: { x: now[0], y: now[1] }
            };

            if (start) {
              start.emit(ctxTapend);
            } else {
              cy.emit(ctxTapend);
            }

            if (!r.touchData.cxtDragged) {
              var ctxTap = {
                originalEvent: e,
                type: 'cxttap',
                position: { x: now[0], y: now[1] }
              };

              if (start) {
                start.emit(ctxTap);
              } else {
                cy.emit(ctxTap);
              }
            }

            if (r.touchData.start) {
              r.touchData.start._private.grabbed = false;
            }
            r.touchData.cxt = false;
            r.touchData.start = null;

            r.redraw();
            return;
          }

          // no more box selection if we don't have three fingers
          if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
            r.touchData.selecting = false;

            var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));

            select[0] = undefined;
            select[1] = undefined;
            select[2] = undefined;
            select[3] = undefined;
            select[4] = 0;

            r.redrawHint('select', true);

            cy.emit('boxend');

            var eleWouldBeSelected = function eleWouldBeSelected(ele) {
              return ele.selectable() && !ele.selected();
            };

            box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

            if (box.nonempty()) {
              r.redrawHint('eles', true);
            }

            r.redraw();
          }

          if (start != null) {
            start.unactivate();
          }

          if (e.touches[2]) {
            r.data.bgActivePosistion = undefined;
            r.redrawHint('select', true);
          } else if (e.touches[1]) {
            // ignore
          } else if (e.touches[0]) {
            // ignore

            // Last touch released
          } else if (!e.touches[0]) {

            r.data.bgActivePosistion = undefined;
            r.redrawHint('select', true);

            var draggedEles = r.dragData.touchDragEles;

            if (start != null) {

              var startWasGrabbed = start._private.grabbed;

              freeDraggedElements(draggedEles);

              r.redrawHint('drag', true);
              r.redrawHint('eles', true);

              if (startWasGrabbed) {
                start.emit('free');
              }

              triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
                position: { x: now[0], y: now[1] }
              });

              start.unactivate();

              r.touchData.start = null;
            } else {
              var near = r.findNearestElement(now[0], now[1], true, true);

              triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
                position: { x: now[0], y: now[1] }
              });
            }

            var dx = r.touchData.startPosition[0] - now[0];
            var dx2 = dx * dx;
            var dy = r.touchData.startPosition[1] - now[1];
            var dy2 = dy * dy;
            var dist2 = dx2 + dy2;
            var rdist2 = dist2 * zoom * zoom;

            // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance
            if (start != null && !r.dragData.didDrag // didn't drag nodes around
            && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
            ) {

                if (cy.selectionType() === 'single') {
                  cy.$(':selected').unmerge(start).unselect();
                  start.select();
                } else {
                  if (start.selected()) {
                    start.unselect();
                  } else {
                    start.select();
                  }
                }

                r.redrawHint('eles', true);
              }

            // Tap event, roughly same as mouse click event for touch
            if (!r.touchData.singleTouchMoved) {
              triggerEvents(start, ['tap', 'vclick'], e, {
                position: { x: now[0], y: now[1] }
              });
            }

            r.touchData.singleTouchMoved = true;
          }

          for (var j = 0; j < now.length; j++) {
            earlier[j] = now[j];
          }

          r.dragData.didDrag = false; // reset for next mousedown

          if (e.touches.length === 0) {
            r.touchData.dragDelta = [];
            r.touchData.startPosition = null;
            r.touchData.startGPosition = null;
          }

          if (e.touches.length < 2) {
            r.pinching = false;
            r.redrawHint('eles', true);
            r.redraw();
          }

          //r.redraw();
        }, false);

        // fallback compatibility layer for ms pointer events
        if (typeof TouchEvent === 'undefined') {

          var pointers = [];

          var makeTouch = function makeTouch(e) {
            return {
              clientX: e.clientX,
              clientY: e.clientY,
              force: 1,
              identifier: e.pointerId,
              pageX: e.pageX,
              pageY: e.pageY,
              radiusX: e.width / 2,
              radiusY: e.height / 2,
              screenX: e.screenX,
              screenY: e.screenY,
              target: e.target
            };
          };

          var makePointer = function makePointer(e) {
            return {
              event: e,
              touch: makeTouch(e)
            };
          };

          var addPointer = function addPointer(e) {
            pointers.push(makePointer(e));
          };

          var removePointer = function removePointer(e) {
            for (var i = 0; i < pointers.length; i++) {
              var p = pointers[i];

              if (p.event.pointerId === e.pointerId) {
                pointers.splice(i, 1);
                return;
              }
            }
          };

          var updatePointer = function updatePointer(e) {
            var p = pointers.filter(function (p) {
              return p.event.pointerId === e.pointerId;
            })[0];

            p.event = e;
            p.touch = makeTouch(e);
          };

          var addTouchesToEvent = function addTouchesToEvent(e) {
            e.touches = pointers.map(function (p) {
              return p.touch;
            });
          };

          var pointerIsMouse = function pointerIsMouse(e) {
            return e.pointerType === 'mouse' || e.pointerType === 4;
          };

          r.registerBinding(r.container, 'pointerdown', function (e) {
            if (pointerIsMouse(e)) {
              return;
            } // mouse already handled

            e.preventDefault();

            addPointer(e);

            addTouchesToEvent(e);
            touchstartHandler(e);
          });

          r.registerBinding(r.container, 'pointerup', function (e) {
            if (pointerIsMouse(e)) {
              return;
            } // mouse already handled

            removePointer(e);

            addTouchesToEvent(e);
            touchendHandler(e);
          });

          r.registerBinding(r.container, 'pointercancel', function (e) {
            if (pointerIsMouse(e)) {
              return;
            } // mouse already handled

            removePointer(e);

            addTouchesToEvent(e);
            touchcancelHandler(e);
          });

          r.registerBinding(r.container, 'pointermove', function (e) {
            if (pointerIsMouse(e)) {
              return;
            } // mouse already handled

            e.preventDefault();

            updatePointer(e);

            addTouchesToEvent(e);
            touchmoveHandler(e);
          });
        }
      };

      module.exports = BRp;

      /***/
    },
    /* 121 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);

      var BRp = {};

      BRp.generatePolygon = function (name, points) {
        return this.nodeShapes[name] = {
          renderer: this,

          name: name,

          points: points,

          draw: function draw(context, centerX, centerY, width, height) {
            this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
          },

          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
            return math.polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
          },

          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
            return math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
          }
        };
      };

      BRp.generateEllipse = function () {
        return this.nodeShapes['ellipse'] = {
          renderer: this,

          name: 'ellipse',

          draw: function draw(context, centerX, centerY, width, height) {
            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
          },

          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
            return math.intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
          },

          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
            return math.checkInEllipse(x, y, width, height, centerX, centerY, padding);
          }
        };
      };

      BRp.generateRoundRectangle = function () {
        return this.nodeShapes['roundrectangle'] = {
          renderer: this,

          name: 'roundrectangle',

          points: math.generateUnitNgonPointsFitToSquare(4, 0),

          draw: function draw(context, centerX, centerY, width, height) {
            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
          },

          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
            return math.roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
          },

          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {

            var cornerRadius = math.getRoundRectangleRadius(width, height);
            var diam = cornerRadius * 2;

            // Check hBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
              return true;
            }

            // Check vBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
              return true;
            }

            // Check top left quarter circle
            if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {

              return true;
            }

            // Check top right quarter circle
            if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {

              return true;
            }

            // Check bottom right quarter circle
            if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

              return true;
            }

            // Check bottom left quarter circle
            if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

              return true;
            }

            return false;
          }
        };
      };

      BRp.generateCutRectangle = function () {
        return this.nodeShapes['cutrectangle'] = {
          renderer: this,

          name: 'cutrectangle',

          cornerLength: math.getCutRectangleCornerLength(),

          points: math.generateUnitNgonPointsFitToSquare(4, 0),

          draw: function draw(context, centerX, centerY, width, height) {
            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
          },

          generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
            var cl = this.cornerLength;
            var hh = height / 2;
            var hw = width / 2;
            var xBegin = centerX - hw;
            var xEnd = centerX + hw;
            var yBegin = centerY - hh;
            var yEnd = centerY + hh;

            // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]
            return {
              topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
              topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
              bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
              bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
            };
          },

          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
            var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
            var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);

            return math.polygonIntersectLine(x, y, pts, nodeX, nodeY);
          },

          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
            // Check hBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
              return true;
            }

            // Check vBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
              return true;
            }
            var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
            return math.pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || math.pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
          }

        };
      };

      BRp.generateBarrel = function () {
        return this.nodeShapes['barrel'] = {
          renderer: this,

          name: 'barrel',

          points: math.generateUnitNgonPointsFitToSquare(4, 0),

          draw: function draw(context, centerX, centerY, width, height) {
            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
          },

          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
            // use two fixed t values for the bezier curve approximation

            var t0 = 0.15;
            var t1 = 0.5;
            var t2 = 0.85;

            var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

            var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
              // approximate curve pts based on the two t values
              var m0 = math.qbezierPtAt({ x: pts[0], y: pts[1] }, { x: pts[2], y: pts[3] }, { x: pts[4], y: pts[5] }, t0);
              var m1 = math.qbezierPtAt({ x: pts[0], y: pts[1] }, { x: pts[2], y: pts[3] }, { x: pts[4], y: pts[5] }, t1);
              var m2 = math.qbezierPtAt({ x: pts[0], y: pts[1] }, { x: pts[2], y: pts[3] }, { x: pts[4], y: pts[5] }, t2);

              return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
            };

            var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));

            return math.polygonIntersectLine(x, y, pts, nodeX, nodeY);
          },

          generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
            var hh = height / 2;
            var hw = width / 2;
            var xBegin = centerX - hw;
            var xEnd = centerX + hw;
            var yBegin = centerY - hh;
            var yEnd = centerY + hh;

            var curveConstants = math.getBarrelCurveConstants(width, height);
            var hOffset = curveConstants.heightOffset;
            var wOffset = curveConstants.widthOffset;
            var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width;

            // points are in clockwise order, inner (imaginary) control pt on [4, 5]
            var pts = {
              topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
              topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
              bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
              bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
            };

            pts.topLeft.isTop = true;
            pts.topRight.isTop = true;
            pts.bottomLeft.isBottom = true;
            pts.bottomRight.isBottom = true;

            return pts;
          },

          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {

            var curveConstants = math.getBarrelCurveConstants(width, height);
            var hOffset = curveConstants.heightOffset;
            var wOffset = curveConstants.widthOffset;

            // Check hBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
              return true;
            }

            // Check vBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
              return true;
            }

            var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

            var getCurveT = function getCurveT(x, y, curvePts) {
              var x0 = curvePts[4];
              var x1 = curvePts[2];
              var x2 = curvePts[0];
              var y0 = curvePts[5];
              // var y1 = curvePts[ 3 ];
              var y2 = curvePts[1];

              var xMin = Math.min(x0, x2);
              var xMax = Math.max(x0, x2);
              var yMin = Math.min(y0, y2);
              var yMax = Math.max(y0, y2);

              if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
                var coeff = math.bezierPtsToQuadCoeff(x0, x1, x2);
                var roots = math.solveQuadratic(coeff[0], coeff[1], coeff[2], x);

                var validRoots = roots.filter(function (r) {
                  return 0 <= r && r <= 1;
                });

                if (validRoots.length > 0) {
                  return validRoots[0];
                }
              }
              return null;
            };

            var curveRegions = Object.keys(barrelCurvePts);
            for (var i = 0; i < curveRegions.length; i++) {
              var corner = curveRegions[i];
              var cornerPts = barrelCurvePts[corner];
              var t = getCurveT(x, y, cornerPts);

              if (t == null) {
                continue;
              }

              var y0 = cornerPts[5];
              var y1 = cornerPts[3];
              var y2 = cornerPts[1];
              var bezY = math.qbezierAt(y0, y1, y2, t);

              if (cornerPts.isTop && bezY <= y) {
                return true;
              }
              if (cornerPts.isBottom && y <= bezY) {
                return true;
              }
            }
            return false;
          }
        };
      };

      BRp.generateBottomRoundrectangle = function () {
        return this.nodeShapes['bottomroundrectangle'] = {
          renderer: this,

          name: 'bottomroundrectangle',

          points: math.generateUnitNgonPointsFitToSquare(4, 0),

          draw: function draw(context, centerX, centerY, width, height) {
            this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
          },

          intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
            var topStartX = nodeX - (width / 2 + padding);
            var topStartY = nodeY - (height / 2 + padding);
            var topEndY = topStartY;
            var topEndX = nodeX + (width / 2 + padding);

            var topIntersections = math.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);
            if (topIntersections.length > 0) {
              return topIntersections;
            }

            return math.roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
          },

          checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {

            var cornerRadius = math.getRoundRectangleRadius(width, height);
            var diam = 2 * cornerRadius;

            // Check hBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
              return true;
            }

            // Check vBox
            if (math.pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
              return true;
            }

            // check non-rounded top side
            var outerWidth = width / 2 + 2 * padding;
            var outerHeight = height / 2 + 2 * padding;
            var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];
            if (math.pointInsidePolygonPoints(x, y, points)) {
              return true;
            }

            // Check bottom right quarter circle
            if (math.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

              return true;
            }

            // Check bottom left quarter circle
            if (math.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {

              return true;
            }

            return false;
          }
        };
      };

      BRp.registerNodeShapes = function () {
        var nodeShapes = this.nodeShapes = {};
        var renderer = this;

        this.generateEllipse();

        this.generatePolygon('triangle', math.generateUnitNgonPointsFitToSquare(3, 0));

        this.generatePolygon('rectangle', math.generateUnitNgonPointsFitToSquare(4, 0));
        nodeShapes['square'] = nodeShapes['rectangle'];

        this.generateRoundRectangle();

        this.generateCutRectangle();

        this.generateBarrel();

        this.generateBottomRoundrectangle();

        this.generatePolygon('diamond', [0, 1, 1, 0, 0, -1, -1, 0]);

        this.generatePolygon('pentagon', math.generateUnitNgonPointsFitToSquare(5, 0));

        this.generatePolygon('hexagon', math.generateUnitNgonPointsFitToSquare(6, 0));

        this.generatePolygon('heptagon', math.generateUnitNgonPointsFitToSquare(7, 0));

        this.generatePolygon('octagon', math.generateUnitNgonPointsFitToSquare(8, 0));

        var star5Points = new Array(20);
        {
          var outerPoints = math.generateUnitNgonPoints(5, 0);
          var innerPoints = math.generateUnitNgonPoints(5, Math.PI / 5);

          // Outer radius is 1; inner radius of star is smaller
          var innerRadius = 0.5 * (3 - Math.sqrt(5));
          innerRadius *= 1.57;

          for (var i = 0; i < innerPoints.length / 2; i++) {
            innerPoints[i * 2] *= innerRadius;
            innerPoints[i * 2 + 1] *= innerRadius;
          }

          for (var i = 0; i < 20 / 4; i++) {
            star5Points[i * 4] = outerPoints[i * 2];
            star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];

            star5Points[i * 4 + 2] = innerPoints[i * 2];
            star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
          }
        }

        star5Points = math.fitPolygonToSquare(star5Points);

        this.generatePolygon('star', star5Points);

        this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);

        this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);

        this.generatePolygon('concavehexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);

        this.generatePolygon('tag', [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1]);

        nodeShapes.makePolygon = function (points) {

          // use caching on user-specified polygons so they are as fast as native shapes

          var key = points.join('$');
          var name = 'polygon-' + key;
          var shape;

          if (shape = this[name]) {
            // got cached shape
            return shape;
          }

          // create and cache new shape
          return renderer.generatePolygon(name, points);
        };
      };

      module.exports = BRp;

      /***/
    },
    /* 122 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);

      var BRp = {};

      BRp.timeToRender = function () {
        return this.redrawTotalTime / this.redrawCount;
      };

      BRp.redraw = function (options) {
        options = options || util.staticEmptyObject();

        var r = this;

        if (r.averageRedrawTime === undefined) {
          r.averageRedrawTime = 0;
        }
        if (r.lastRedrawTime === undefined) {
          r.lastRedrawTime = 0;
        }
        if (r.lastDrawTime === undefined) {
          r.lastDrawTime = 0;
        }

        r.requestedFrame = true;
        r.renderOptions = options;
      };

      BRp.beforeRender = function (fn, priority) {
        // the renderer can't add tick callbacks when destroyed
        if (this.destroyed) {
          return;
        }

        priority = priority || 0;

        var cbs = this.beforeRenderCallbacks;

        cbs.push({ fn: fn, priority: priority });

        // higher priority callbacks executed first
        cbs.sort(function (a, b) {
          return b.priority - a.priority;
        });
      };

      var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
        var cbs = r.beforeRenderCallbacks;

        for (var i = 0; i < cbs.length; i++) {
          cbs[i].fn(willDraw, startTime);
        }
      };

      BRp.startRenderLoop = function () {
        var r = this;

        if (r.renderLoopStarted) {
          return;
        } else {
          r.renderLoopStarted = true;
        }

        var renderFn = function renderFn(requestTime) {
          if (r.destroyed) {
            return;
          }

          if (r.requestedFrame && !r.skipFrame) {
            beforeRenderCallbacks(r, true, requestTime);

            var startTime = util.performanceNow();

            r.render(r.renderOptions);

            var endTime = r.lastDrawTime = util.performanceNow();

            if (r.averageRedrawTime === undefined) {
              r.averageRedrawTime = endTime - startTime;
            }

            if (r.redrawCount === undefined) {
              r.redrawCount = 0;
            }

            r.redrawCount++;

            if (r.redrawTotalTime === undefined) {
              r.redrawTotalTime = 0;
            }

            var duration = endTime - startTime;

            r.redrawTotalTime += duration;
            r.lastRedrawTime = duration;

            // use a weighted average with a bias from the previous average so we don't spike so easily
            r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;

            r.requestedFrame = false;
          } else {
            beforeRenderCallbacks(r, false, requestTime);
          }

          r.skipFrame = false;

          util.requestAnimationFrame(renderFn);
        };

        util.requestAnimationFrame(renderFn);
      };

      module.exports = BRp;

      /***/
    },
    /* 123 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /*
      The canvas renderer was written by Yue Dong.
      
      Modifications tracked on Github.
      */

      var util = __webpack_require__(1);
      var is = __webpack_require__(0);
      var ElementTextureCache = __webpack_require__(124);
      var LayeredTextureCache = __webpack_require__(125);

      var CR = CanvasRenderer;
      var CRp = CanvasRenderer.prototype;

      CRp.CANVAS_LAYERS = 3;
      //
      CRp.SELECT_BOX = 0;
      CRp.DRAG = 1;
      CRp.NODE = 2;

      CRp.BUFFER_COUNT = 3;
      //
      CRp.TEXTURE_BUFFER = 0;
      CRp.MOTIONBLUR_BUFFER_NODE = 1;
      CRp.MOTIONBLUR_BUFFER_DRAG = 2;

      function CanvasRenderer(options) {
        var r = this;

        r.data = {
          canvases: new Array(CRp.CANVAS_LAYERS),
          contexts: new Array(CRp.CANVAS_LAYERS),
          canvasNeedsRedraw: new Array(CRp.CANVAS_LAYERS),

          bufferCanvases: new Array(CRp.BUFFER_COUNT),
          bufferContexts: new Array(CRp.CANVAS_LAYERS)
        };

        var tapHlOff = '-webkit-tap-highlight-color: rgba(0,0,0,0);';

        r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef
        var containerStyle = r.data.canvasContainer.style;
        r.data.canvasContainer.setAttribute('style', tapHlOff);
        containerStyle.position = 'relative';
        containerStyle.zIndex = '0';
        containerStyle.overflow = 'hidden';

        var container = options.cy.container();
        container.appendChild(r.data.canvasContainer);

        if ((container.getAttribute('style') || '').indexOf(tapHlOff) < 0) {
          container.setAttribute('style', (container.getAttribute('style') || '') + tapHlOff);
        }

        for (var i = 0; i < CRp.CANVAS_LAYERS; i++) {
          var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef
          r.data.contexts[i] = canvas.getContext('2d');
          canvas.setAttribute('style', '-webkit-user-select: none; -moz-user-select: -moz-none; user-select: none; -webkit-tap-highlight-color: rgba(0,0,0,0); outline-style: none;' + (is.ms() ? ' -ms-touch-action: none; touch-action: none; ' : ''));
          canvas.style.position = 'absolute';
          canvas.setAttribute('data-id', 'layer' + i);
          canvas.style.zIndex = String(CRp.CANVAS_LAYERS - i);
          r.data.canvasContainer.appendChild(canvas);

          r.data.canvasNeedsRedraw[i] = false;
        }
        r.data.topCanvas = r.data.canvases[0];

        r.data.canvases[CRp.NODE].setAttribute('data-id', 'layer' + CRp.NODE + '-node');
        r.data.canvases[CRp.SELECT_BOX].setAttribute('data-id', 'layer' + CRp.SELECT_BOX + '-selectbox');
        r.data.canvases[CRp.DRAG].setAttribute('data-id', 'layer' + CRp.DRAG + '-drag');

        for (var i = 0; i < CRp.BUFFER_COUNT; i++) {
          r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef
          r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
          r.data.bufferCanvases[i].style.position = 'absolute';
          r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
          r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
          r.data.bufferCanvases[i].style.visibility = 'hidden';
          //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
        }

        r.pathsEnabled = true;

        r.data.eleTxrCache = new ElementTextureCache(r);
        r.data.lyrTxrCache = new LayeredTextureCache(r, r.data.eleTxrCache);

        r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
          for (var i = 0; i < eles.length; i++) {
            var ele = eles[i];
            var rs = ele._private.rstyle;
            var de = rs.dirtyEvents;

            if (ele.isNode() && de && de.length === 1 && de['position']) {
              // then keep cached ele texture
            } else {
              r.data.eleTxrCache.invalidateElement(ele);

              // NB this block of code should not be ported to 3.3 (unstable branch).
              // - This check is unneccesary in 3.3 as caches will be stored without respect to opacity.
              // - This fix may result in lowered performance for compound graphs.
              // - Ref : Opacity of child node is not updated for certain zoom levels after parent opacity is overriden #2078
              if (ele.isParent() && de['style']) {
                var op1 = rs.prevParentOpacity;
                var op2 = ele.pstyle('opacity').pfValue;

                rs.prevParentOpacity = op2;

                if (op1 !== op2) {
                  var descs = ele.descendants();

                  for (var j = 0; j < descs.length; j++) {
                    r.data.eleTxrCache.invalidateElement(descs[j]);
                  }
                }
              }
            }
          }

          if (eles.length > 0) {
            r.data.lyrTxrCache.invalidateElements(eles);
          }
        });
      }

      CRp.redrawHint = function (group, bool) {
        var r = this;

        switch (group) {
          case 'eles':
            r.data.canvasNeedsRedraw[CRp.NODE] = bool;
            break;
          case 'drag':
            r.data.canvasNeedsRedraw[CRp.DRAG] = bool;
            break;
          case 'select':
            r.data.canvasNeedsRedraw[CRp.SELECT_BOX] = bool;
            break;
        }
      };

      // whether to use Path2D caching for drawing
      var pathsImpld = typeof Path2D !== 'undefined';

      CRp.path2dEnabled = function (on) {
        if (on === undefined) {
          return this.pathsEnabled;
        }

        this.pathsEnabled = on ? true : false;
      };

      CRp.usePaths = function () {
        return pathsImpld && this.pathsEnabled;
      };

      [__webpack_require__(126), __webpack_require__(127), __webpack_require__(128), __webpack_require__(129), __webpack_require__(130), __webpack_require__(131), __webpack_require__(132), __webpack_require__(133), __webpack_require__(134), __webpack_require__(135)].forEach(function (props) {
        util.extend(CRp, props);
      });

      module.exports = CR;

      /***/
    },
    /* 124 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);
      var util = __webpack_require__(1);
      var Heap = __webpack_require__(9);
      var defs = __webpack_require__(19);

      var minTxrH = 25; // the size of the texture cache for small height eles (special case)
      var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up
      var minLvl = -4; // when scaling smaller than that we don't need to re-render
      var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
      var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
      var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps
      var defTxrWidth = 1024; // default/minimum texture width
      var maxTxrW = 1024; // the maximum width of a texture
      var maxTxrH = 1024; // the maximum height of a texture
      var minUtility = 0.5; // if usage of texture is less than this, it is retired
      var maxFullness = 0.8; // fullness of texture after which queue removal is checked
      var maxFullnessChecks = 10; // dequeued after this many checks
      var allowEdgeTxrCaching = false; // whether edges can be cached as textures (TODO maybe better on if webgl supported?)
      var allowParentTxrCaching = false; // whether parent nodes can be cached as textures (TODO maybe better on if webgl supported?)
      var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
      var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
      var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
      var deqFastCost = 0.9; // % of frame time to be used when >60fps
      var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
      var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

      var getTxrReasons = {
        dequeue: 'dequeue',
        downscale: 'downscale',
        highQuality: 'highQuality'
      };

      var ElementTextureCache = function ElementTextureCache(renderer) {
        var self = this;

        self.renderer = renderer;
        self.onDequeues = [];

        self.setupDequeueing();
      };

      var ETCp = ElementTextureCache.prototype;

      ETCp.reasons = getTxrReasons;

      // the list of textures in which new subtextures for elements can be placed
      ETCp.getTextureQueue = function (txrH) {
        var self = this;
        self.eleImgCaches = self.eleImgCaches || {};

        return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
      };

      // the list of usused textures which can be recycled (in use in texture queue)
      ETCp.getRetiredTextureQueue = function (txrH) {
        var self = this;

        var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
        var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];

        return rtxtrQ;
      };

      // queue of element draw requests at different scale levels
      ETCp.getElementQueue = function () {
        var self = this;

        var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
          return b.reqs - a.reqs;
        });

        return q;
      };

      // queue of element draw requests at different scale levels (element id lookup)
      ETCp.getElementIdToQueue = function () {
        var self = this;

        var id2q = self.eleIdToCacheQueue = self.eleIdToCacheQueue || {};

        return id2q;
      };

      ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
        var self = this;
        var r = this.renderer;
        var rs = ele._private.rscratch;
        var zoom = r.cy.zoom();

        if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
          return null;
        }

        if (lvl == null) {
          lvl = Math.ceil(math.log2(zoom * pxRatio));
        }

        if (lvl < minLvl) {
          lvl = minLvl;
        } else if (zoom >= maxZoom || lvl > maxLvl) {
          return null;
        }

        var scale = Math.pow(2, lvl);
        var eleScaledH = bb.h * scale;
        var eleScaledW = bb.w * scale;
        var caches = rs.imgCaches = rs.imgCaches || {};
        var eleCache = caches[lvl];

        if (eleCache) {
          return eleCache;
        }

        var txrH; // which texture height this ele belongs to

        if (eleScaledH <= minTxrH) {
          txrH = minTxrH;
        } else if (eleScaledH <= txrStepH) {
          txrH = txrStepH;
        } else {
          txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
        }

        if (eleScaledH > maxTxrH || eleScaledW > maxTxrW || !allowEdgeTxrCaching && ele.isEdge() || !allowParentTxrCaching && ele.isParent()) {
          return null; // caching large elements is not efficient
        }

        var txrQ = self.getTextureQueue(txrH);

        // first try the second last one in case it has space at the end
        var txr = txrQ[txrQ.length - 2];

        var addNewTxr = function addNewTxr() {
          return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
        };

        // try the last one if there is no second last one
        if (!txr) {
          txr = txrQ[txrQ.length - 1];
        }

        // if the last one doesn't exist, we need a first one
        if (!txr) {
          txr = addNewTxr();
        }

        // if there's no room in the current texture, we need a new one
        if (txr.width - txr.usedWidth < eleScaledW) {
          txr = addNewTxr();
        }

        var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);
        var scalableFrom = function scalableFrom(otherCache) {
          return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
        };

        var deqing = reason && reason === getTxrReasons.dequeue;
        var highQualityReq = reason && reason === getTxrReasons.highQuality;
        var downscaleReq = reason && reason === getTxrReasons.downscale;

        var higherCache; // the nearest cache with a higher level
        for (var l = lvl + 1; l <= maxLvl; l++) {
          var c = caches[l];

          if (c) {
            higherCache = c;break;
          }
        }

        var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

        var downscale = function downscale() {
          txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
        };

        // reset ele area in texture
        txr.context.setTransform(1, 0, 0, 1, 0, 0);
        txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

        if (scalableFrom(oneUpCache)) {
          // then we can relatively cheaply rescale the existing image w/o rerendering
          downscale();
        } else if (scalableFrom(higherCache)) {
          // then use the higher cache for now and queue the next level down
          // to cheaply scale towards the smaller level

          if (highQualityReq) {
            for (var l = higherCache.level; l > lvl; l--) {
              oneUpCache = self.getElement(ele, bb, pxRatio, l, getTxrReasons.downscale);
            }

            downscale();
          } else {
            self.queueElement(ele, higherCache.level - 1);

            return higherCache;
          }
        } else {

          var lowerCache; // the nearest cache with a lower level
          if (!deqing && !highQualityReq && !downscaleReq) {
            for (var l = lvl - 1; l >= minLvl; l--) {
              var c = caches[l];

              if (c) {
                lowerCache = c;break;
              }
            }
          }

          if (scalableFrom(lowerCache)) {
            // then use the lower quality cache for now and queue the better one for later

            self.queueElement(ele, lvl);

            return lowerCache;
          }

          txr.context.translate(txr.usedWidth, 0);
          txr.context.scale(scale, scale);

          r.drawElement(txr.context, ele, bb, scaledLabelShown);

          txr.context.scale(1 / scale, 1 / scale);
          txr.context.translate(-txr.usedWidth, 0);
        }

        eleCache = caches[lvl] = {
          ele: ele,
          x: txr.usedWidth,
          texture: txr,
          level: lvl,
          scale: scale,
          width: eleScaledW,
          height: eleScaledH,
          scaledLabelShown: scaledLabelShown
        };

        txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);

        txr.eleCaches.push(eleCache);

        self.checkTextureFullness(txr);

        return eleCache;
      };

      ETCp.invalidateElement = function (ele) {
        var self = this;
        var caches = ele._private.rscratch.imgCaches;

        if (caches) {
          for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
            var cache = caches[lvl];

            if (cache) {
              var txr = cache.texture;

              // remove space from the texture it belongs to
              txr.invalidatedWidth += cache.width;

              // remove refs with the element
              caches[lvl] = null;
              util.removeFromArray(txr.eleCaches, cache);

              // remove from queue since the old req was for the old state
              self.removeFromQueue(ele);

              // might have to remove the entire texture if it's not efficiently using its space
              self.checkTextureUtility(txr);
            }
          }
        }
      };

      ETCp.checkTextureUtility = function (txr) {
        // invalidate all entries in the cache if the cache size is small
        if (txr.invalidatedWidth >= minUtility * txr.width) {
          this.retireTexture(txr);
        }
      };

      ETCp.checkTextureFullness = function (txr) {
        // if texture has been mostly filled and passed over several times, remove
        // it from the queue so we don't need to waste time looking at it to put new things

        var self = this;
        var txrQ = self.getTextureQueue(txr.height);

        if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
          util.removeFromArray(txrQ, txr);
        } else {
          txr.fullnessChecks++;
        }
      };

      ETCp.retireTexture = function (txr) {
        var self = this;
        var txrH = txr.height;
        var txrQ = self.getTextureQueue(txrH);

        // retire the texture from the active / searchable queue:

        util.removeFromArray(txrQ, txr);

        txr.retired = true;

        // remove the refs from the eles to the caches:

        var eleCaches = txr.eleCaches;

        for (var i = 0; i < eleCaches.length; i++) {
          var eleCache = eleCaches[i];
          var ele = eleCache.ele;
          var lvl = eleCache.level;
          var imgCaches = ele._private.rscratch.imgCaches;

          if (imgCaches) {
            imgCaches[lvl] = null;
          }
        }

        util.clearArray(eleCaches);

        // add the texture to a retired queue so it can be recycled in future:

        var rtxtrQ = self.getRetiredTextureQueue(txrH);

        rtxtrQ.push(txr);
      };

      ETCp.addTexture = function (txrH, minW) {
        var self = this;
        var txrQ = self.getTextureQueue(txrH);
        var txr = {};

        txrQ.push(txr);

        txr.eleCaches = [];

        txr.height = txrH;
        txr.width = Math.max(defTxrWidth, minW);
        txr.usedWidth = 0;
        txr.invalidatedWidth = 0;
        txr.fullnessChecks = 0;

        txr.canvas = document.createElement('canvas'); // eslint-disable-line no-undef
        txr.canvas.width = txr.width;
        txr.canvas.height = txr.height;

        txr.context = txr.canvas.getContext('2d');

        return txr;
      };

      ETCp.recycleTexture = function (txrH, minW) {
        var self = this;
        var txrQ = self.getTextureQueue(txrH);
        var rtxtrQ = self.getRetiredTextureQueue(txrH);

        for (var i = 0; i < rtxtrQ.length; i++) {
          var txr = rtxtrQ[i];

          if (txr.width >= minW) {
            txr.retired = false;

            txr.usedWidth = 0;
            txr.invalidatedWidth = 0;
            txr.fullnessChecks = 0;

            util.clearArray(txr.eleCaches);

            txr.context.setTransform(1, 0, 0, 1, 0, 0);
            txr.context.clearRect(0, 0, txr.width, txr.height);

            util.removeFromArray(rtxtrQ, txr);
            txrQ.push(txr);

            return txr;
          }
        }
      };

      ETCp.queueElement = function (ele, lvl) {
        var self = this;
        var q = self.getElementQueue();
        var id2q = self.getElementIdToQueue();
        var id = ele.id();
        var existingReq = id2q[id];

        if (existingReq) {
          // use the max lvl b/c in between lvls are cheap to make
          existingReq.level = Math.max(existingReq.level, lvl);
          existingReq.reqs++;

          q.updateItem(existingReq);
        } else {
          var req = {
            ele: ele,
            level: lvl,
            reqs: 1
          };

          q.push(req);

          id2q[id] = req;
        }
      };

      ETCp.dequeue = function (pxRatio /*, extent*/) {
        var self = this;
        var q = self.getElementQueue();
        var id2q = self.getElementIdToQueue();
        var dequeued = [];

        for (var i = 0; i < maxDeqSize; i++) {
          if (q.size() > 0) {
            var req = q.pop();
            var ele = req.ele;
            var caches = ele._private.rscratch.imgCaches;

            // dequeueing isn't necessary when an existing cache exists
            if (caches[req.level] != null) {
              continue;
            }

            id2q[ele.id()] = null;

            dequeued.push(req);

            var bb = ele.boundingBox();

            self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
          } else {
            break;
          }
        }

        return dequeued;
      };

      ETCp.removeFromQueue = function (ele) {
        var self = this;
        var q = self.getElementQueue();
        var id2q = self.getElementIdToQueue();
        var req = id2q[ele.id()];

        if (req != null) {
          // bring to front of queue
          req.reqs = util.MAX_INT;
          q.updateItem(req);

          q.pop(); // remove from queue

          id2q[ele.id()] = null; // remove from lookup map
        }
      };

      ETCp.onDequeue = function (fn) {
        this.onDequeues.push(fn);
      };
      ETCp.offDequeue = function (fn) {
        util.removeFromArray(this.onDequeues, fn);
      };

      ETCp.setupDequeueing = defs.setupDequeueing({
        deqRedrawThreshold: deqRedrawThreshold,
        deqCost: deqCost,
        deqAvgCost: deqAvgCost,
        deqNoDrawCost: deqNoDrawCost,
        deqFastCost: deqFastCost,
        deq: function deq(self, pxRatio, extent) {
          return self.dequeue(pxRatio, extent);
        },
        onDeqd: function onDeqd(self, deqd) {
          for (var i = 0; i < self.onDequeues.length; i++) {
            var fn = self.onDequeues[i];

            fn(deqd);
          }
        },
        shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
          for (var i = 0; i < deqd.length; i++) {
            var bb = deqd[i].ele.boundingBox();

            if (math.boundingBoxesIntersect(bb, extent)) {
              return true;
            }
          }

          return false;
        },
        priority: function priority(self) {
          return self.renderer.beforeRenderPriorities.eleTxrDeq;
        }
      });

      module.exports = ElementTextureCache;

      /***/
    },
    /* 125 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);
      var Heap = __webpack_require__(9);
      var is = __webpack_require__(0);
      var defs = __webpack_require__(19);

      var defNumLayers = 1; // default number of layers to use
      var minLvl = -4; // when scaling smaller than that we don't need to re-render
      var maxLvl = 2; // when larger than this scale just render directly (caching is not helpful)
      var maxZoom = 3.99; // beyond this zoom level, layered textures are not used
      var deqRedrawThreshold = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile
      var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates
      var disableEleImgSmoothing = true; // when drawing eles on layers from an ele cache ; crisper and more performant when true
      var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame
      var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time
      var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing
      var deqFastCost = 0.9; // % of frame time to be used when >60fps
      var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch
      var invalidThreshold = 250; // time threshold for disabling b/c of invalidations
      var maxLayerArea = 4000 * 4000; // layers can't be bigger than this
      var alwaysQueue = true; // never draw all the layers in a level on a frame; draw directly until all dequeued
      var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)

      var useEleTxrCaching = true; // whether to use individual ele texture caching underneath this cache

      // var log = function(){ console.log.apply( console, arguments ); };

      var LayeredTextureCache = function LayeredTextureCache(renderer, eleTxrCache) {
        var self = this;

        var r = self.renderer = renderer;

        self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

        self.firstGet = true;

        self.lastInvalidationTime = util.performanceNow() - 2 * invalidThreshold;

        self.skipping = false;

        r.beforeRender(function (willDraw, now) {
          if (now - self.lastInvalidationTime <= invalidThreshold) {
            self.skipping = true;
          } else {
            self.skipping = false;
          }
        });

        var qSort = function qSort(a, b) {
          return b.reqs - a.reqs;
        };

        self.layersQueue = new Heap(qSort);

        self.eleTxrCache = eleTxrCache;

        self.setupEleCacheInvalidation();

        self.setupDequeueing();
      };

      var LTCp = LayeredTextureCache.prototype;

      var layerIdPool = 0;
      var MAX_INT = Math.pow(2, 53) - 1;

      LTCp.makeLayer = function (bb, lvl) {
        var scale = Math.pow(2, lvl);

        var w = Math.ceil(bb.w * scale);
        var h = Math.ceil(bb.h * scale);

        var canvas = document.createElement('canvas'); // eslint-disable-line no-undef

        canvas.width = w;
        canvas.height = h;

        var layer = {
          id: layerIdPool = ++layerIdPool % MAX_INT,
          bb: bb,
          level: lvl,
          width: w,
          height: h,
          canvas: canvas,
          context: canvas.getContext('2d'),
          eles: [],
          elesQueue: [],
          reqs: 0
        };

        // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

        var cxt = layer.context;
        var dx = -layer.bb.x1;
        var dy = -layer.bb.y1;

        // do the transform on creation to save cycles (it's the same for all eles)
        cxt.scale(scale, scale);
        cxt.translate(dx, dy);

        return layer;
      };

      LTCp.getLayers = function (eles, pxRatio, lvl) {
        var self = this;
        var r = self.renderer;
        var cy = r.cy;
        var zoom = cy.zoom();
        var firstGet = self.firstGet;

        self.firstGet = false;

        // log('--\nget layers with %s eles', eles.length);
        //log eles.map(function(ele){ return ele.id() }) );

        if (lvl == null) {
          lvl = Math.ceil(math.log2(zoom * pxRatio));

          if (lvl < minLvl) {
            lvl = minLvl;
          } else if (zoom >= maxZoom || lvl > maxLvl) {
            return null;
          }
        }

        self.validateLayersElesOrdering(lvl, eles);

        var layersByLvl = self.layersByLevel;
        var scale = Math.pow(2, lvl);
        var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
        var bb;

        var lvlComplete = self.levelIsComplete(lvl, eles);
        var tmpLayers;

        var checkTempLevels = function checkTempLevels() {
          var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
            self.validateLayersElesOrdering(l, eles);

            if (self.levelIsComplete(l, eles)) {
              tmpLayers = layersByLvl[l];
              return true;
            }
          };

          var checkLvls = function checkLvls(dir) {
            if (tmpLayers) {
              return;
            }

            for (var l = lvl + dir; minLvl <= l && l <= maxLvl; l += dir) {
              if (canUseAsTmpLvl(l)) {
                break;
              }
            }
          };

          checkLvls(+1);
          checkLvls(-1);

          // remove the invalid layers; they will be replaced as needed later in this function
          for (var i = layers.length - 1; i >= 0; i--) {
            var layer = layers[i];

            if (layer.invalid) {
              util.removeFromArray(layers, layer);
            }
          }
        };

        if (!lvlComplete) {
          // if the current level is incomplete, then use the closest, best quality layerset temporarily
          // and later queue the current layerset so we can get the proper quality level soon

          checkTempLevels();
        } else {
          // log('level complete, using existing layers\n--');
          return layers;
        }

        var getBb = function getBb() {
          if (!bb) {
            bb = math.makeBoundingBox();

            for (var i = 0; i < eles.length; i++) {
              math.updateBoundingBox(bb, eles[i].boundingBox());
            }
          }

          return bb;
        };

        var makeLayer = function makeLayer(opts) {
          opts = opts || {};

          var after = opts.after;

          getBb();

          var area = bb.w * scale * (bb.h * scale);

          if (area > maxLayerArea) {
            return null;
          }

          var layer = self.makeLayer(bb, lvl);

          if (after != null) {
            var index = layers.indexOf(after) + 1;

            layers.splice(index, 0, layer);
          } else if (opts.insert === undefined || opts.insert) {
            // no after specified => first layer made so put at start
            layers.unshift(layer);
          }

          // if( tmpLayers ){
          //self.queueLayer( layer );
          // }

          return layer;
        };

        if (self.skipping && !firstGet) {
          // log('skip layers');
          return null;
        }

        // log('do layers');

        var layer = null;
        var maxElesPerLayer = eles.length / defNumLayers;
        var allowLazyQueueing = alwaysQueue && !firstGet;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var rs = ele._private.rscratch;
          var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

          // log('look at ele', ele.id());

          var existingLayer = caches[lvl];

          if (existingLayer) {
            // reuse layer for later eles
            // log('reuse layer for', ele.id());
            layer = existingLayer;
            continue;
          }

          if (!layer || layer.eles.length >= maxElesPerLayer || !math.boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
            // log('make new layer for ele %s', ele.id());

            layer = makeLayer({ insert: true, after: layer });

            // if now layer can be built then we can't use layers at this level
            if (!layer) {
              return null;
            }

            // log('new layer with id %s', layer.id);
          }

          if (tmpLayers || allowLazyQueueing) {
            // log('queue ele %s in layer %s', ele.id(), layer.id);
            self.queueLayer(layer, ele);
          } else {
            // log('draw ele %s in layer %s', ele.id(), layer.id);
            self.drawEleInLayer(layer, ele, lvl, pxRatio);
          }

          layer.eles.push(ele);

          caches[lvl] = layer;
        }

        // log('--');

        if (tmpLayers) {
          // then we only queued the current layerset and can't draw it yet
          return tmpLayers;
        }

        if (allowLazyQueueing) {
          // log('lazy queue level', lvl);
          return null;
        }

        return layers;
      };

      // a layer may want to use an ele cache of a higher level to avoid blurriness
      // so the layer level might not equal the ele level
      LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
        return lvl;
      };

      function imgSmoothing(context, bool) {
        if (context.imageSmoothingEnabled != null) {
          context.imageSmoothingEnabled = bool;
        } else {
          context.webkitImageSmoothingEnabled = bool;
          context.mozImageSmoothingEnabled = bool;
          context.msImageSmoothingEnabled = bool;
        }
      }

      LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
        var self = this;
        var r = this.renderer;
        var context = layer.context;
        var bb = ele.boundingBox();

        if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
          return;
        }

        var eleCache = self.eleTxrCache;
        var reason = useHighQualityEleTxrReqs ? eleCache.reasons.highQuality : undefined;

        lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);

        var cache = useEleTxrCaching ? eleCache.getElement(ele, bb, null, lvl, reason) : null;

        if (cache) {
          if (disableEleImgSmoothing) {
            imgSmoothing(context, false);
          }

          context.drawImage(cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h);

          if (disableEleImgSmoothing) {
            imgSmoothing(context, true);
          }
        } else {
          // if the element is not cacheable, then draw directly
          r.drawElement(context, ele);
        }
      };

      LTCp.levelIsComplete = function (lvl, eles) {
        var self = this;
        var layers = self.layersByLevel[lvl];

        if (!layers || layers.length === 0) {
          return false;
        }

        var numElesInLayers = 0;

        for (var i = 0; i < layers.length; i++) {
          var layer = layers[i];

          // if there are any eles needed to be drawn yet, the level is not complete
          if (layer.reqs > 0) {
            return false;
          }

          // if the layer is invalid, the level is not complete
          if (layer.invalid) {
            return false;
          }

          numElesInLayers += layer.eles.length;
        }

        // we should have exactly the number of eles passed in to be complete
        if (numElesInLayers !== eles.length) {
          return false;
        }

        return true;
      };

      LTCp.validateLayersElesOrdering = function (lvl, eles) {
        var layers = this.layersByLevel[lvl];

        if (!layers) {
          return;
        }

        // if in a layer the eles are not in the same order, then the layer is invalid
        // (i.e. there is an ele in between the eles in the layer)

        for (var i = 0; i < layers.length; i++) {
          var layer = layers[i];
          var offset = -1;

          // find the offset
          for (var j = 0; j < eles.length; j++) {
            if (layer.eles[0] === eles[j]) {
              offset = j;
              break;
            }
          }

          if (offset < 0) {
            // then the layer has nonexistant elements and is invalid
            this.invalidateLayer(layer);
            continue;
          }

          // the eles in the layer must be in the same continuous order, else the layer is invalid

          var o = offset;

          for (var j = 0; j < layer.eles.length; j++) {
            if (layer.eles[j] !== eles[o + j]) {
              // log('invalidate based on ordering', layer.id);

              this.invalidateLayer(layer);
              break;
            }
          }
        }
      };

      LTCp.updateElementsInLayers = function (eles, update) {
        var self = this;
        var isEles = is.element(eles[0]);

        // collect udpated elements (cascaded from the layers) and update each
        // layer itself along the way
        for (var i = 0; i < eles.length; i++) {
          var req = isEles ? null : eles[i];
          var ele = isEles ? eles[i] : eles[i].ele;
          var rs = ele._private.rscratch;
          var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

          for (var l = minLvl; l <= maxLvl; l++) {
            var layer = caches[l];

            if (!layer) {
              continue;
            }

            // if update is a request from the ele cache, then it affects only
            // the matching level
            if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
              continue;
            }

            update(layer, ele, req);
          }
        }
      };

      LTCp.haveLayers = function () {
        var self = this;
        var haveLayers = false;

        for (var l = minLvl; l <= maxLvl; l++) {
          var layers = self.layersByLevel[l];

          if (layers && layers.length > 0) {
            haveLayers = true;
            break;
          }
        }

        return haveLayers;
      };

      LTCp.invalidateElements = function (eles) {
        var self = this;

        self.lastInvalidationTime = util.performanceNow();

        // log('update invalidate layer time from eles');

        if (eles.length === 0 || !self.haveLayers()) {
          return;
        }

        self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
          self.invalidateLayer(layer);
        });
      };

      LTCp.invalidateLayer = function (layer) {
        // log('update invalidate layer time');

        this.lastInvalidationTime = util.performanceNow();

        if (layer.invalid) {
          return;
        } // save cycles

        var lvl = layer.level;
        var eles = layer.eles;
        var layers = this.layersByLevel[lvl];

        // log('invalidate layer', layer.id );

        util.removeFromArray(layers, layer);
        // layer.eles = [];

        layer.elesQueue = [];

        layer.invalid = true;

        if (layer.replacement) {
          layer.replacement.invalid = true;
        }

        for (var i = 0; i < eles.length; i++) {
          var caches = eles[i]._private.rscratch.imgLayerCaches;

          if (caches) {
            caches[lvl] = null;
          }
        }
      };

      LTCp.refineElementTextures = function (eles) {
        var self = this;

        // log('refine', eles.length);

        self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
          var rLyr = layer.replacement;

          if (!rLyr) {
            rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
            rLyr.replaces = layer;
            rLyr.eles = layer.eles;

            // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
          }

          if (!rLyr.reqs) {
            for (var i = 0; i < rLyr.eles.length; i++) {
              self.queueLayer(rLyr, rLyr.eles[i]);
            }

            // log('queue replacement layer refinement', rLyr.id);
          }
        });
      };

      LTCp.setupEleCacheInvalidation = function () {
        var self = this;
        var eleDeqs = [];

        if (!useEleTxrCaching) {
          return;
        }

        var updatedElesInLayers = util.debounce(function () {
          self.refineElementTextures(eleDeqs);

          eleDeqs = [];
        }, refineEleDebounceTime);

        self.eleTxrCache.onDequeue(function (reqs) {
          for (var i = 0; i < reqs.length; i++) {
            eleDeqs.push(reqs[i]);
          }

          updatedElesInLayers();
        });
      };

      LTCp.queueLayer = function (layer, ele) {
        var self = this;
        var q = self.layersQueue;
        var elesQ = layer.elesQueue;
        var hasId = elesQ.hasId = elesQ.hasId || {};

        // if a layer is going to be replaced, queuing is a waste of time
        if (layer.replacement) {
          return;
        }

        if (ele) {
          if (hasId[ele.id()]) {
            return;
          }

          elesQ.push(ele);
          hasId[ele.id()] = true;
        }

        if (layer.reqs) {
          layer.reqs++;

          q.updateItem(layer);
        } else {
          layer.reqs = 1;

          q.push(layer);
        }
      };

      LTCp.dequeue = function (pxRatio) {
        var self = this;
        var q = self.layersQueue;
        var deqd = [];
        var eleDeqs = 0;

        while (eleDeqs < maxDeqSize) {
          if (q.size() === 0) {
            break;
          }

          var layer = q.peek();

          // if a layer has been or will be replaced, then don't waste time with it
          if (layer.replacement) {
            // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
            q.pop();
            continue;
          }

          // if this is a replacement layer that has been superceded, then forget it
          if (layer.replaces && layer !== layer.replaces.replacement) {
            // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
            q.pop();
            continue;
          }

          if (layer.invalid) {
            // log('replacement layer %s is invalid; dequeued', layer.id);
            q.pop();
            continue;
          }

          var ele = layer.elesQueue.shift();

          if (ele) {
            // log('dequeue layer %s', layer.id);

            self.drawEleInLayer(layer, ele, layer.level, pxRatio);

            eleDeqs++;
          }

          if (deqd.length === 0) {
            // we need only one entry in deqd to queue redrawing etc
            deqd.push(true);
          }

          // if the layer has all its eles done, then remove from the queue
          if (layer.elesQueue.length === 0) {
            q.pop();

            layer.reqs = 0;

            // log('dequeue of layer %s complete', layer.id);

            // when a replacement layer is dequeued, it replaces the old layer in the level
            if (layer.replaces) {
              self.applyLayerReplacement(layer);
            }

            self.requestRedraw();
          }
        }

        return deqd;
      };

      LTCp.applyLayerReplacement = function (layer) {
        var self = this;
        var layersInLevel = self.layersByLevel[layer.level];
        var replaced = layer.replaces;
        var index = layersInLevel.indexOf(replaced);

        // if the replaced layer is not in the active list for the level, then replacing
        // refs would be a mistake (i.e. overwriting the true active layer)
        if (index < 0 || replaced.invalid) {
          // log('replacement layer would have no effect', layer.id);
          return;
        }

        layersInLevel[index] = layer; // replace level ref

        // replace refs in eles
        for (var i = 0; i < layer.eles.length; i++) {
          var _p = layer.eles[i]._private;
          var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

          if (cache) {
            cache[layer.level] = layer;
          }
        }

        // log('apply replacement layer %s over %s', layer.id, replaced.id);

        self.requestRedraw();
      };

      LTCp.requestRedraw = util.debounce(function () {
        var r = this.renderer;

        r.redrawHint('eles', true);
        r.redrawHint('drag', true);
        r.redraw();
      }, 100);

      LTCp.setupDequeueing = defs.setupDequeueing({
        deqRedrawThreshold: deqRedrawThreshold,
        deqCost: deqCost,
        deqAvgCost: deqAvgCost,
        deqNoDrawCost: deqNoDrawCost,
        deqFastCost: deqFastCost,
        deq: function deq(self, pxRatio) {
          return self.dequeue(pxRatio);
        },
        onDeqd: util.noop,
        shouldRedraw: util.trueify,
        priority: function priority(self) {
          return self.renderer.beforeRenderPriorities.lyrTxrDeq;
        }
      });

      module.exports = LayeredTextureCache;

      /***/
    },
    /* 126 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var CRp = {};

      var impl;

      CRp.arrowShapeImpl = function (name) {
        return (impl || (impl = {
          'polygon': function polygon(context, points) {
            for (var i = 0; i < points.length; i++) {
              var pt = points[i];

              context.lineTo(pt.x, pt.y);
            }
          },

          'triangle-backcurve': function triangleBackcurve(context, points, controlPoint) {
            var firstPt;

            for (var i = 0; i < points.length; i++) {
              var pt = points[i];

              if (i === 0) {
                firstPt = pt;
              }

              context.lineTo(pt.x, pt.y);
            }

            context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
          },

          'triangle-tee': function triangleTee(context, trianglePoints, teePoints) {
            if (context.beginPath) {
              context.beginPath();
            }

            var triPts = trianglePoints;
            for (var i = 0; i < triPts.length; i++) {
              var pt = triPts[i];

              context.lineTo(pt.x, pt.y);
            }

            if (context.closePath) {
              context.closePath();
            }

            if (context.beginPath) {
              context.beginPath();
            }

            var teePts = teePoints;
            var firstTeePt = teePoints[0];
            context.moveTo(firstTeePt.x, firstTeePt.y);

            for (var i = 0; i < teePts.length; i++) {
              var pt = teePts[i];

              context.lineTo(pt.x, pt.y);
            }
            if (context.closePath) {
              context.closePath();
            }
          },

          'triangle-cross': function triangleCross(context, trianglePoints, crossLinePoints) {
            if (context.beginPath) {
              context.beginPath();
            }

            var triPts = trianglePoints;
            for (var i = 0; i < triPts.length; i++) {
              var pt = triPts[i];

              context.lineTo(pt.x, pt.y);
            }

            if (context.closePath) {
              context.closePath();
            }

            if (context.beginPath) {
              context.beginPath();
            }

            var teePts = crossLinePoints;
            var firstTeePt = crossLinePoints[0];
            context.moveTo(firstTeePt.x, firstTeePt.y);

            for (var i = 0; i < teePts.length; i++) {
              var pt = teePts[i];

              context.lineTo(pt.x, pt.y);
            }
            if (context.closePath) {
              context.closePath();
            }
          },

          'circle': function circle(context, rx, ry, r) {
            context.arc(rx, ry, r, 0, Math.PI * 2, false);
          }
        }))[name];
      };

      module.exports = CRp;

      /***/
    },
    /* 127 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);

      var CRp = {};

      CRp.drawElement = function (context, ele, shiftToOriginWithBb, showLabel) {
        var r = this;

        if (ele.isNode()) {
          r.drawNode(context, ele, shiftToOriginWithBb, showLabel);
        } else {
          r.drawEdge(context, ele, shiftToOriginWithBb, showLabel);
        }
      };

      CRp.drawCachedElement = function (context, ele, pxRatio, extent) {
        var r = this;
        var bb = ele.boundingBox();

        if (bb.w === 0 || bb.h === 0) {
          return;
        }

        if (!extent || math.boundingBoxesIntersect(bb, extent)) {
          var cache = r.data.eleTxrCache.getElement(ele, bb, pxRatio);

          if (cache != null) {
            context.drawImage(cache.texture.canvas, cache.x, 0, cache.width, cache.height, bb.x1, bb.y1, bb.w, bb.h);
          } else {
            // if the element is not cacheable, then draw directly
            r.drawElement(context, ele);
          }
        }
      };

      CRp.drawElements = function (context, eles) {
        var r = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          r.drawElement(context, ele);
        }
      };

      CRp.drawCachedElements = function (context, eles, pxRatio, extent) {
        var r = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          r.drawCachedElement(context, ele, pxRatio, extent);
        }
      };

      CRp.drawCachedNodes = function (context, eles, pxRatio, extent) {
        var r = this;

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];

          if (!ele.isNode()) {
            continue;
          }

          r.drawCachedElement(context, ele, pxRatio, extent);
        }
      };

      CRp.drawLayeredElements = function (context, eles, pxRatio, extent) {
        var r = this;

        var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

        if (layers) {
          for (var i = 0; i < layers.length; i++) {
            var layer = layers[i];
            var bb = layer.bb;

            if (bb.w === 0 || bb.h === 0) {
              continue;
            }

            context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
          }
        } else {
          // fall back on plain caching if no layers
          r.drawCachedElements(context, eles, pxRatio, extent);
        }
      };

      CRp.drawDebugPoints = function (context, eles) {
        var draw = function draw(x, y, color) {
          context.fillStyle = color;
          context.fillRect(x - 1, y - 1, 3, 3);
        };

        for (var i = 0; i < eles.length; i++) {
          var ele = eles[i];
          var rs = ele._private.rscratch;

          if (ele.isNode()) {
            var p = ele.position();

            draw(p.x, p.y, 'magenta');
          } else {
            var pts = rs.allpts;

            for (var j = 0; j + 1 < pts.length; j += 2) {
              var x = pts[j];
              var y = pts[j + 1];

              draw(x, y, 'cyan');
            }

            draw(rs.midX, rs.midY, 'yellow');
          }
        }
      };

      module.exports = CRp;

      /***/
    },
    /* 128 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var CRp = {};

      CRp.drawEdge = function (context, edge, shiftToOriginWithBb, drawLabel) {
        var r = this;
        var rs = edge._private.rscratch;
        var usePaths = r.usePaths();

        // if bezier ctrl pts can not be calculated, then die
        if (rs.badLine || isNaN(rs.allpts[0])) {
          // isNaN in case edge is impossible and browser bugs (e.g. safari)
          return;
        }

        if (!edge.visible()) {
          return;
        }

        var bb = void 0;
        if (shiftToOriginWithBb) {
          bb = shiftToOriginWithBb;

          context.translate(-bb.x1, -bb.y1);
        }

        var overlayPadding = edge.pstyle('overlay-padding').pfValue;
        var overlayWidth = 2 * overlayPadding;
        var overlayOpacity = edge.pstyle('overlay-opacity').value;
        var overlayColor = edge.pstyle('overlay-color').value;
        var lineColor = edge.pstyle('line-color').value;
        var opacity = edge.pstyle('opacity').value;
        var lineStyle = edge.pstyle('line-style').value;
        var edgeWidth = edge.pstyle('width').pfValue;

        var drawLine = function drawLine() {
          var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;

          context.lineWidth = edgeWidth;
          context.lineCap = 'butt';

          r.strokeStyle(context, lineColor[0], lineColor[1], lineColor[2], strokeOpacity);

          r.drawEdgePath(edge, context, rs.allpts, lineStyle);
        };

        var drawOverlay = function drawOverlay() {
          var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : overlayOpacity;

          context.lineWidth = overlayWidth;

          if (rs.edgeType === 'self' && !usePaths) {
            context.lineCap = 'butt';
          } else {
            context.lineCap = 'round';
          }

          r.strokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], strokeOpacity);

          r.drawEdgePath(edge, context, rs.allpts, 'solid');
        };

        var drawArrows = function drawArrows() {
          var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;

          r.drawArrowheads(context, edge, arrowOpacity);
        };

        var drawText = function drawText() {
          r.drawElementText(context, edge, drawLabel);
        };

        context.lineJoin = 'round';

        var ghost = edge.pstyle('ghost').value === 'yes';

        if (ghost) {
          var gx = edge.pstyle('ghost-offset-x').pfValue;
          var gy = edge.pstyle('ghost-offset-y').pfValue;
          var ghostOpacity = edge.pstyle('ghost-opacity').value;
          var effectiveGhostOpacity = opacity * ghostOpacity;

          context.translate(gx, gy);

          drawLine(effectiveGhostOpacity);
          drawArrows(effectiveGhostOpacity);

          context.translate(-gx, -gy);
        }

        drawLine();
        drawArrows();
        drawOverlay();
        drawText();

        if (shiftToOriginWithBb) {
          context.translate(bb.x1, bb.y1);
        }
      };

      CRp.drawEdgePath = function (edge, context, pts, type) {
        var rs = edge._private.rscratch;
        var canvasCxt = context;
        var path = void 0;
        var pathCacheHit = false;
        var usePaths = this.usePaths();

        if (usePaths) {
          var pathCacheKey = pts.join('$');
          var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

          if (keyMatches) {
            path = context = rs.pathCache;
            pathCacheHit = true;
          } else {
            path = context = new Path2D(); // eslint-disable-line no-undef
            rs.pathCacheKey = pathCacheKey;
            rs.pathCache = path;
          }
        }

        if (canvasCxt.setLineDash) {
          // for very outofdate browsers
          switch (type) {
            case 'dotted':
              canvasCxt.setLineDash([1, 1]);
              break;

            case 'dashed':
              canvasCxt.setLineDash([6, 3]);
              break;

            case 'solid':
              canvasCxt.setLineDash([]);
              break;
          }
        }

        if (!pathCacheHit && !rs.badLine) {
          if (context.beginPath) {
            context.beginPath();
          }
          context.moveTo(pts[0], pts[1]);

          switch (rs.edgeType) {
            case 'bezier':
            case 'self':
            case 'compound':
            case 'multibezier':
              for (var i = 2; i + 3 < pts.length; i += 4) {
                context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
              }
              break;

            case 'straight':
            case 'segments':
            case 'haystack':
              for (var _i = 2; _i + 1 < pts.length; _i += 2) {
                context.lineTo(pts[_i], pts[_i + 1]);
              }
              break;
          }
        }

        context = canvasCxt;
        if (usePaths) {
          context.stroke(path);
        } else {
          context.stroke();
        }

        // reset any line dashes
        if (context.setLineDash) {
          // for very outofdate browsers
          context.setLineDash([]);
        }
      };

      CRp.drawArrowheads = function (context, edge, opacity) {
        var rs = edge._private.rscratch;
        var isHaystack = rs.edgeType === 'haystack';

        if (!isHaystack) {
          this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
        }

        this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);

        this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

        if (!isHaystack) {
          this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
        }
      };

      CRp.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
        if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
          return;
        }

        var self = this;
        var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;
        if (arrowShape === 'none') {
          return;
        }

        var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
        var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
        var edgeWidth = edge.pstyle('width').pfValue;
        var edgeOpacity = edge.pstyle('opacity').value;

        if (opacity === undefined) {
          opacity = edgeOpacity;
        }

        var gco = context.globalCompositeOperation;

        if (opacity !== 1 || arrowFill === 'hollow') {
          // then extra clear is needed
          context.globalCompositeOperation = 'destination-out';

          self.fillStyle(context, 255, 255, 255, 1);
          self.strokeStyle(context, 255, 255, 255, 1);

          self.drawArrowShape(edge, prefix, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);

          context.globalCompositeOperation = gco;
        } // otherwise, the opaque arrow clears it for free :)

        var color = edge.pstyle(prefix + '-arrow-color').value;
        self.fillStyle(context, color[0], color[1], color[2], opacity);
        self.strokeStyle(context, color[0], color[1], color[2], opacity);

        self.drawArrowShape(edge, prefix, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
      };

      CRp.drawArrowShape = function (edge, arrowType, context, fill, edgeWidth, shape, x, y, angle) {
        var r = this;
        var usePaths = this.usePaths();
        var rs = edge._private.rscratch;
        var pathCacheHit = false;
        var path = void 0;
        var canvasContext = context;
        var translation = { x: x, y: y };
        var scale = edge.pstyle('arrow-scale').value;
        var size = this.getArrowWidth(edgeWidth, scale);
        var shapeImpl = r.arrowShapes[shape];

        if (usePaths) {
          var pathCacheKey = size + '$' + shape + '$' + angle + '$' + x + '$' + y;
          rs.arrowPathCacheKey = rs.arrowPathCacheKey || {};
          rs.arrowPathCache = rs.arrowPathCache || {};

          var alreadyCached = rs.arrowPathCacheKey[arrowType] === pathCacheKey;
          if (alreadyCached) {
            path = context = rs.arrowPathCache[arrowType];
            pathCacheHit = true;
          } else {
            path = context = new Path2D(); // eslint-disable-line no-undef
            rs.arrowPathCacheKey[arrowType] = pathCacheKey;
            rs.arrowPathCache[arrowType] = path;
          }
        }

        if (context.beginPath) {
          context.beginPath();
        }

        if (!pathCacheHit) {
          shapeImpl.draw(context, size, angle, translation, edgeWidth);
        }

        if (!shapeImpl.leavePathOpen && context.closePath) {
          context.closePath();
        }

        context = canvasContext;

        if (fill === 'filled' || fill === 'both') {
          if (usePaths) {
            context.fill(path);
          } else {
            context.fill();
          }
        }

        if (fill === 'hollow' || fill === 'both') {
          context.lineWidth = shapeImpl.matchEdgeWidth ? edgeWidth : 1;
          context.lineJoin = 'miter';

          if (usePaths) {
            context.stroke(path);
          } else {
            context.stroke();
          }
        }
      };

      module.exports = CRp;

      /***/
    },
    /* 129 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var CRp = {};

      CRp.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
        var r = this;

        // detect problematic cases for old browsers with bad images (cheaper than try-catch)
        if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
          return;
        }

        context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
      };

      CRp.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
        var r = this;
        var pos = node.position();
        var nodeX = pos.x;
        var nodeY = pos.y;
        var styleObj = node.cy().style();
        var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
        var fit = getIndexedStyle(node, 'background-fit', 'value', index);
        var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
        var nodeW = node.width();
        var nodeH = node.height();
        var paddingX2 = node.padding() * 2;
        var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
        var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
        var rs = node._private.rscratch;
        var clip = node.pstyle('background-clip').value;
        var shouldClip = clip === 'node';
        var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;

        var imgW = img.width || img.cachedW;
        var imgH = img.height || img.cachedH;

        // workaround for broken browsers like ie
        if (null == imgW || null == imgH) {
          document.body.appendChild(img); // eslint-disable-line no-undef

          imgW = img.cachedW = img.width || img.offsetWidth;
          imgH = img.cachedH = img.height || img.offsetHeight;

          document.body.removeChild(img); // eslint-disable-line no-undef
        }

        var w = imgW;
        var h = imgH;

        if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
          if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
            w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
          } else {
            w = getIndexedStyle(node, 'background-width', 'pfValue', index);
          }
        }

        if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
          if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
            h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
          } else {
            h = getIndexedStyle(node, 'background-height', 'pfValue', index);
          }
        }

        if (w === 0 || h === 0) {
          return; // no point in drawing empty image (and chrome is broken in this case)
        }

        if (fit === 'contain') {
          var scale = Math.min(nodeTW / w, nodeTH / h);

          w *= scale;
          h *= scale;
        } else if (fit === 'cover') {
          var scale = Math.max(nodeTW / w, nodeTH / h);

          w *= scale;
          h *= scale;
        }

        var x = nodeX - nodeTW / 2; // left
        if (getIndexedStyle(node, 'background-position-x', 'units', index) === '%') {
          x += (nodeTW - w) * getIndexedStyle(node, 'background-position-x', 'pfValue', index);
        } else {
          x += getIndexedStyle(node, 'background-position-x', 'pfValue', index);
        }

        var y = nodeY - nodeTH / 2; // top
        if (getIndexedStyle(node, 'background-position-y', 'units', index) === '%') {
          y += (nodeTH - h) * getIndexedStyle(node, 'background-position-y', 'pfValue', index);
        } else {
          y += getIndexedStyle(node, 'background-position-y', 'pfValue', index);
        }

        if (rs.pathCache) {
          x -= nodeX;
          y -= nodeY;

          nodeX = 0;
          nodeY = 0;
        }

        var gAlpha = context.globalAlpha;

        context.globalAlpha = imgOpacity;

        if (repeat === 'no-repeat') {

          if (shouldClip) {
            context.save();

            if (rs.pathCache) {
              context.clip(rs.pathCache);
            } else {
              r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);

              context.clip();
            }
          }

          r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

          if (shouldClip) {
            context.restore();
          }
        } else {
          var pattern = context.createPattern(img, repeat);
          context.fillStyle = pattern;

          r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);

          context.translate(x, y);
          context.fill();
          context.translate(-x, -y);
        }

        context.globalAlpha = gAlpha;
      };

      module.exports = CRp;

      /***/
    },
    /* 130 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var util = __webpack_require__(1);
      var math = __webpack_require__(2);

      var CRp = {};

      CRp.eleTextBiggerThanMin = function (ele, scale) {
        if (!scale) {
          var zoom = ele.cy().zoom();
          var pxRatio = this.getPixelRatio();
          var lvl = Math.ceil(math.log2(zoom * pxRatio)); // the effective texture level

          scale = Math.pow(2, lvl);
        }

        var computedSize = ele.pstyle('font-size').pfValue * scale;
        var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

        if (computedSize < minSize) {
          return false;
        }

        return true;
      };

      CRp.drawElementText = function (context, ele, force) {
        var r = this;

        if (force === undefined) {
          if (!r.eleTextBiggerThanMin(ele)) {
            return;
          }
        } else {
          if (!force) {
            return;
          }
        }

        if (ele.isNode()) {
          var label = ele.pstyle('label');

          if (!label || !label.value) {
            return;
          }

          var textHalign = ele.pstyle('text-halign').strValue;
          var textValign = ele.pstyle('text-valign').strValue;

          switch (textHalign) {
            case 'left':
              context.textAlign = 'right';
              break;

            case 'right':
              context.textAlign = 'left';
              break;

            default:
              // e.g. center
              context.textAlign = 'center';
          }

          context.textBaseline = 'bottom';
        } else {
          var label = ele.pstyle('label');
          var srcLabel = ele.pstyle('source-label');
          var tgtLabel = ele.pstyle('target-label');

          if ((!label || !label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
            return;
          }

          context.textAlign = 'center';
          context.textBaseline = 'bottom';
        }

        r.drawText(context, ele);

        if (ele.isEdge()) {
          r.drawText(context, ele, 'source');

          r.drawText(context, ele, 'target');
        }
      };

      CRp.drawNodeText = CRp.drawEdgeText = CRp.drawElementText;

      CRp.getFontCache = function (context) {
        var cache;

        this.fontCaches = this.fontCaches || [];

        for (var i = 0; i < this.fontCaches.length; i++) {
          cache = this.fontCaches[i];

          if (cache.context === context) {
            return cache;
          }
        }

        cache = {
          context: context
        };
        this.fontCaches.push(cache);

        return cache;
      };

      // set up canvas context with font
      // returns transformed text string
      CRp.setupTextStyle = function (context, ele) {
        // Font style
        var parentOpacity = ele.effectiveOpacity();
        var labelStyle = ele.pstyle('font-style').strValue;
        var labelSize = ele.pstyle('font-size').pfValue + 'px';
        var labelFamily = ele.pstyle('font-family').strValue;
        var labelWeight = ele.pstyle('font-weight').strValue;
        var opacity = ele.pstyle('text-opacity').value * ele.pstyle('opacity').value * parentOpacity;
        var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
        var color = ele.pstyle('color').value;
        var outlineColor = ele.pstyle('text-outline-color').value;

        var fontCacheKey = ele._private.fontKey;
        var cache = this.getFontCache(context);

        if (cache.key !== fontCacheKey) {
          context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;

          cache.key = fontCacheKey;
        }

        // Calculate text draw position based on text alignment

        // so text outlines aren't jagged
        context.lineJoin = 'round';

        this.fillStyle(context, color[0], color[1], color[2], opacity);

        this.strokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
      };

      function roundRect(ctx, x, y, width, height, radius) {
        var radius = radius || 5;
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
        ctx.fill();
      }

      // Draw text
      CRp.drawText = function (context, ele, prefix) {
        var _p = ele._private;
        var rscratch = _p.rscratch;
        var parentOpacity = ele.effectiveOpacity();
        if (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0) {
          return;
        }

        var textX = util.getPrefixedProperty(rscratch, 'labelX', prefix);
        var textY = util.getPrefixedProperty(rscratch, 'labelY', prefix);
        var text = this.getLabelText(ele, prefix);

        if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
          this.setupTextStyle(context, ele);

          var pdash = prefix ? prefix + '-' : '';
          var textW = util.getPrefixedProperty(rscratch, 'labelWidth', prefix);
          var textH = util.getPrefixedProperty(rscratch, 'labelHeight', prefix);
          var textAngle = util.getPrefixedProperty(rscratch, 'labelAngle', prefix);
          var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
          var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;

          var isEdge = ele.isEdge();
          var isNode = ele.isNode();

          var halign = ele.pstyle('text-halign').value;
          var valign = ele.pstyle('text-valign').value;

          if (isEdge) {
            halign = 'center';
            valign = 'center';
          }

          textX += marginX;
          textY += marginY;

          var rotation = ele.pstyle('text-rotation');
          var theta;

          if (rotation.strValue === 'autorotate') {
            theta = isEdge ? textAngle : 0;
          } else if (rotation.strValue === 'none') {
            theta = 0;
          } else {
            theta = rotation.pfValue;
          }

          if (theta !== 0) {
            var orgTextX = textX;
            var orgTextY = textY;

            context.translate(orgTextX, orgTextY);
            context.rotate(theta);

            textX = 0;
            textY = 0;
          }

          switch (valign) {
            case 'top':
              break;
            case 'center':
              textY += textH / 2;
              break;
            case 'bottom':
              textY += textH;
              break;
          }

          var backgroundOpacity = ele.pstyle('text-background-opacity').value;
          var borderOpacity = ele.pstyle('text-border-opacity').value;
          var textBorderWidth = ele.pstyle('text-border-width').pfValue;
          var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

          if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
            var bgX = textX - backgroundPadding;

            switch (halign) {
              case 'left':
                bgX -= textW;
                break;
              case 'center':
                bgX -= textW / 2;
                break;
              case 'right':
                break;
            }

            var bgY = textY - textH - backgroundPadding;
            var bgW = textW + 2 * backgroundPadding;
            var bgH = textH + 2 * backgroundPadding;

            if (backgroundOpacity > 0) {
              var textFill = context.fillStyle;
              var textBackgroundColor = ele.pstyle('text-background-color').value;

              context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
              var styleShape = ele.pstyle('text-background-shape').strValue;
              if (styleShape == 'roundrectangle') {
                roundRect(context, bgX, bgY, bgW, bgH, 2);
              } else {
                context.fillRect(bgX, bgY, bgW, bgH);
              }
              context.fillStyle = textFill;
            }

            if (textBorderWidth > 0 && borderOpacity > 0) {
              var textStroke = context.strokeStyle;
              var textLineWidth = context.lineWidth;
              var textBorderColor = ele.pstyle('text-border-color').value;
              var textBorderStyle = ele.pstyle('text-border-style').value;

              context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
              context.lineWidth = textBorderWidth;

              if (context.setLineDash) {
                // for very outofdate browsers
                switch (textBorderStyle) {
                  case 'dotted':
                    context.setLineDash([1, 1]);
                    break;
                  case 'dashed':
                    context.setLineDash([4, 2]);
                    break;
                  case 'double':
                    context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders
                    context.setLineDash([]);
                    break;
                  case 'solid':
                    context.setLineDash([]);
                    break;
                }
              }

              context.strokeRect(bgX, bgY, bgW, bgH);

              if (textBorderStyle === 'double') {
                var whiteWidth = textBorderWidth / 2;

                context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
              }

              if (context.setLineDash) {
                // for very outofdate browsers
                context.setLineDash([]);
              }
              context.lineWidth = textLineWidth;
              context.strokeStyle = textStroke;
            }
          }

          var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

          if (lineWidth > 0) {
            context.lineWidth = lineWidth;
          }

          if (ele.pstyle('text-wrap').value === 'wrap') {
            var lines = util.getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
            var lineHeight = textH / lines.length;

            switch (valign) {
              case 'top':
                textY -= (lines.length - 1) * lineHeight;
                break;
              case 'center':
              case 'bottom':
                textY -= (lines.length - 1) * lineHeight;
                break;
            }

            for (var l = 0; l < lines.length; l++) {
              if (lineWidth > 0) {
                context.strokeText(lines[l], textX, textY);
              }

              context.fillText(lines[l], textX, textY);

              textY += lineHeight;
            }
          } else {
            if (lineWidth > 0) {
              context.strokeText(text, textX, textY);
            }

            context.fillText(text, textX, textY);
          }

          if (theta !== 0) {
            context.rotate(-theta);
            context.translate(-orgTextX, -orgTextY);
          }
        }
      };

      module.exports = CRp;

      /***/
    },
    /* 131 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      /* global Path2D */

      var is = __webpack_require__(0);

      var CRp = {};

      CRp.drawNode = function (context, node, shiftToOriginWithBb, drawLabel) {
        var r = this;
        var nodeWidth = void 0,
            nodeHeight = void 0;
        var _p = node._private;
        var rs = _p.rscratch;
        var pos = node.position();

        if (!is.number(pos.x) || !is.number(pos.y)) {
          return; // can't draw node with undefined position
        }

        if (!node.visible()) {
          return;
        }

        var parentOpacity = node.effectiveOpacity();

        var usePaths = r.usePaths();
        var path = void 0;
        var pathCacheHit = false;

        var padding = node.padding();

        nodeWidth = node.width() + 2 * padding;
        nodeHeight = node.height() + 2 * padding;

        //
        // setup shift

        var bb = void 0;
        if (shiftToOriginWithBb) {
          bb = shiftToOriginWithBb;

          context.translate(-bb.x1, -bb.y1);
        }

        //
        // load bg image

        var bgImgProp = node.pstyle('background-image');
        var urls = bgImgProp.value;
        var urlDefined = new Array(urls.length);
        var image = new Array(urls.length);
        var numImages = 0;
        for (var i = 0; i < urls.length; i++) {
          var url = urls[i];
          var defd = urlDefined[i] = url != null && url !== 'none';

          if (defd) {
            var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);

            numImages++;

            // get image, and if not loaded then ask to redraw when later loaded
            image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
              node.emitAndNotify('background');
            });
          }
        }

        //
        // setup styles

        var darkness = node.pstyle('background-blacken').value;
        var borderWidth = node.pstyle('border-width').pfValue;
        var bgColor = node.pstyle('background-color').value;
        var bgOpacity = node.pstyle('background-opacity').value * parentOpacity;
        var borderColor = node.pstyle('border-color').value;
        var borderStyle = node.pstyle('border-style').value;
        var borderOpacity = node.pstyle('border-opacity').value * parentOpacity;

        context.lineJoin = 'miter'; // so borders are square with the node shape

        var setupShapeColor = function setupShapeColor() {
          var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;

          r.fillStyle(context, bgColor[0], bgColor[1], bgColor[2], bgOpy);
        };

        var setupBorderColor = function setupBorderColor() {
          var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;

          r.strokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
        };

        //
        // setup shape

        var styleShape = node.pstyle('shape').strValue;
        var shapePts = node.pstyle('shape-polygon-points').pfValue;

        if (usePaths) {
          var pathCacheKey = styleShape + '$' + nodeWidth + '$' + nodeHeight + (styleShape === 'polygon' ? '$' + shapePts.join('$') : '');

          context.translate(pos.x, pos.y);

          if (rs.pathCacheKey === pathCacheKey) {
            path = rs.pathCache;
            pathCacheHit = true;
          } else {
            path = new Path2D();
            rs.pathCacheKey = pathCacheKey;
            rs.pathCache = path;
          }
        }

        var drawShape = function drawShape() {
          if (!pathCacheHit) {

            var npos = pos;

            if (usePaths) {
              npos = {
                x: 0,
                y: 0
              };
            }

            r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
          }

          if (usePaths) {
            context.fill(path);
          } else {
            context.fill();
          }
        };

        var drawImages = function drawImages() {
          var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parentOpacity;

          var prevBging = _p.backgrounding;
          var totalCompleted = 0;

          for (var _i = 0; _i < image.length; _i++) {
            if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
              totalCompleted++;
              r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
            }
          }

          _p.backgrounding = !(totalCompleted === numImages);
          if (prevBging !== _p.backgrounding) {
            // update style b/c :backgrounding state changed
            node.updateStyle(false);
          }
        };

        var drawPie = function drawPie() {
          var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parentOpacity;

          if (r.hasPie(node)) {
            r.drawPie(context, node, pieOpacity);

            // redraw/restore path if steps after pie need it
            if (redrawShape) {

              if (!usePaths) {
                r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
              }
            }
          }
        };

        var darken = function darken() {
          var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : parentOpacity;

          var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
          var c = darkness > 0 ? 0 : 255;

          if (darkness !== 0) {
            r.fillStyle(context, c, c, c, opacity);

            if (usePaths) {
              context.fill(path);
            } else {
              context.fill();
            }
          }
        };

        var drawBorder = function drawBorder() {
          if (borderWidth > 0) {

            context.lineWidth = borderWidth;
            context.lineCap = 'butt';

            if (context.setLineDash) {
              // for very outofdate browsers
              switch (borderStyle) {
                case 'dotted':
                  context.setLineDash([1, 1]);
                  break;

                case 'dashed':
                  context.setLineDash([4, 2]);
                  break;

                case 'solid':
                case 'double':
                  context.setLineDash([]);
                  break;
              }
            }

            if (usePaths) {
              context.stroke(path);
            } else {
              context.stroke();
            }

            if (borderStyle === 'double') {
              context.lineWidth = borderWidth / 3;

              var gco = context.globalCompositeOperation;
              context.globalCompositeOperation = 'destination-out';

              if (usePaths) {
                context.stroke(path);
              } else {
                context.stroke();
              }

              context.globalCompositeOperation = gco;
            }

            // reset in case we changed the border style
            if (context.setLineDash) {
              // for very outofdate browsers
              context.setLineDash([]);
            }
          }
        };

        var drawOverlay = function drawOverlay() {
          var overlayPadding = node.pstyle('overlay-padding').pfValue;
          var overlayOpacity = node.pstyle('overlay-opacity').value;
          var overlayColor = node.pstyle('overlay-color').value;

          if (overlayOpacity > 0) {
            r.fillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);

            r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);

            context.fill();
          }
        };

        var drawText = function drawText() {
          r.drawElementText(context, node, drawLabel);
        };

        var ghost = node.pstyle('ghost').value === 'yes';

        if (ghost) {
          var gx = node.pstyle('ghost-offset-x').pfValue;
          var gy = node.pstyle('ghost-offset-y').pfValue;
          var ghostOpacity = node.pstyle('ghost-opacity').value;
          var effGhostOpacity = ghostOpacity * parentOpacity;

          context.translate(gx, gy);

          setupShapeColor(ghostOpacity * bgOpacity);
          drawShape();
          drawImages(effGhostOpacity);
          drawPie(darkness !== 0 || borderWidth !== 0);
          darken(effGhostOpacity);
          setupBorderColor(ghostOpacity * borderOpacity);
          drawBorder();

          context.translate(-gx, -gy);
        }

        setupShapeColor();
        drawShape();
        drawImages();
        drawPie(darkness !== 0 || borderWidth !== 0);
        darken();
        setupBorderColor();
        drawBorder();

        if (usePaths) {
          context.translate(-pos.x, -pos.y);
        }

        drawText();
        drawOverlay();

        //
        // clean up shift

        if (shiftToOriginWithBb) {
          context.translate(bb.x1, bb.y1);
        }
      };

      // does the node have at least one pie piece?
      CRp.hasPie = function (node) {
        node = node[0]; // ensure ele ref

        return node._private.hasPie;
      };

      CRp.drawPie = function (context, node, nodeOpacity, pos) {
        node = node[0]; // ensure ele ref
        pos = pos || node.position();

        var cyStyle = node.cy().style();
        var pieSize = node.pstyle('pie-size');
        var x = pos.x;
        var y = pos.y;
        var nodeW = node.width();
        var nodeH = node.height();
        var radius = Math.min(nodeW, nodeH) / 2; // must fit in node
        var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]
        var usePaths = this.usePaths();

        if (usePaths) {
          x = 0;
          y = 0;
        }

        if (pieSize.units === '%') {
          radius = radius * pieSize.pfValue;
        } else if (pieSize.pfValue !== undefined) {
          radius = pieSize.pfValue / 2;
        }

        for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
          // 1..N
          var size = node.pstyle('pie-' + i + '-background-size').value;
          var color = node.pstyle('pie-' + i + '-background-color').value;
          var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
          var percent = size / 100; // map integer range [0, 100] to [0, 1]

          // percent can't push beyond 1
          if (percent + lastPercent > 1) {
            percent = 1 - lastPercent;
          }

          var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise
          var angleDelta = 2 * Math.PI * percent;
          var angleEnd = angleStart + angleDelta;

          // ignore if
          // - zero size
          // - we're already beyond the full circle
          // - adding the current slice would go beyond the full circle
          if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
            continue;
          }

          context.beginPath();
          context.moveTo(x, y);
          context.arc(x, y, radius, angleStart, angleEnd);
          context.closePath();

          this.fillStyle(context, color[0], color[1], color[2], opacity);

          context.fill();

          lastPercent += percent;
        }
      };

      module.exports = CRp;

      /***/
    },
    /* 132 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var CRp = {};

      var util = __webpack_require__(1);

      var motionBlurDelay = 100;

      // var isFirefox = typeof InstallTrigger !== 'undefined';

      CRp.getPixelRatio = function () {
        var context = this.data.contexts[0];

        if (this.forcedPixelRatio != null) {
          return this.forcedPixelRatio;
        }

        var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;

        return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
      };

      CRp.paintCache = function (context) {
        var caches = this.paintCaches = this.paintCaches || [];
        var needToCreateCache = true;
        var cache;

        for (var i = 0; i < caches.length; i++) {
          cache = caches[i];

          if (cache.context === context) {
            needToCreateCache = false;
            break;
          }
        }

        if (needToCreateCache) {
          cache = {
            context: context
          };
          caches.push(cache);
        }

        return cache;
      };

      CRp.fillStyle = function (context, r, g, b, a) {
        context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

        // turn off for now, seems context does its own caching

        // var cache = this.paintCache(context);

        // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

        // if( cache.fillStyle !== fillStyle ){
        //   context.fillStyle = cache.fillStyle = fillStyle;
        // }
      };

      CRp.strokeStyle = function (context, r, g, b, a) {
        context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

        // turn off for now, seems context does its own caching

        // var cache = this.paintCache(context);

        // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';

        // if( cache.strokeStyle !== strokeStyle ){
        //   context.strokeStyle = cache.strokeStyle = strokeStyle;
        // }
      };

      // Resize canvas
      CRp.matchCanvasSize = function (container) {
        var r = this;
        var data = r.data;
        var bb = r.findContainerClientCoords();
        var width = bb[2];
        var height = bb[3];
        var pixelRatio = r.getPixelRatio();
        var mbPxRatio = r.motionBlurPxRatio;

        if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
          pixelRatio = mbPxRatio;
        }

        var canvasWidth = width * pixelRatio;
        var canvasHeight = height * pixelRatio;
        var canvas;

        if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
          return; // save cycles if same
        }

        r.fontCaches = null; // resizing resets the style

        var canvasContainer = data.canvasContainer;
        canvasContainer.style.width = width + 'px';
        canvasContainer.style.height = height + 'px';

        for (var i = 0; i < r.CANVAS_LAYERS; i++) {
          canvas = data.canvases[i];

          canvas.width = canvasWidth;
          canvas.height = canvasHeight;

          canvas.style.width = width + 'px';
          canvas.style.height = height + 'px';
        }

        for (var i = 0; i < r.BUFFER_COUNT; i++) {
          canvas = data.bufferCanvases[i];

          canvas.width = canvasWidth;
          canvas.height = canvasHeight;

          canvas.style.width = width + 'px';
          canvas.style.height = height + 'px';
        }

        r.textureMult = 1;
        if (pixelRatio <= 1) {
          canvas = data.bufferCanvases[r.TEXTURE_BUFFER];

          r.textureMult = 2;
          canvas.width = canvasWidth * r.textureMult;
          canvas.height = canvasHeight * r.textureMult;
        }

        r.canvasWidth = canvasWidth;
        r.canvasHeight = canvasHeight;
      };

      CRp.renderTo = function (cxt, zoom, pan, pxRatio) {
        this.render({
          forcedContext: cxt,
          forcedZoom: zoom,
          forcedPan: pan,
          drawAllLayers: true,
          forcedPxRatio: pxRatio
        });
      };

      CRp.render = function (options) {
        options = options || util.staticEmptyObject();

        var forcedContext = options.forcedContext;
        var drawAllLayers = options.drawAllLayers;
        var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
        var forcedZoom = options.forcedZoom;
        var forcedPan = options.forcedPan;
        var r = this;
        var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
        var cy = r.cy;var data = r.data;
        var needDraw = data.canvasNeedsRedraw;
        var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
        var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
        var mbPxRatio = r.motionBlurPxRatio;
        var hasCompoundNodes = cy.hasCompoundNodes();
        var inNodeDragGesture = r.hoverData.draggingEles;
        var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
        motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
        var motionBlurFadeEffect = motionBlur;

        if (!forcedContext) {
          if (r.prevPxRatio !== pixelRatio) {
            r.invalidateContainerClientCoordsCache();
            r.matchCanvasSize(r.container);

            r.redrawHint('eles', true);
            r.redrawHint('drag', true);
          }

          r.prevPxRatio = pixelRatio;
        }

        if (!forcedContext && r.motionBlurTimeout) {
          clearTimeout(r.motionBlurTimeout);
        }

        if (motionBlur) {
          if (r.mbFrames == null) {
            r.mbFrames = 0;
          }

          r.mbFrames++;

          if (r.mbFrames < 3) {
            // need several frames before even high quality motionblur
            motionBlurFadeEffect = false;
          }

          // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)
          if (r.mbFrames > r.minMbLowQualFrames) {
            //r.fullQualityMb = false;
            r.motionBlurPxRatio = r.mbPxRBlurry;
          }
        }

        if (r.clearingMotionBlur) {
          r.motionBlurPxRatio = 1;
        }

        // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
        // because a rogue async texture frame would clear needDraw
        if (r.textureDrawLastFrame && !textureDraw) {
          needDraw[r.NODE] = true;
          needDraw[r.SELECT_BOX] = true;
        }

        var coreStyle = cy.style()._private.coreStyle;

        var zoom = cy.zoom();
        var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
        var pan = cy.pan();
        var effectivePan = {
          x: pan.x,
          y: pan.y
        };

        var vp = {
          zoom: zoom,
          pan: {
            x: pan.x,
            y: pan.y
          }
        };
        var prevVp = r.prevViewport;
        var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y;

        // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)
        if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
          r.motionBlurPxRatio = 1;
        }

        if (forcedPan) {
          effectivePan = forcedPan;
        }

        // apply pixel ratio

        effectiveZoom *= pixelRatio;
        effectivePan.x *= pixelRatio;
        effectivePan.y *= pixelRatio;

        var eles = r.getCachedZSortedEles();

        function mbclear(context, x, y, w, h) {
          var gco = context.globalCompositeOperation;

          context.globalCompositeOperation = 'destination-out';
          r.fillStyle(context, 255, 255, 255, r.motionBlurTransparency);
          context.fillRect(x, y, w, h);

          context.globalCompositeOperation = gco;
        }

        function setContextTransform(context, clear) {
          var ePan, eZoom, w, h;

          if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
            ePan = {
              x: pan.x * mbPxRatio,
              y: pan.y * mbPxRatio
            };

            eZoom = zoom * mbPxRatio;

            w = r.canvasWidth * mbPxRatio;
            h = r.canvasHeight * mbPxRatio;
          } else {
            ePan = effectivePan;
            eZoom = effectiveZoom;

            w = r.canvasWidth;
            h = r.canvasHeight;
          }

          context.setTransform(1, 0, 0, 1, 0, 0);

          if (clear === 'motionBlur') {
            mbclear(context, 0, 0, w, h);
          } else if (!forcedContext && (clear === undefined || clear)) {
            context.clearRect(0, 0, w, h);
          }

          if (!drawAllLayers) {
            context.translate(ePan.x, ePan.y);
            context.scale(eZoom, eZoom);
          }
          if (forcedPan) {
            context.translate(forcedPan.x, forcedPan.y);
          }
          if (forcedZoom) {
            context.scale(forcedZoom, forcedZoom);
          }
        }

        if (!textureDraw) {
          r.textureDrawLastFrame = false;
        }

        if (textureDraw) {
          r.textureDrawLastFrame = true;

          var bb;

          if (!r.textureCache) {
            r.textureCache = {};

            bb = r.textureCache.bb = cy.mutableElements().boundingBox();

            r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];

            var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];

            cxt.setTransform(1, 0, 0, 1, 0, 0);
            cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);

            r.render({
              forcedContext: cxt,
              drawOnlyNodeLayer: true,
              forcedPxRatio: pixelRatio * r.textureMult
            });

            var vp = r.textureCache.viewport = {
              zoom: cy.zoom(),
              pan: cy.pan(),
              width: r.canvasWidth,
              height: r.canvasHeight
            };

            vp.mpan = {
              x: (0 - vp.pan.x) / vp.zoom,
              y: (0 - vp.pan.y) / vp.zoom
            };
          }

          needDraw[r.DRAG] = false;
          needDraw[r.NODE] = false;

          var context = data.contexts[r.NODE];

          var texture = r.textureCache.texture;
          var vp = r.textureCache.viewport;
          bb = r.textureCache.bb;

          context.setTransform(1, 0, 0, 1, 0, 0);

          if (motionBlur) {
            mbclear(context, 0, 0, vp.width, vp.height);
          } else {
            context.clearRect(0, 0, vp.width, vp.height);
          }

          var outsideBgColor = coreStyle['outside-texture-bg-color'].value;
          var outsideBgOpacity = coreStyle['outside-texture-bg-opacity'].value;
          r.fillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
          context.fillRect(0, 0, vp.width, vp.height);

          var zoom = cy.zoom();

          setContextTransform(context, false);

          context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
          context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
        } else if (r.textureOnViewport && !forcedContext) {
          // clear the cache since we don't need it
          r.textureCache = null;
        }

        var extent = cy.extent();
        var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles;
        var hideEdges = r.hideEdgesOnViewport && vpManip;

        var needMbClear = [];

        needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;
        if (needMbClear[r.NODE]) {
          r.clearedForMotionBlur[r.NODE] = true;
        }

        needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;
        if (needMbClear[r.DRAG]) {
          r.clearedForMotionBlur[r.DRAG] = true;
        }

        if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
          var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
          var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
          var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;

          setContextTransform(context, clear);

          if (hideEdges) {
            r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
          } else {
            r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
          }

          if (r.debug) {
            r.drawDebugPoints(context, eles.nondrag);
          }

          if (!drawAllLayers && !motionBlur) {
            needDraw[r.NODE] = false;
          }
        }

        if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
          var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
          var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);

          setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

          if (hideEdges) {
            r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
          } else {
            r.drawCachedElements(context, eles.drag, pixelRatio, extent);
          }

          if (r.debug) {
            r.drawDebugPoints(context, eles.drag);
          }

          if (!drawAllLayers && !motionBlur) {
            needDraw[r.DRAG] = false;
          }
        }

        if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
          var context = forcedContext || data.contexts[r.SELECT_BOX];

          setContextTransform(context);

          if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
            var zoom = r.cy.zoom();
            var borderWidth = coreStyle['selection-box-border-width'].value / zoom;

            context.lineWidth = borderWidth;
            context.fillStyle = 'rgba(' + coreStyle['selection-box-color'].value[0] + ',' + coreStyle['selection-box-color'].value[1] + ',' + coreStyle['selection-box-color'].value[2] + ',' + coreStyle['selection-box-opacity'].value + ')';

            context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

            if (borderWidth > 0) {
              context.strokeStyle = 'rgba(' + coreStyle['selection-box-border-color'].value[0] + ',' + coreStyle['selection-box-border-color'].value[1] + ',' + coreStyle['selection-box-border-color'].value[2] + ',' + coreStyle['selection-box-opacity'].value + ')';

              context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
            }
          }

          if (data.bgActivePosistion && !r.hoverData.selecting) {
            var zoom = r.cy.zoom();
            var pos = data.bgActivePosistion;

            context.fillStyle = 'rgba(' + coreStyle['active-bg-color'].value[0] + ',' + coreStyle['active-bg-color'].value[1] + ',' + coreStyle['active-bg-color'].value[2] + ',' + coreStyle['active-bg-opacity'].value + ')';

            context.beginPath();
            context.arc(pos.x, pos.y, coreStyle['active-bg-size'].pfValue / zoom, 0, 2 * Math.PI);
            context.fill();
          }

          var timeToRender = r.lastRedrawTime;
          if (r.showFps && timeToRender) {
            timeToRender = Math.round(timeToRender);
            var fps = Math.round(1000 / timeToRender);

            context.setTransform(1, 0, 0, 1, 0, 0);

            context.fillStyle = 'rgba(255, 0, 0, 0.75)';
            context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
            context.lineWidth = 1;
            context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);

            var maxFps = 60;
            context.strokeRect(0, 30, 250, 20);
            context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
          }

          if (!drawAllLayers) {
            needDraw[r.SELECT_BOX] = false;
          }
        }

        // motionblur: blit rendered blurry frames
        if (motionBlur && mbPxRatio !== 1) {
          var cxtNode = data.contexts[r.NODE];
          var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];

          var cxtDrag = data.contexts[r.DRAG];
          var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

          var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
            cxt.setTransform(1, 0, 0, 1, 0, 0);

            if (needClear || !motionBlurFadeEffect) {
              cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
            } else {
              mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
            }

            var pxr = mbPxRatio;

            cxt.drawImage(txt, // img
            0, 0, // sx, sy
            r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
            0, 0, // x, y
            r.canvasWidth, r.canvasHeight // w, h
            );
          };

          if (needDraw[r.NODE] || needMbClear[r.NODE]) {
            drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
            needDraw[r.NODE] = false;
          }

          if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
            drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
            needDraw[r.DRAG] = false;
          }
        }

        r.prevViewport = vp;

        if (r.clearingMotionBlur) {
          r.clearingMotionBlur = false;
          r.motionBlurCleared = true;
          r.motionBlur = true;
        }

        if (motionBlur) {
          r.motionBlurTimeout = setTimeout(function () {
            r.motionBlurTimeout = null;

            r.clearedForMotionBlur[r.NODE] = false;
            r.clearedForMotionBlur[r.DRAG] = false;
            r.motionBlur = false;
            r.clearingMotionBlur = !textureDraw;
            r.mbFrames = 0;

            needDraw[r.NODE] = true;
            needDraw[r.DRAG] = true;

            r.redraw();
          }, motionBlurDelay);
        }

        if (!forcedContext) {
          cy.emit('render');
        }
      };

      module.exports = CRp;

      /***/
    },
    /* 133 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var math = __webpack_require__(2);

      var CRp = {};

      // @O Polygon drawing
      CRp.drawPolygonPath = function (context, x, y, width, height, points) {

        var halfW = width / 2;
        var halfH = height / 2;

        if (context.beginPath) {
          context.beginPath();
        }

        context.moveTo(x + halfW * points[0], y + halfH * points[1]);

        for (var i = 1; i < points.length / 2; i++) {
          context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
        }

        context.closePath();
      };

      // Round rectangle drawing
      CRp.drawRoundRectanglePath = function (context, x, y, width, height) {

        var halfWidth = width / 2;
        var halfHeight = height / 2;
        var cornerRadius = math.getRoundRectangleRadius(width, height);

        if (context.beginPath) {
          context.beginPath();
        }

        // Start at top middle
        context.moveTo(x, y - halfHeight);
        // Arc from middle top to right side
        context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius);
        // Arc from right side to bottom
        context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
        // Arc from bottom to left side
        context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
        // Arc from left side to topBorder
        context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius);
        // Join line
        context.lineTo(x, y - halfHeight);

        context.closePath();
      };

      CRp.drawBottomRoundRectanglePath = function (context, x, y, width, height) {

        var halfWidth = width / 2;
        var halfHeight = height / 2;
        var cornerRadius = math.getRoundRectangleRadius(width, height);

        if (context.beginPath) {
          context.beginPath();
        }

        // Start at top middle
        context.moveTo(x, y - halfHeight);
        context.lineTo(x + halfWidth, y - halfHeight);
        context.lineTo(x + halfWidth, y);

        context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
        context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);

        context.lineTo(x - halfWidth, y - halfHeight);
        context.lineTo(x, y - halfHeight);

        context.closePath();
      };

      CRp.drawCutRectanglePath = function (context, x, y, width, height) {

        var halfWidth = width / 2;
        var halfHeight = height / 2;
        var cornerLength = math.getCutRectangleCornerLength();

        if (context.beginPath) {
          context.beginPath();
        }

        context.moveTo(x - halfWidth + cornerLength, y - halfHeight);

        context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
        context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
        context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
        context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
        context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
        context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
        context.lineTo(x - halfWidth, y - halfHeight + cornerLength);

        context.closePath();
      };

      CRp.drawBarrelPath = function (context, x, y, width, height) {

        var halfWidth = width / 2;
        var halfHeight = height / 2;

        var xBegin = x - halfWidth;
        var xEnd = x + halfWidth;
        var yBegin = y - halfHeight;
        var yEnd = y + halfHeight;

        var barrelCurveConstants = math.getBarrelCurveConstants(width, height);
        var wOffset = barrelCurveConstants.widthOffset;
        var hOffset = barrelCurveConstants.heightOffset;
        var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

        if (context.beginPath) {
          context.beginPath();
        }

        context.moveTo(xBegin, yBegin + hOffset);

        context.lineTo(xBegin, yEnd - hOffset);
        context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);

        context.lineTo(xEnd - wOffset, yEnd);
        context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);

        context.lineTo(xEnd, yBegin + hOffset);
        context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);

        context.lineTo(xBegin + wOffset, yBegin);
        context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);

        context.closePath();
      };

      var sin0 = Math.sin(0);
      var cos0 = Math.cos(0);

      var sin = {};
      var cos = {};

      var ellipseStepSize = Math.PI / 40;

      for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
        sin[i] = Math.sin(i);
        cos[i] = Math.cos(i);
      }

      CRp.drawEllipsePath = function (context, centerX, centerY, width, height) {
        if (context.beginPath) {
          context.beginPath();
        }

        if (context.ellipse) {
          context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
        } else {
          var xPos, yPos;
          var rw = width / 2;
          var rh = height / 2;
          for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
            xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
            yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

            if (i === 0) {
              context.moveTo(xPos, yPos);
            } else {
              context.lineTo(xPos, yPos);
            }
          }
        }

        context.closePath();
      };

      module.exports = CRp;

      /***/
    },
    /* 134 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);

      var CRp = {};

      CRp.createBuffer = function (w, h) {
        var buffer = document.createElement('canvas'); // eslint-disable-line no-undef
        buffer.width = w;
        buffer.height = h;

        return [buffer, buffer.getContext('2d')];
      };

      CRp.bufferCanvasImage = function (options) {
        var cy = this.cy;
        var eles = cy.mutableElements();
        var bb = eles.boundingBox();
        var ctrRect = this.findContainerClientCoords();
        var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
        var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
        var specdMaxDims = is.number(options.maxWidth) || is.number(options.maxHeight);
        var pxRatio = this.getPixelRatio();
        var scale = 1;

        if (options.scale !== undefined) {
          width *= options.scale;
          height *= options.scale;

          scale = options.scale;
        } else if (specdMaxDims) {
          var maxScaleW = Infinity;
          var maxScaleH = Infinity;

          if (is.number(options.maxWidth)) {
            maxScaleW = scale * options.maxWidth / width;
          }

          if (is.number(options.maxHeight)) {
            maxScaleH = scale * options.maxHeight / height;
          }

          scale = Math.min(maxScaleW, maxScaleH);

          width *= scale;
          height *= scale;
        }

        if (!specdMaxDims) {
          width *= pxRatio;
          height *= pxRatio;
          scale *= pxRatio;
        }

        var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

        buffCanvas.width = width;
        buffCanvas.height = height;

        buffCanvas.style.width = width + 'px';
        buffCanvas.style.height = height + 'px';

        var buffCxt = buffCanvas.getContext('2d');

        // Rasterize the layers, but only if container has nonzero size
        if (width > 0 && height > 0) {

          buffCxt.clearRect(0, 0, width, height);

          buffCxt.globalCompositeOperation = 'source-over';

          var zsortedEles = this.getCachedZSortedEles();

          if (options.full) {
            // draw the full bounds of the graph
            buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
            buffCxt.scale(scale, scale);

            this.drawElements(buffCxt, zsortedEles);

            buffCxt.scale(1 / scale, 1 / scale);
            buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
          } else {
            // draw the current view
            var pan = cy.pan();

            var translation = {
              x: pan.x * scale,
              y: pan.y * scale
            };

            scale *= cy.zoom();

            buffCxt.translate(translation.x, translation.y);
            buffCxt.scale(scale, scale);

            this.drawElements(buffCxt, zsortedEles);

            buffCxt.scale(1 / scale, 1 / scale);
            buffCxt.translate(-translation.x, -translation.y);
          }

          // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs
          if (options.bg) {
            buffCxt.globalCompositeOperation = 'destination-over';

            buffCxt.fillStyle = options.bg;
            buffCxt.rect(0, 0, width, height);
            buffCxt.fill();
          }
        }

        return buffCanvas;
      };

      function b64ToBlob(b64, mimeType) {
        var bytes = atob(b64);
        var buff = new ArrayBuffer(bytes.length);
        var buffUint8 = new Uint8Array(buff);

        for (var i = 0; i < bytes.length; i++) {
          buffUint8[i] = bytes.charCodeAt(i);
        }

        return new Blob([buff], { type: mimeType });
      }

      function b64UriToB64(b64uri) {
        var i = b64uri.indexOf(',');

        return b64uri.substr(i + 1);
      };

      function output(options, canvas, mimeType) {
        var b64Uri = canvas.toDataURL(mimeType, options.quality);

        switch (options.output) {
          case 'blob':
            return b64ToBlob(b64UriToB64(b64Uri), mimeType);

          case 'base64':
            return b64UriToB64(b64Uri);

          case 'base64uri':
          default:
            return b64Uri;
        }
      }

      CRp.png = function (options) {
        return output(options, this.bufferCanvasImage(options), 'image/png');
      };

      CRp.jpg = function (options) {
        return output(options, this.bufferCanvasImage(options), 'image/jpeg');
      };

      module.exports = CRp;

      /***/
    },
    /* 135 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var CRp = {};

      CRp.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
        switch (name) {
          case 'ellipse':
            return this.drawEllipsePath(context, centerX, centerY, width, height);
          case 'polygon':
            return this.drawPolygonPath(context, centerX, centerY, width, height, points);
          case 'roundrectangle':
            return this.drawRoundRectanglePath(context, centerX, centerY, width, height);
          case 'cutrectangle':
            return this.drawCutRectanglePath(context, centerX, centerY, width, height);
          case 'bottomroundrectangle':
            return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);
          case 'barrel':
            return this.drawBarrelPath(context, centerX, centerY, width, height);
        }
      };

      module.exports = CRp;

      /***/
    },
    /* 136 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      var is = __webpack_require__(0);
      var util = __webpack_require__(1);
      var Style = __webpack_require__(18);

      // a dummy stylesheet object that doesn't need a reference to the core
      // (useful for init)
      var Stylesheet = function Stylesheet() {
        if (!(this instanceof Stylesheet)) {
          return new Stylesheet();
        }

        this.length = 0;
      };

      var sheetfn = Stylesheet.prototype;

      sheetfn.instanceString = function () {
        return 'stylesheet';
      };

      // just store the selector to be parsed later
      sheetfn.selector = function (selector) {
        var i = this.length++;

        this[i] = {
          selector: selector,
          properties: []
        };

        return this; // chaining
      };

      // just store the property to be parsed later
      sheetfn.css = function (name, value) {
        var i = this.length - 1;

        if (is.string(name)) {
          this[i].properties.push({
            name: name,
            value: value
          });
        } else if (is.plainObject(name)) {
          var map = name;

          for (var j = 0; j < Style.properties.length; j++) {
            var prop = Style.properties[j];
            var mapVal = map[prop.name];

            if (mapVal === undefined) {
              // also try camel case name
              mapVal = map[util.dash2camel(prop.name)];
            }

            if (mapVal !== undefined) {
              var _name = prop.name;
              var _value = mapVal;

              this[i].properties.push({
                name: _name,
                value: _value
              });
            }
          }
        }

        return this; // chaining
      };

      sheetfn.style = sheetfn.css;

      // generate a real style object from the dummy stylesheet
      sheetfn.generateStyle = function (cy) {
        var style = new Style(cy);

        return this.appendToStyle(style);
      };

      // append a dummy stylesheet object on a real style object
      sheetfn.appendToStyle = function (style) {
        for (var i = 0; i < this.length; i++) {
          var context = this[i];
          var selector = context.selector;
          var props = context.properties;

          style.selector(selector); // apply selector

          for (var j = 0; j < props.length; j++) {
            var prop = props[j];

            style.css(prop.name, prop.value); // apply property
          }
        }

        return style;
      };

      module.exports = Stylesheet;

      /***/
    },
    /* 137 */
    /***/function (module, exports, __webpack_require__) {

      "use strict";

      module.exports = "3.2.11";

      /***/
    }]
    /******/)
  );
});
},{"lodash.debounce":332,"heap":331}],357:[function(require,module,exports) {
var global = (1,eval)("this");
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

},{}],352:[function(require,module,exports) {
/* global window */

var lodash;

if (typeof require === "function") {
  try {
    lodash = require("lodash");
  } catch (e) {}
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;

},{"lodash":357}],353:[function(require,module,exports) {
"use strict";

var _ = require("./lodash");

module.exports = Graph;

var DEFAULT_EDGE_NAME = "\x00",
    GRAPH_NODE = "\x00",
    EDGE_KEY_DELIM = "\x01";

// Implementation notes:
//
//  * Node id query functions should return string ids for the nodes
//  * Edge id query functions should return an "edgeObj", edge object, that is
//    composed of enough information to uniquely identify an edge: {v, w, name}.
//  * Internally we use an "edgeId", a stringified form of the edgeObj, to
//    reference edges. This is because we need a performant way to look these
//    edges up and, object properties, which have string keys, are the closest
//    we're going to get to a performant hashtable in JavaScript.

function Graph(opts) {
  this._isDirected = _.has(opts, "directed") ? opts.directed : true;
  this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
  this._isCompound = _.has(opts, "compound") ? opts.compound : false;

  // Label for the graph itself
  this._label = undefined;

  // Defaults to be set when creating a new node
  this._defaultNodeLabelFn = _.constant(undefined);

  // Defaults to be set when creating a new edge
  this._defaultEdgeLabelFn = _.constant(undefined);

  // v -> label
  this._nodes = {};

  if (this._isCompound) {
    // v -> parent
    this._parent = {};

    // v -> children
    this._children = {};
    this._children[GRAPH_NODE] = {};
  }

  // v -> edgeObj
  this._in = {};

  // u -> v -> Number
  this._preds = {};

  // v -> edgeObj
  this._out = {};

  // v -> w -> Number
  this._sucs = {};

  // e -> edgeObj
  this._edgeObjs = {};

  // e -> label
  this._edgeLabels = {};
}

/* Number of nodes in the graph. Should only be changed by the implementation. */
Graph.prototype._nodeCount = 0;

/* Number of edges in the graph. Should only be changed by the implementation. */
Graph.prototype._edgeCount = 0;


/* === Graph functions ========= */

Graph.prototype.isDirected = function() {
  return this._isDirected;
};

Graph.prototype.isMultigraph = function() {
  return this._isMultigraph;
};

Graph.prototype.isCompound = function() {
  return this._isCompound;
};

Graph.prototype.setGraph = function(label) {
  this._label = label;
  return this;
};

Graph.prototype.graph = function() {
  return this._label;
};


/* === Node functions ========== */

Graph.prototype.setDefaultNodeLabel = function(newDefault) {
  if (!_.isFunction(newDefault)) {
    newDefault = _.constant(newDefault);
  }
  this._defaultNodeLabelFn = newDefault;
  return this;
};

Graph.prototype.nodeCount = function() {
  return this._nodeCount;
};

Graph.prototype.nodes = function() {
  return _.keys(this._nodes);
};

Graph.prototype.sources = function() {
  return _.filter(this.nodes(), function(v) {
    return _.isEmpty(this._in[v]);
  }, this);
};

Graph.prototype.sinks = function() {
  return _.filter(this.nodes(), function(v) {
    return _.isEmpty(this._out[v]);
  }, this);
};

Graph.prototype.setNodes = function(vs, value) {
  var args = arguments;
  _.each(vs, function(v) {
    if (args.length > 1) {
      this.setNode(v, value);
    } else {
      this.setNode(v);
    }
  }, this);
  return this;
};

Graph.prototype.setNode = function(v, value) {
  if (_.has(this._nodes, v)) {
    if (arguments.length > 1) {
      this._nodes[v] = value;
    }
    return this;
  }

  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
  if (this._isCompound) {
    this._parent[v] = GRAPH_NODE;
    this._children[v] = {};
    this._children[GRAPH_NODE][v] = true;
  }
  this._in[v] = {};
  this._preds[v] = {};
  this._out[v] = {};
  this._sucs[v] = {};
  ++this._nodeCount;
  return this;
};

Graph.prototype.node = function(v) {
  return this._nodes[v];
};

Graph.prototype.hasNode = function(v) {
  return _.has(this._nodes, v);
};

Graph.prototype.removeNode =  function(v) {
  var self = this;
  if (_.has(this._nodes, v)) {
    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
    delete this._nodes[v];
    if (this._isCompound) {
      this._removeFromParentsChildList(v);
      delete this._parent[v];
      _.each(this.children(v), function(child) {
        this.setParent(child);
      }, this);
      delete this._children[v];
    }
    _.each(_.keys(this._in[v]), removeEdge);
    delete this._in[v];
    delete this._preds[v];
    _.each(_.keys(this._out[v]), removeEdge);
    delete this._out[v];
    delete this._sucs[v];
    --this._nodeCount;
  }
  return this;
};

Graph.prototype.setParent = function(v, parent) {
  if (!this._isCompound) {
    throw new Error("Cannot set parent in a non-compound graph");
  }

  if (_.isUndefined(parent)) {
    parent = GRAPH_NODE;
  } else {
    // Coerce parent to string
    parent += "";
    for (var ancestor = parent;
         !_.isUndefined(ancestor);
         ancestor = this.parent(ancestor)) {
      if (ancestor === v) {
        throw new Error("Setting " + parent+ " as parent of " + v +
                        " would create create a cycle");
      }
    }

    this.setNode(parent);
  }

  this.setNode(v);
  this._removeFromParentsChildList(v);
  this._parent[v] = parent;
  this._children[parent][v] = true;
  return this;
};

Graph.prototype._removeFromParentsChildList = function(v) {
  delete this._children[this._parent[v]][v];
};

Graph.prototype.parent = function(v) {
  if (this._isCompound) {
    var parent = this._parent[v];
    if (parent !== GRAPH_NODE) {
      return parent;
    }
  }
};

Graph.prototype.children = function(v) {
  if (_.isUndefined(v)) {
    v = GRAPH_NODE;
  }

  if (this._isCompound) {
    var children = this._children[v];
    if (children) {
      return _.keys(children);
    }
  } else if (v === GRAPH_NODE) {
    return this.nodes();
  } else if (this.hasNode(v)) {
    return [];
  }
};

Graph.prototype.predecessors = function(v) {
  var predsV = this._preds[v];
  if (predsV) {
    return _.keys(predsV);
  }
};

Graph.prototype.successors = function(v) {
  var sucsV = this._sucs[v];
  if (sucsV) {
    return _.keys(sucsV);
  }
};

Graph.prototype.neighbors = function(v) {
  var preds = this.predecessors(v);
  if (preds) {
    return _.union(preds, this.successors(v));
  }
};

Graph.prototype.filterNodes = function(filter) {
  var copy = new this.constructor({
    directed: this._isDirected,
    multigraph: this._isMultigraph,
    compound: this._isCompound
  });

  copy.setGraph(this.graph());

  _.each(this._nodes, function(value, v) {
    if (filter(v)) {
      copy.setNode(v, value);
    }
  }, this);

  _.each(this._edgeObjs, function(e) {
    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
      copy.setEdge(e, this.edge(e));
    }
  }, this);

  var self = this;
  var parents = {};
  function findParent(v) {
    var parent = self.parent(v);
    if (parent === undefined || copy.hasNode(parent)) {
      parents[v] = parent;
      return parent;
    } else if (parent in parents) {
      return parents[parent];
    } else {
      return findParent(parent);
    }
  }

  if (this._isCompound) {
    _.each(copy.nodes(), function(v) {
      copy.setParent(v, findParent(v));
    });
  }

  return copy;
};

/* === Edge functions ========== */

Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
  if (!_.isFunction(newDefault)) {
    newDefault = _.constant(newDefault);
  }
  this._defaultEdgeLabelFn = newDefault;
  return this;
};

Graph.prototype.edgeCount = function() {
  return this._edgeCount;
};

Graph.prototype.edges = function() {
  return _.values(this._edgeObjs);
};

Graph.prototype.setPath = function(vs, value) {
  var self = this,
      args = arguments;
  _.reduce(vs, function(v, w) {
    if (args.length > 1) {
      self.setEdge(v, w, value);
    } else {
      self.setEdge(v, w);
    }
    return w;
  });
  return this;
};

/*
 * setEdge(v, w, [value, [name]])
 * setEdge({ v, w, [name] }, [value])
 */
Graph.prototype.setEdge = function() {
  var v, w, name, value,
      valueSpecified = false,
      arg0 = arguments[0];

  if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
    v = arg0.v;
    w = arg0.w;
    name = arg0.name;
    if (arguments.length === 2) {
      value = arguments[1];
      valueSpecified = true;
    }
  } else {
    v = arg0;
    w = arguments[1];
    name = arguments[3];
    if (arguments.length > 2) {
      value = arguments[2];
      valueSpecified = true;
    }
  }

  v = "" + v;
  w = "" + w;
  if (!_.isUndefined(name)) {
    name = "" + name;
  }

  var e = edgeArgsToId(this._isDirected, v, w, name);
  if (_.has(this._edgeLabels, e)) {
    if (valueSpecified) {
      this._edgeLabels[e] = value;
    }
    return this;
  }

  if (!_.isUndefined(name) && !this._isMultigraph) {
    throw new Error("Cannot set a named edge when isMultigraph = false");
  }

  // It didn't exist, so we need to create it.
  // First ensure the nodes exist.
  this.setNode(v);
  this.setNode(w);

  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
  // Ensure we add undirected edges in a consistent way.
  v = edgeObj.v;
  w = edgeObj.w;

  Object.freeze(edgeObj);
  this._edgeObjs[e] = edgeObj;
  incrementOrInitEntry(this._preds[w], v);
  incrementOrInitEntry(this._sucs[v], w);
  this._in[w][e] = edgeObj;
  this._out[v][e] = edgeObj;
  this._edgeCount++;
  return this;
};

Graph.prototype.edge = function(v, w, name) {
  var e = (arguments.length === 1
            ? edgeObjToId(this._isDirected, arguments[0])
            : edgeArgsToId(this._isDirected, v, w, name));
  return this._edgeLabels[e];
};

Graph.prototype.hasEdge = function(v, w, name) {
  var e = (arguments.length === 1
            ? edgeObjToId(this._isDirected, arguments[0])
            : edgeArgsToId(this._isDirected, v, w, name));
  return _.has(this._edgeLabels, e);
};

Graph.prototype.removeEdge = function(v, w, name) {
  var e = (arguments.length === 1
            ? edgeObjToId(this._isDirected, arguments[0])
            : edgeArgsToId(this._isDirected, v, w, name)),
      edge = this._edgeObjs[e];
  if (edge) {
    v = edge.v;
    w = edge.w;
    delete this._edgeLabels[e];
    delete this._edgeObjs[e];
    decrementOrRemoveEntry(this._preds[w], v);
    decrementOrRemoveEntry(this._sucs[v], w);
    delete this._in[w][e];
    delete this._out[v][e];
    this._edgeCount--;
  }
  return this;
};

Graph.prototype.inEdges = function(v, u) {
  var inV = this._in[v];
  if (inV) {
    var edges = _.values(inV);
    if (!u) {
      return edges;
    }
    return _.filter(edges, function(edge) { return edge.v === u; });
  }
};

Graph.prototype.outEdges = function(v, w) {
  var outV = this._out[v];
  if (outV) {
    var edges = _.values(outV);
    if (!w) {
      return edges;
    }
    return _.filter(edges, function(edge) { return edge.w === w; });
  }
};

Graph.prototype.nodeEdges = function(v, w) {
  var inEdges = this.inEdges(v, w);
  if (inEdges) {
    return inEdges.concat(this.outEdges(v, w));
  }
};

function incrementOrInitEntry(map, k) {
  if (map[k]) {
    map[k]++;
  } else {
    map[k] = 1;
  }
}

function decrementOrRemoveEntry(map, k) {
  if (!--map[k]) { delete map[k]; }
}

function edgeArgsToId(isDirected, v_, w_, name) {
  var v = "" + v_;
  var w = "" + w_;
  if (!isDirected && v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
}

function edgeArgsToObj(isDirected, v_, w_, name) {
  var v = "" + v_;
  var w = "" + w_;
  if (!isDirected && v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  var edgeObj =  { v: v, w: w };
  if (name) {
    edgeObj.name = name;
  }
  return edgeObj;
}

function edgeObjToId(isDirected, edgeObj) {
  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
}

},{"./lodash":352}],369:[function(require,module,exports) {
module.exports = '1.0.7';

},{}],367:[function(require,module,exports) {
// Includes only the "core" of graphlib
module.exports = {
  Graph: require("./graph"),
  version: require("./version")
};

},{"./graph":353,"./version":369}],350:[function(require,module,exports) {
var _ = require("./lodash"),
    Graph = require("./graph");

module.exports = {
  write: write,
  read: read
};

function write(g) {
  var json = {
    options: {
      directed: g.isDirected(),
      multigraph: g.isMultigraph(),
      compound: g.isCompound()
    },
    nodes: writeNodes(g),
    edges: writeEdges(g)
  };
  if (!_.isUndefined(g.graph())) {
    json.value = _.clone(g.graph());
  }
  return json;
}

function writeNodes(g) {
  return _.map(g.nodes(), function(v) {
    var nodeValue = g.node(v),
        parent = g.parent(v),
        node = { v: v };
    if (!_.isUndefined(nodeValue)) {
      node.value = nodeValue;
    }
    if (!_.isUndefined(parent)) {
      node.parent = parent;
    }
    return node;
  });
}

function writeEdges(g) {
  return _.map(g.edges(), function(e) {
    var edgeValue = g.edge(e),
        edge = { v: e.v, w: e.w };
    if (!_.isUndefined(e.name)) {
      edge.name = e.name;
    }
    if (!_.isUndefined(edgeValue)) {
      edge.value = edgeValue;
    }
    return edge;
  });
}

function read(json) {
  var g = new Graph(json.options).setGraph(json.value);
  _.each(json.nodes, function(entry) {
    g.setNode(entry.v, entry.value);
    if (entry.parent) {
      g.setParent(entry.v, entry.parent);
    }
  });
  _.each(json.edges, function(entry) {
    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
  });
  return g;
}

},{"./lodash":352,"./graph":353}],373:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = components;

function components(g) {
  var visited = {},
      cmpts = [],
      cmpt;

  function dfs(v) {
    if (_.has(visited, v)) return;
    visited[v] = true;
    cmpt.push(v);
    _.each(g.successors(v), dfs);
    _.each(g.predecessors(v), dfs);
  }

  _.each(g.nodes(), function(v) {
    cmpt = [];
    dfs(v);
    if (cmpt.length) {
      cmpts.push(cmpt);
    }
  });

  return cmpts;
}

},{"../lodash":352}],384:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = PriorityQueue;

/**
 * A min-priority queue data structure. This algorithm is derived from Cormen,
 * et al., "Introduction to Algorithms". The basic idea of a min-priority
 * queue is that you can efficiently (in O(1) time) get the smallest key in
 * the queue. Adding and removing elements takes O(log n) time. A key can
 * have its priority decreased in O(log n) time.
 */
function PriorityQueue() {
  this._arr = [];
  this._keyIndices = {};
}

/**
 * Returns the number of elements in the queue. Takes `O(1)` time.
 */
PriorityQueue.prototype.size = function() {
  return this._arr.length;
};

/**
 * Returns the keys that are in the queue. Takes `O(n)` time.
 */
PriorityQueue.prototype.keys = function() {
  return this._arr.map(function(x) { return x.key; });
};

/**
 * Returns `true` if **key** is in the queue and `false` if not.
 */
PriorityQueue.prototype.has = function(key) {
  return _.has(this._keyIndices, key);
};

/**
 * Returns the priority for **key**. If **key** is not present in the queue
 * then this function returns `undefined`. Takes `O(1)` time.
 *
 * @param {Object} key
 */
PriorityQueue.prototype.priority = function(key) {
  var index = this._keyIndices[key];
  if (index !== undefined) {
    return this._arr[index].priority;
  }
};

/**
 * Returns the key for the minimum element in this queue. If the queue is
 * empty this function throws an Error. Takes `O(1)` time.
 */
PriorityQueue.prototype.min = function() {
  if (this.size() === 0) {
    throw new Error("Queue underflow");
  }
  return this._arr[0].key;
};

/**
 * Inserts a new key into the priority queue. If the key already exists in
 * the queue this function returns `false`; otherwise it will return `true`.
 * Takes `O(n)` time.
 *
 * @param {Object} key the key to add
 * @param {Number} priority the initial priority for the key
 */
PriorityQueue.prototype.add = function(key, priority) {
  var keyIndices = this._keyIndices;
  key = String(key);
  if (!_.has(keyIndices, key)) {
    var arr = this._arr;
    var index = arr.length;
    keyIndices[key] = index;
    arr.push({key: key, priority: priority});
    this._decrease(index);
    return true;
  }
  return false;
};

/**
 * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
 */
PriorityQueue.prototype.removeMin = function() {
  this._swap(0, this._arr.length - 1);
  var min = this._arr.pop();
  delete this._keyIndices[min.key];
  this._heapify(0);
  return min.key;
};

/**
 * Decreases the priority for **key** to **priority**. If the new priority is
 * greater than the previous priority, this function will throw an Error.
 *
 * @param {Object} key the key for which to raise priority
 * @param {Number} priority the new priority for the key
 */
PriorityQueue.prototype.decrease = function(key, priority) {
  var index = this._keyIndices[key];
  if (priority > this._arr[index].priority) {
    throw new Error("New priority is greater than current priority. " +
        "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
  }
  this._arr[index].priority = priority;
  this._decrease(index);
};

PriorityQueue.prototype._heapify = function(i) {
  var arr = this._arr;
  var l = 2 * i,
      r = l + 1,
      largest = i;
  if (l < arr.length) {
    largest = arr[l].priority < arr[largest].priority ? l : largest;
    if (r < arr.length) {
      largest = arr[r].priority < arr[largest].priority ? r : largest;
    }
    if (largest !== i) {
      this._swap(i, largest);
      this._heapify(largest);
    }
  }
};

PriorityQueue.prototype._decrease = function(index) {
  var arr = this._arr;
  var priority = arr[index].priority;
  var parent;
  while (index !== 0) {
    parent = index >> 1;
    if (arr[parent].priority < priority) {
      break;
    }
    this._swap(index, parent);
    index = parent;
  }
};

PriorityQueue.prototype._swap = function(i, j) {
  var arr = this._arr;
  var keyIndices = this._keyIndices;
  var origArrI = arr[i];
  var origArrJ = arr[j];
  arr[i] = origArrJ;
  arr[j] = origArrI;
  keyIndices[origArrJ.key] = i;
  keyIndices[origArrI.key] = j;
};

},{"../lodash":352}],374:[function(require,module,exports) {
var _ = require("../lodash"),
    PriorityQueue = require("../data/priority-queue");

module.exports = dijkstra;

var DEFAULT_WEIGHT_FUNC = _.constant(1);

function dijkstra(g, source, weightFn, edgeFn) {
  return runDijkstra(g, String(source),
                     weightFn || DEFAULT_WEIGHT_FUNC,
                     edgeFn || function(v) { return g.outEdges(v); });
}

function runDijkstra(g, source, weightFn, edgeFn) {
  var results = {},
      pq = new PriorityQueue(),
      v, vEntry;

  var updateNeighbors = function(edge) {
    var w = edge.v !== v ? edge.v : edge.w,
        wEntry = results[w],
        weight = weightFn(edge),
        distance = vEntry.distance + weight;

    if (weight < 0) {
      throw new Error("dijkstra does not allow negative edge weights. " +
                      "Bad edge: " + edge + " Weight: " + weight);
    }

    if (distance < wEntry.distance) {
      wEntry.distance = distance;
      wEntry.predecessor = v;
      pq.decrease(w, distance);
    }
  };

  g.nodes().forEach(function(v) {
    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
    results[v] = { distance: distance };
    pq.add(v, distance);
  });

  while (pq.size() > 0) {
    v = pq.removeMin();
    vEntry = results[v];
    if (vEntry.distance === Number.POSITIVE_INFINITY) {
      break;
    }

    edgeFn(v).forEach(updateNeighbors);
  }

  return results;
}

},{"../lodash":352,"../data/priority-queue":384}],375:[function(require,module,exports) {
var dijkstra = require("./dijkstra"),
    _ = require("../lodash");

module.exports = dijkstraAll;

function dijkstraAll(g, weightFunc, edgeFunc) {
  return _.transform(g.nodes(), function(acc, v) {
    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
  }, {});
}

},{"./dijkstra":374,"../lodash":352}],382:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = tarjan;

function tarjan(g) {
  var index = 0,
      stack = [],
      visited = {}, // node id -> { onStack, lowlink, index }
      results = [];

  function dfs(v) {
    var entry = visited[v] = {
      onStack: true,
      lowlink: index,
      index: index++
    };
    stack.push(v);

    g.successors(v).forEach(function(w) {
      if (!_.has(visited, w)) {
        dfs(w);
        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
      } else if (visited[w].onStack) {
        entry.lowlink = Math.min(entry.lowlink, visited[w].index);
      }
    });

    if (entry.lowlink === entry.index) {
      var cmpt = [],
          w;
      do {
        w = stack.pop();
        visited[w].onStack = false;
        cmpt.push(w);
      } while (v !== w);
      results.push(cmpt);
    }
  }

  g.nodes().forEach(function(v) {
    if (!_.has(visited, v)) {
      dfs(v);
    }
  });

  return results;
}

},{"../lodash":352}],376:[function(require,module,exports) {
var _ = require("../lodash"),
    tarjan = require("./tarjan");

module.exports = findCycles;

function findCycles(g) {
  return _.filter(tarjan(g), function(cmpt) {
    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
  });
}

},{"../lodash":352,"./tarjan":382}],377:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = floydWarshall;

var DEFAULT_WEIGHT_FUNC = _.constant(1);

function floydWarshall(g, weightFn, edgeFn) {
  return runFloydWarshall(g,
                          weightFn || DEFAULT_WEIGHT_FUNC,
                          edgeFn || function(v) { return g.outEdges(v); });
}

function runFloydWarshall(g, weightFn, edgeFn) {
  var results = {},
      nodes = g.nodes();

  nodes.forEach(function(v) {
    results[v] = {};
    results[v][v] = { distance: 0 };
    nodes.forEach(function(w) {
      if (v !== w) {
        results[v][w] = { distance: Number.POSITIVE_INFINITY };
      }
    });
    edgeFn(v).forEach(function(edge) {
      var w = edge.v === v ? edge.w : edge.v,
          d = weightFn(edge);
      results[v][w] = { distance: d, predecessor: v };
    });
  });

  nodes.forEach(function(k) {
    var rowK = results[k];
    nodes.forEach(function(i) {
      var rowI = results[i];
      nodes.forEach(function(j) {
        var ik = rowI[k];
        var kj = rowK[j];
        var ij = rowI[j];
        var altDistance = ik.distance + kj.distance;
        if (altDistance < ij.distance) {
          ij.distance = altDistance;
          ij.predecessor = kj.predecessor;
        }
      });
    });
  });

  return results;
}

},{"../lodash":352}],383:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = topsort;
topsort.CycleException = CycleException;

function topsort(g) {
  var visited = {},
      stack = {},
      results = [];

  function visit(node) {
    if (_.has(stack, node)) {
      throw new CycleException();
    }

    if (!_.has(visited, node)) {
      stack[node] = true;
      visited[node] = true;
      _.each(g.predecessors(node), visit);
      delete stack[node];
      results.push(node);
    }
  }

  _.each(g.sinks(), visit);

  if (_.size(visited) !== g.nodeCount()) {
    throw new CycleException();
  }

  return results;
}

function CycleException() {}

},{"../lodash":352}],378:[function(require,module,exports) {
var topsort = require("./topsort");

module.exports = isAcyclic;

function isAcyclic(g) {
  try {
    topsort(g);
  } catch (e) {
    if (e instanceof topsort.CycleException) {
      return false;
    }
    throw e;
  }
  return true;
}

},{"./topsort":383}],385:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = dfs;

/*
 * A helper that preforms a pre- or post-order traversal on the input graph
 * and returns the nodes in the order they were visited. This algorithm treats
 * the input as undirected.
 *
 * Order must be one of "pre" or "post".
 */
function dfs(g, vs, order) {
  if (!_.isArray(vs)) {
    vs = [vs];
  }

  var acc = [],
      visited = {};
  _.each(vs, function(v) {
    if (!g.hasNode(v)) {
      throw new Error("Graph does not have node: " + v);
    }

    doDfs(g, v, order === "post", visited, acc);
  });
  return acc;
}

function doDfs(g, v, postorder, visited, acc) {
  if (!_.has(visited, v)) {
    visited[v] = true;

    if (!postorder) { acc.push(v); }
    _.each(g.neighbors(v), function(w) {
      doDfs(g, w, postorder, visited, acc);
    });
    if (postorder) { acc.push(v); }
  }
}

},{"../lodash":352}],379:[function(require,module,exports) {
var dfs = require("./dfs");

module.exports = postorder;

function postorder(g, vs) {
  return dfs(g, vs, "post");
}

},{"./dfs":385}],380:[function(require,module,exports) {
var dfs = require("./dfs");

module.exports = preorder;

function preorder(g, vs) {
  return dfs(g, vs, "pre");
}

},{"./dfs":385}],381:[function(require,module,exports) {
var _ = require("../lodash"),
    Graph = require("../graph"),
    PriorityQueue = require("../data/priority-queue");

module.exports = prim;

function prim(g, weightFunc) {
  var result = new Graph(),
      parents = {},
      pq = new PriorityQueue(),
      v;

  function updateNeighbors(edge) {
    var w = edge.v === v ? edge.w : edge.v,
        pri = pq.priority(w);
    if (pri !== undefined) {
      var edgeWeight = weightFunc(edge);
      if (edgeWeight < pri) {
        parents[w] = v;
        pq.decrease(w, edgeWeight);
      }
    }
  }

  if (g.nodeCount() === 0) {
    return result;
  }

  _.each(g.nodes(), function(v) {
    pq.add(v, Number.POSITIVE_INFINITY);
    result.setNode(v);
  });

  // Start from an arbitrary node
  pq.decrease(g.nodes()[0], 0);

  var init = false;
  while (pq.size() > 0) {
    v = pq.removeMin();
    if (_.has(parents, v)) {
      result.setEdge(v, parents[v]);
    } else if (init) {
      throw new Error("Input graph is not connected: " + g);
    } else {
      init = true;
    }

    g.nodeEdges(v).forEach(updateNeighbors);
  }

  return result;
}

},{"../lodash":352,"../graph":353,"../data/priority-queue":384}],368:[function(require,module,exports) {
module.exports = {
  components: require("./components"),
  dijkstra: require("./dijkstra"),
  dijkstraAll: require("./dijkstra-all"),
  findCycles: require("./find-cycles"),
  floydWarshall: require("./floyd-warshall"),
  isAcyclic: require("./is-acyclic"),
  postorder: require("./postorder"),
  preorder: require("./preorder"),
  prim: require("./prim"),
  tarjan: require("./tarjan"),
  topsort: require("./topsort")
};

},{"./components":373,"./dijkstra":374,"./dijkstra-all":375,"./find-cycles":376,"./floyd-warshall":377,"./is-acyclic":378,"./postorder":379,"./preorder":380,"./prim":381,"./tarjan":382,"./topsort":383}],347:[function(require,module,exports) {
/**
 * Copyright (c) 2014, Chris Pettitt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var lib = require("./lib");

module.exports = {
  Graph: lib.Graph,
  json: require("./lib/json"),
  alg: require("./lib/alg"),
  version: lib.version
};

},{"./lib":367,"./lib/json":350,"./lib/alg":368}],333:[function(require,module,exports) {
/* global window */

var graphlib;

if (typeof require === "function") {
  try {
    graphlib = require("graphlib");
  } catch (e) {}
}

if (!graphlib) {
  graphlib = window.graphlib;
}

module.exports = graphlib;

},{"graphlib":347}],349:[function(require,module,exports) {
var global = (1,eval)("this");
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

},{}],340:[function(require,module,exports) {
/* global window */

var lodash;

if (typeof require === "function") {
  try {
    lodash = require("lodash");
  } catch (e) {}
}

if (!lodash) {
  lodash = window._;
}

module.exports = lodash;

},{"lodash":349}],351:[function(require,module,exports) {
/*
 * Simple doubly linked list implementation derived from Cormen, et al.,
 * "Introduction to Algorithms".
 */

module.exports = List;

function List() {
  var sentinel = {};
  sentinel._next = sentinel._prev = sentinel;
  this._sentinel = sentinel;
}

List.prototype.dequeue = function() {
  var sentinel = this._sentinel,
      entry = sentinel._prev;
  if (entry !== sentinel) {
    unlink(entry);
    return entry;
  }
};

List.prototype.enqueue = function(entry) {
  var sentinel = this._sentinel;
  if (entry._prev && entry._next) {
    unlink(entry);
  }
  entry._next = sentinel._next;
  sentinel._next._prev = entry;
  sentinel._next = entry;
  entry._prev = sentinel;
};

List.prototype.toString = function() {
  var strs = [],
      sentinel = this._sentinel,
      curr = sentinel._prev;
  while (curr !== sentinel) {
    strs.push(JSON.stringify(curr, filterOutLinks));
    curr = curr._prev;
  }
  return "[" + strs.join(", ") + "]";
};

function unlink(entry) {
  entry._prev._next = entry._next;
  entry._next._prev = entry._prev;
  delete entry._next;
  delete entry._prev;
}

function filterOutLinks(k, v) {
  if (k !== "_next" && k !== "_prev") {
    return v;
  }
}

},{}],348:[function(require,module,exports) {
var _ = require("./lodash"),
    Graph = require("./graphlib").Graph,
    List = require("./data/list");

/*
 * A greedy heuristic for finding a feedback arc set for a graph. A feedback
 * arc set is a set of edges that can be removed to make a graph acyclic.
 * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
 * effective heuristic for the feedback arc set problem." This implementation
 * adjusts that from the paper to allow for weighted edges.
 */
module.exports = greedyFAS;

var DEFAULT_WEIGHT_FN = _.constant(1);

function greedyFAS(g, weightFn) {
  if (g.nodeCount() <= 1) {
    return [];
  }
  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

  // Expand multi-edges
  return _.flatten(_.map(results, function(e) {
    return g.outEdges(e.v, e.w);
  }), true);
}

function doGreedyFAS(g, buckets, zeroIdx) {
  var results = [],
      sources = buckets[buckets.length - 1],
      sinks = buckets[0];

  var entry;
  while (g.nodeCount()) {
    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }
    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }
    if (g.nodeCount()) {
      for (var i = buckets.length - 2; i > 0; --i) {
        entry = buckets[i].dequeue();
        if (entry) {
          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
          break;
        }
      }
    }
  }

  return results;
}

function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
  var results = collectPredecessors ? [] : undefined;

  _.each(g.inEdges(entry.v), function(edge) {
    var weight = g.edge(edge),
        uEntry = g.node(edge.v);

    if (collectPredecessors) {
      results.push({ v: edge.v, w: edge.w });
    }

    uEntry.out -= weight;
    assignBucket(buckets, zeroIdx, uEntry);
  });

  _.each(g.outEdges(entry.v), function(edge) {
    var weight = g.edge(edge),
        w = edge.w,
        wEntry = g.node(w);
    wEntry["in"] -= weight;
    assignBucket(buckets, zeroIdx, wEntry);
  });

  g.removeNode(entry.v);

  return results;
}

function buildState(g, weightFn) {
  var fasGraph = new Graph(),
      maxIn = 0,
      maxOut = 0;

  _.each(g.nodes(), function(v) {
    fasGraph.setNode(v, { v: v, "in": 0, out: 0 });
  });

  // Aggregate weights on nodes, but also sum the weights across multi-edges
  // into a single edge for the fasGraph.
  _.each(g.edges(), function(e) {
    var prevWeight = fasGraph.edge(e.v, e.w) || 0,
        weight = weightFn(e),
        edgeWeight = prevWeight + weight;
    fasGraph.setEdge(e.v, e.w, edgeWeight);
    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)["in"]  += weight);
  });

  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });
  var zeroIdx = maxIn + 1;

  _.each(fasGraph.nodes(), function(v) {
    assignBucket(buckets, zeroIdx, fasGraph.node(v));
  });

  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
}

function assignBucket(buckets, zeroIdx, entry) {
  if (!entry.out) {
    buckets[0].enqueue(entry);
  } else if (!entry["in"]) {
    buckets[buckets.length - 1].enqueue(entry);
  } else {
    buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
  }
}

},{"./lodash":340,"./graphlib":333,"./data/list":351}],341:[function(require,module,exports) {
"use strict";

var _ = require("./lodash"),
    greedyFAS = require("./greedy-fas");

module.exports = {
  run: run,
  undo: undo
};

function run(g) {
  var fas = (g.graph().acyclicer === "greedy"
                ? greedyFAS(g, weightFn(g))
                : dfsFAS(g));
  _.each(fas, function(e) {
    var label = g.edge(e);
    g.removeEdge(e);
    label.forwardName = e.name;
    label.reversed = true;
    g.setEdge(e.w, e.v, label, _.uniqueId("rev"));
  });

  function weightFn(g) {
    return function(e) {
      return g.edge(e).weight;
    };
  }
}

function dfsFAS(g) {
  var fas = [],
      stack = {},
      visited = {};

  function dfs(v) {
    if (_.has(visited, v)) {
      return;
    }
    visited[v] = true;
    stack[v] = true;
    _.each(g.outEdges(v), function(e) {
      if (_.has(stack, e.w)) {
        fas.push(e);
      } else {
        dfs(e.w);
      }
    });
    delete stack[v];
  }

  _.each(g.nodes(), dfs);
  return fas;
}

function undo(g) {
  _.each(g.edges(), function(e) {
    var label = g.edge(e);
    if (label.reversed) {
      g.removeEdge(e);

      var forwardName = label.forwardName;
      delete label.reversed;
      delete label.forwardName;
      g.setEdge(e.w, e.v, label, forwardName);
    }
  });
}

},{"./lodash":340,"./greedy-fas":348}],336:[function(require,module,exports) {
"use strict";

var _ = require("./lodash"),
    Graph = require("./graphlib").Graph;

module.exports = {
  addDummyNode: addDummyNode,
  simplify: simplify,
  asNonCompoundGraph: asNonCompoundGraph,
  successorWeights: successorWeights,
  predecessorWeights: predecessorWeights,
  intersectRect: intersectRect,
  buildLayerMatrix: buildLayerMatrix,
  normalizeRanks: normalizeRanks,
  removeEmptyRanks: removeEmptyRanks,
  addBorderNode: addBorderNode,
  maxRank: maxRank,
  partition: partition,
  time: time,
  notime: notime
};

/*
 * Adds a dummy node to the graph and return v.
 */
function addDummyNode(g, type, attrs, name) {
  var v;
  do {
    v = _.uniqueId(name);
  } while (g.hasNode(v));

  attrs.dummy = type;
  g.setNode(v, attrs);
  return v;
}

/*
 * Returns a new graph with only simple edges. Handles aggregation of data
 * associated with multi-edges.
 */
function simplify(g) {
  var simplified = new Graph().setGraph(g.graph());
  _.each(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });
  _.each(g.edges(), function(e) {
    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 },
        label = g.edge(e);
    simplified.setEdge(e.v, e.w, {
      weight: simpleLabel.weight + label.weight,
      minlen: Math.max(simpleLabel.minlen, label.minlen)
    });
  });
  return simplified;
}

function asNonCompoundGraph(g) {
  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());
  _.each(g.nodes(), function(v) {
    if (!g.children(v).length) {
      simplified.setNode(v, g.node(v));
    }
  });
  _.each(g.edges(), function(e) {
    simplified.setEdge(e, g.edge(e));
  });
  return simplified;
}

function successorWeights(g) {
  var weightMap = _.map(g.nodes(), function(v) {
    var sucs = {};
    _.each(g.outEdges(v), function(e) {
      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
    });
    return sucs;
  });
  return _.zipObject(g.nodes(), weightMap);
}

function predecessorWeights(g) {
  var weightMap = _.map(g.nodes(), function(v) {
    var preds = {};
    _.each(g.inEdges(v), function(e) {
      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
    });
    return preds;
  });
  return _.zipObject(g.nodes(), weightMap);
}

/*
 * Finds where a line starting at point ({x, y}) would intersect a rectangle
 * ({x, y, width, height}) if it were pointing at the rectangle's center.
 */
function intersectRect(rect, point) {
  var x = rect.x;
  var y = rect.y;

  // Rectangle intersection algorithm from:
  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
  var dx = point.x - x;
  var dy = point.y - y;
  var w = rect.width / 2;
  var h = rect.height / 2;

  if (!dx && !dy) {
    throw new Error("Not possible to find intersection inside of the rectangle");
  }

  var sx, sy;
  if (Math.abs(dy) * w > Math.abs(dx) * h) {
    // Intersection is top or bottom of rect.
    if (dy < 0) {
      h = -h;
    }
    sx = h * dx / dy;
    sy = h;
  } else {
    // Intersection is left or right of rect.
    if (dx < 0) {
      w = -w;
    }
    sx = w;
    sy = w * dy / dx;
  }

  return { x: x + sx, y: y + sy };
}

/*
 * Given a DAG with each node assigned "rank" and "order" properties, this
 * function will produce a matrix with the ids of each node.
 */
function buildLayerMatrix(g) {
  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });
  _.each(g.nodes(), function(v) {
    var node = g.node(v),
        rank = node.rank;
    if (!_.isUndefined(rank)) {
      layering[rank][node.order] = v;
    }
  });
  return layering;
}

/*
 * Adjusts the ranks for all nodes in the graph such that all nodes v have
 * rank(v) >= 0 and at least one node w has rank(w) = 0.
 */
function normalizeRanks(g) {
  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));
  _.each(g.nodes(), function(v) {
    var node = g.node(v);
    if (_.has(node, "rank")) {
      node.rank -= min;
    }
  });
}

function removeEmptyRanks(g) {
  // Ranks may not start at 0, so we need to offset them
  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));

  var layers = [];
  _.each(g.nodes(), function(v) {
    var rank = g.node(v).rank - offset;
    if (!layers[rank]) {
      layers[rank] = [];
    }
    layers[rank].push(v);
  });

  var delta = 0,
      nodeRankFactor = g.graph().nodeRankFactor;
  _.each(layers, function(vs, i) {
    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {
      --delta;
    } else if (delta) {
      _.each(vs, function(v) { g.node(v).rank += delta; });
    }
  });
}

function addBorderNode(g, prefix, rank, order) {
  var node = {
    width: 0,
    height: 0
  };
  if (arguments.length >= 4) {
    node.rank = rank;
    node.order = order;
  }
  return addDummyNode(g, "border", node, prefix);
}

function maxRank(g) {
  return _.max(_.map(g.nodes(), function(v) {
    var rank = g.node(v).rank;
    if (!_.isUndefined(rank)) {
      return rank;
    }
  }));
}

/*
 * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
 * function returns true for an entry it goes into `lhs`. Otherwise it goes
 * into `rhs.
 */
function partition(collection, fn) {
  var result = { lhs: [], rhs: [] };
  _.each(collection, function(value) {
    if (fn(value)) {
      result.lhs.push(value);
    } else {
      result.rhs.push(value);
    }
  });
  return result;
}

/*
 * Returns a new function that wraps `fn` with a timer. The wrapper logs the
 * time it takes to execute the function.
 */
function time(name, fn) {
  var start = _.now();
  try {
    return fn();
  } finally {
    console.log(name + " time: " + (_.now() - start) + "ms");
  }
}

function notime(name, fn) {
  return fn();
}

},{"./lodash":340,"./graphlib":333}],342:[function(require,module,exports) {
"use strict";

var _ = require("./lodash"),
    util = require("./util");

module.exports = {
  run: run,
  undo: undo
};

/*
 * Breaks any long edges in the graph into short segments that span 1 layer
 * each. This operation is undoable with the denormalize function.
 *
 * Pre-conditions:
 *
 *    1. The input graph is a DAG.
 *    2. Each node in the graph has a "rank" property.
 *
 * Post-condition:
 *
 *    1. All edges in the graph have a length of 1.
 *    2. Dummy nodes are added where edges have been split into segments.
 *    3. The graph is augmented with a "dummyChains" attribute which contains
 *       the first dummy in each chain of dummy nodes produced.
 */
function run(g) {
  g.graph().dummyChains = [];
  _.each(g.edges(), function(edge) { normalizeEdge(g, edge); });
}

function normalizeEdge(g, e) {
  var v = e.v,
      vRank = g.node(v).rank,
      w = e.w,
      wRank = g.node(w).rank,
      name = e.name,
      edgeLabel = g.edge(e),
      labelRank = edgeLabel.labelRank;

  if (wRank === vRank + 1) return;

  g.removeEdge(e);

  var dummy, attrs, i;
  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
    edgeLabel.points = [];
    attrs = {
      width: 0, height: 0,
      edgeLabel: edgeLabel, edgeObj: e,
      rank: vRank
    };
    dummy = util.addDummyNode(g, "edge", attrs, "_d");
    if (vRank === labelRank) {
      attrs.width = edgeLabel.width;
      attrs.height = edgeLabel.height;
      attrs.dummy = "edge-label";
      attrs.labelpos = edgeLabel.labelpos;
    }
    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
    if (i === 0) {
      g.graph().dummyChains.push(dummy);
    }
    v = dummy;
  }

  g.setEdge(v, w, { weight: edgeLabel.weight }, name);
}

function undo(g) {
  _.each(g.graph().dummyChains, function(v) {
    var node = g.node(v),
        origLabel = node.edgeLabel,
        w;
    g.setEdge(node.edgeObj, origLabel);
    while (node.dummy) {
      w = g.successors(v)[0];
      g.removeNode(v);
      origLabel.points.push({ x: node.x, y: node.y });
      if (node.dummy === "edge-label") {
        origLabel.x = node.x;
        origLabel.y = node.y;
        origLabel.width = node.width;
        origLabel.height = node.height;
      }
      v = w;
      node = g.node(v);
    }
  });
}

},{"./lodash":340,"./util":336}],358:[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = {
  longestPath: longestPath,
  slack: slack
};

/*
 * Initializes ranks for the input graph using the longest path algorithm. This
 * algorithm scales well and is fast in practice, it yields rather poor
 * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
 * ranks wide and leaving edges longer than necessary. However, due to its
 * speed, this algorithm is good for getting an initial ranking that can be fed
 * into other algorithms.
 *
 * This algorithm does not normalize layers because it will be used by other
 * algorithms in most cases. If using this algorithm directly, be sure to
 * run normalize at the end.
 *
 * Pre-conditions:
 *
 *    1. Input graph is a DAG.
 *    2. Input graph node labels can be assigned properties.
 *
 * Post-conditions:
 *
 *    1. Each node will be assign an (unnormalized) "rank" property.
 */
function longestPath(g) {
  var visited = {};

  function dfs(v) {
    var label = g.node(v);
    if (_.has(visited, v)) {
      return label.rank;
    }
    visited[v] = true;

    var rank = _.min(_.map(g.outEdges(v), function(e) {
      return dfs(e.w) - g.edge(e).minlen;
    }));

    if (rank === Number.POSITIVE_INFINITY) {
      rank = 0;
    }

    return (label.rank = rank);
  }

  _.each(g.sources(), dfs);
}

/*
 * Returns the amount of slack for the given edge. The slack is defined as the
 * difference between the length of the edge and its minimum length.
 */
function slack(g, e) {
  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
}

},{"../lodash":340}],359:[function(require,module,exports) {
"use strict";

var _ = require("../lodash"),
    Graph = require("../graphlib").Graph,
    slack = require("./util").slack;

module.exports = feasibleTree;

/*
 * Constructs a spanning tree with tight edges and adjusted the input node's
 * ranks to achieve this. A tight edge is one that is has a length that matches
 * its "minlen" attribute.
 *
 * The basic structure for this function is derived from Gansner, et al., "A
 * Technique for Drawing Directed Graphs."
 *
 * Pre-conditions:
 *
 *    1. Graph must be a DAG.
 *    2. Graph must be connected.
 *    3. Graph must have at least one node.
 *    5. Graph nodes must have been previously assigned a "rank" property that
 *       respects the "minlen" property of incident edges.
 *    6. Graph edges must have a "minlen" property.
 *
 * Post-conditions:
 *
 *    - Graph nodes will have their rank adjusted to ensure that all edges are
 *      tight.
 *
 * Returns a tree (undirected graph) that is constructed using only "tight"
 * edges.
 */
function feasibleTree(g) {
  var t = new Graph({ directed: false });

  // Choose arbitrary node from which to start our tree
  var start = g.nodes()[0],
      size = g.nodeCount();
  t.setNode(start, {});

  var edge, delta;
  while (tightTree(t, g) < size) {
    edge = findMinSlackEdge(t, g);
    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
    shiftRanks(t, g, delta);
  }

  return t;
}

/*
 * Finds a maximal tree of tight edges and returns the number of nodes in the
 * tree.
 */
function tightTree(t, g) {
  function dfs(v) {
    _.each(g.nodeEdges(v), function(e) {
      var edgeV = e.v,
          w = (v === edgeV) ? e.w : edgeV;
      if (!t.hasNode(w) && !slack(g, e)) {
        t.setNode(w, {});
        t.setEdge(v, w, {});
        dfs(w);
      }
    });
  }

  _.each(t.nodes(), dfs);
  return t.nodeCount();
}

/*
 * Finds the edge with the smallest slack that is incident on tree and returns
 * it.
 */
function findMinSlackEdge(t, g) {
  return _.min(g.edges(), function(e) {
    if (t.hasNode(e.v) !== t.hasNode(e.w)) {
      return slack(g, e);
    }
  });
}

function shiftRanks(t, g, delta) {
  _.each(t.nodes(), function(v) {
    g.node(v).rank += delta;
  });
}

},{"../lodash":340,"../graphlib":333,"./util":358}],360:[function(require,module,exports) {
"use strict";

var _ = require("../lodash"),
    feasibleTree = require("./feasible-tree"),
    slack = require("./util").slack,
    initRank = require("./util").longestPath,
    preorder = require("../graphlib").alg.preorder,
    postorder = require("../graphlib").alg.postorder,
    simplify = require("../util").simplify;

module.exports = networkSimplex;

// Expose some internals for testing purposes
networkSimplex.initLowLimValues = initLowLimValues;
networkSimplex.initCutValues = initCutValues;
networkSimplex.calcCutValue = calcCutValue;
networkSimplex.leaveEdge = leaveEdge;
networkSimplex.enterEdge = enterEdge;
networkSimplex.exchangeEdges = exchangeEdges;

/*
 * The network simplex algorithm assigns ranks to each node in the input graph
 * and iteratively improves the ranking to reduce the length of edges.
 *
 * Preconditions:
 *
 *    1. The input graph must be a DAG.
 *    2. All nodes in the graph must have an object value.
 *    3. All edges in the graph must have "minlen" and "weight" attributes.
 *
 * Postconditions:
 *
 *    1. All nodes in the graph will have an assigned "rank" attribute that has
 *       been optimized by the network simplex algorithm. Ranks start at 0.
 *
 *
 * A rough sketch of the algorithm is as follows:
 *
 *    1. Assign initial ranks to each node. We use the longest path algorithm,
 *       which assigns ranks to the lowest position possible. In general this
 *       leads to very wide bottom ranks and unnecessarily long edges.
 *    2. Construct a feasible tight tree. A tight tree is one such that all
 *       edges in the tree have no slack (difference between length of edge
 *       and minlen for the edge). This by itself greatly improves the assigned
 *       rankings by shorting edges.
 *    3. Iteratively find edges that have negative cut values. Generally a
 *       negative cut value indicates that the edge could be removed and a new
 *       tree edge could be added to produce a more compact graph.
 *
 * Much of the algorithms here are derived from Gansner, et al., "A Technique
 * for Drawing Directed Graphs." The structure of the file roughly follows the
 * structure of the overall algorithm.
 */
function networkSimplex(g) {
  g = simplify(g);
  initRank(g);
  var t = feasibleTree(g);
  initLowLimValues(t);
  initCutValues(t, g);

  var e, f;
  while ((e = leaveEdge(t))) {
    f = enterEdge(t, g, e);
    exchangeEdges(t, g, e, f);
  }
}

/*
 * Initializes cut values for all edges in the tree.
 */
function initCutValues(t, g) {
  var vs = postorder(t, t.nodes());
  vs = vs.slice(0, vs.length - 1);
  _.each(vs, function(v) {
    assignCutValue(t, g, v);
  });
}

function assignCutValue(t, g, child) {
  var childLab = t.node(child),
      parent = childLab.parent;
  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
}

/*
 * Given the tight tree, its graph, and a child in the graph calculate and
 * return the cut value for the edge between the child and its parent.
 */
function calcCutValue(t, g, child) {
  var childLab = t.node(child),
      parent = childLab.parent,
      // True if the child is on the tail end of the edge in the directed graph
      childIsTail = true,
      // The graph's view of the tree edge we're inspecting
      graphEdge = g.edge(child, parent),
      // The accumulated cut value for the edge between this node and its parent
      cutValue = 0;

  if (!graphEdge) {
    childIsTail = false;
    graphEdge = g.edge(parent, child);
  }

  cutValue = graphEdge.weight;

  _.each(g.nodeEdges(child), function(e) {
    var isOutEdge = e.v === child,
        other = isOutEdge ? e.w : e.v;

    if (other !== parent) {
      var pointsToHead = isOutEdge === childIsTail,
          otherWeight = g.edge(e).weight;

      cutValue += pointsToHead ? otherWeight : -otherWeight;
      if (isTreeEdge(t, child, other)) {
        var otherCutValue = t.edge(child, other).cutvalue;
        cutValue += pointsToHead ? -otherCutValue : otherCutValue;
      }
    }
  });

  return cutValue;
}

function initLowLimValues(tree, root) {
  if (arguments.length < 2) {
    root = tree.nodes()[0];
  }
  dfsAssignLowLim(tree, {}, 1, root);
}

function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
  var low = nextLim,
      label = tree.node(v);

  visited[v] = true;
  _.each(tree.neighbors(v), function(w) {
    if (!_.has(visited, w)) {
      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
    }
  });

  label.low = low;
  label.lim = nextLim++;
  if (parent) {
    label.parent = parent;
  } else {
    // TODO should be able to remove this when we incrementally update low lim
    delete label.parent;
  }

  return nextLim;
}

function leaveEdge(tree) {
  return _.find(tree.edges(), function(e) {
    return tree.edge(e).cutvalue < 0;
  });
}

function enterEdge(t, g, edge) {
  var v = edge.v,
      w = edge.w;

  // For the rest of this function we assume that v is the tail and w is the
  // head, so if we don't have this edge in the graph we should flip it to
  // match the correct orientation.
  if (!g.hasEdge(v, w)) {
    v = edge.w;
    w = edge.v;
  }

  var vLabel = t.node(v),
      wLabel = t.node(w),
      tailLabel = vLabel,
      flip = false;

  // If the root is in the tail of the edge then we need to flip the logic that
  // checks for the head and tail nodes in the candidates function below.
  if (vLabel.lim > wLabel.lim) {
    tailLabel = wLabel;
    flip = true;
  }

  var candidates = _.filter(g.edges(), function(edge) {
    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&
           flip !== isDescendant(t, t.node(edge.w), tailLabel);
  });

  return _.min(candidates, function(edge) { return slack(g, edge); });
}

function exchangeEdges(t, g, e, f) {
  var v = e.v,
      w = e.w;
  t.removeEdge(v, w);
  t.setEdge(f.v, f.w, {});
  initLowLimValues(t);
  initCutValues(t, g);
  updateRanks(t, g);
}

function updateRanks(t, g) {
  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; }),
      vs = preorder(t, root);
  vs = vs.slice(1);
  _.each(vs, function(v) {
    var parent = t.node(v).parent,
        edge = g.edge(v, parent),
        flipped = false;

    if (!edge) {
      edge = g.edge(parent, v);
      flipped = true;
    }

    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
  });
}

/*
 * Returns true if the edge is in the tree.
 */
function isTreeEdge(tree, u, v) {
  return tree.hasEdge(u, v);
}

/*
 * Returns true if the specified node is descendant of the root node per the
 * assigned low and lim attributes in the tree.
 */
function isDescendant(tree, vLabel, rootLabel) {
  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
}

},{"../lodash":340,"./feasible-tree":359,"./util":358,"../graphlib":333,"../util":336}],354:[function(require,module,exports) {
"use strict";

var rankUtil = require("./util"),
    longestPath = rankUtil.longestPath,
    feasibleTree = require("./feasible-tree"),
    networkSimplex = require("./network-simplex");

module.exports = rank;

/*
 * Assigns a rank to each node in the input graph that respects the "minlen"
 * constraint specified on edges between nodes.
 *
 * This basic structure is derived from Gansner, et al., "A Technique for
 * Drawing Directed Graphs."
 *
 * Pre-conditions:
 *
 *    1. Graph must be a connected DAG
 *    2. Graph nodes must be objects
 *    3. Graph edges must have "weight" and "minlen" attributes
 *
 * Post-conditions:
 *
 *    1. Graph nodes will have a "rank" attribute based on the results of the
 *       algorithm. Ranks can start at any index (including negative), we'll
 *       fix them up later.
 */
function rank(g) {
  switch(g.graph().ranker) {
    case "network-simplex": networkSimplexRanker(g); break;
    case "tight-tree": tightTreeRanker(g); break;
    case "longest-path": longestPathRanker(g); break;
    default: networkSimplexRanker(g);
  }
}

// A fast and simple ranker, but results are far from optimal.
var longestPathRanker = longestPath;

function tightTreeRanker(g) {
  longestPath(g);
  feasibleTree(g);
}

function networkSimplexRanker(g) {
  networkSimplex(g);
}

},{"./util":358,"./feasible-tree":359,"./network-simplex":360}],343:[function(require,module,exports) {
var _ = require("./lodash");

module.exports = parentDummyChains;

function parentDummyChains(g) {
  var postorderNums = postorder(g);

  _.each(g.graph().dummyChains, function(v) {
    var node = g.node(v),
        edgeObj = node.edgeObj,
        pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w),
        path = pathData.path,
        lca = pathData.lca,
        pathIdx = 0,
        pathV = path[pathIdx],
        ascending = true;

    while (v !== edgeObj.w) {
      node = g.node(v);

      if (ascending) {
        while ((pathV = path[pathIdx]) !== lca &&
               g.node(pathV).maxRank < node.rank) {
          pathIdx++;
        }

        if (pathV === lca) {
          ascending = false;
        }
      }

      if (!ascending) {
        while (pathIdx < path.length - 1 &&
               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
          pathIdx++;
        }
        pathV = path[pathIdx];
      }

      g.setParent(v, pathV);
      v = g.successors(v)[0];
    }
  });
}

// Find a path from v to w through the lowest common ancestor (LCA). Return the
// full path and the LCA.
function findPath(g, postorderNums, v, w) {
  var vPath = [],
      wPath = [],
      low = Math.min(postorderNums[v].low, postorderNums[w].low),
      lim = Math.max(postorderNums[v].lim, postorderNums[w].lim),
      parent,
      lca;

  // Traverse up from v to find the LCA
  parent = v;
  do {
    parent = g.parent(parent);
    vPath.push(parent);
  } while (parent &&
           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
  lca = parent;

  // Traverse from w to LCA
  parent = w;
  while ((parent = g.parent(parent)) !== lca) {
    wPath.push(parent);
  }

  return { path: vPath.concat(wPath.reverse()), lca: lca };
}

function postorder(g) {
  var result = {},
      lim = 0;

  function dfs(v) {
    var low = lim;
    _.each(g.children(v), dfs);
    result[v] = { low: low, lim: lim++ };
  }
  _.each(g.children(), dfs);

  return result;
}

},{"./lodash":340}],344:[function(require,module,exports) {
var _ = require("./lodash"),
    util = require("./util");

module.exports = {
  run: run,
  cleanup: cleanup
};

/*
 * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
 * adds appropriate edges to ensure that all cluster nodes are placed between
 * these boundries, and ensures that the graph is connected.
 *
 * In addition we ensure, through the use of the minlen property, that nodes
 * and subgraph border nodes to not end up on the same rank.
 *
 * Preconditions:
 *
 *    1. Input graph is a DAG
 *    2. Nodes in the input graph has a minlen attribute
 *
 * Postconditions:
 *
 *    1. Input graph is connected.
 *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
 *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
 *       get placed on the same rank as subgraph border nodes.
 *
 * The nesting graph idea comes from Sander, "Layout of Compound Directed
 * Graphs."
 */
function run(g) {
  var root = util.addDummyNode(g, "root", {}, "_root"),
      depths = treeDepths(g),
      height = _.max(depths) - 1,
      nodeSep = 2 * height + 1;

  g.graph().nestingRoot = root;

  // Multiply minlen by nodeSep to align nodes on non-border ranks.
  _.each(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });

  // Calculate a weight that is sufficient to keep subgraphs vertically compact
  var weight = sumWeights(g) + 1;

  // Create border nodes and link them up
  _.each(g.children(), function(child) {
    dfs(g, root, nodeSep, weight, height, depths, child);
  });

  // Save the multiplier for node layers for later removal of empty border
  // layers.
  g.graph().nodeRankFactor = nodeSep;
}

function dfs(g, root, nodeSep, weight, height, depths, v) {
  var children = g.children(v);
  if (!children.length) {
    if (v !== root) {
      g.setEdge(root, v, { weight: 0, minlen: nodeSep });
    }
    return;
  }

  var top = util.addBorderNode(g, "_bt"),
      bottom = util.addBorderNode(g, "_bb"),
      label = g.node(v);

  g.setParent(top, v);
  label.borderTop = top;
  g.setParent(bottom, v);
  label.borderBottom = bottom;

  _.each(children, function(child) {
    dfs(g, root, nodeSep, weight, height, depths, child);

    var childNode = g.node(child),
        childTop = childNode.borderTop ? childNode.borderTop : child,
        childBottom = childNode.borderBottom ? childNode.borderBottom : child,
        thisWeight = childNode.borderTop ? weight : 2 * weight,
        minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

    g.setEdge(top, childTop, {
      weight: thisWeight,
      minlen: minlen,
      nestingEdge: true
    });

    g.setEdge(childBottom, bottom, {
      weight: thisWeight,
      minlen: minlen,
      nestingEdge: true
    });
  });

  if (!g.parent(v)) {
    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
  }
}

function treeDepths(g) {
  var depths = {};
  function dfs(v, depth) {
    var children = g.children(v);
    if (children && children.length) {
      _.each(children, function(child) {
        dfs(child, depth + 1);
      });
    }
    depths[v] = depth;
  }
  _.each(g.children(), function(v) { dfs(v, 1); });
  return depths;
}

function sumWeights(g) {
  return _.reduce(g.edges(), function(acc, e) {
    return acc + g.edge(e).weight;
  }, 0);
}

function cleanup(g) {
  var graphLabel = g.graph();
  g.removeNode(graphLabel.nestingRoot);
  delete graphLabel.nestingRoot;
  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.nestingEdge) {
      g.removeEdge(e);
    }
  });
}

},{"./lodash":340,"./util":336}],345:[function(require,module,exports) {
var _ = require("./lodash"),
    util = require("./util");

module.exports = addBorderSegments;

function addBorderSegments(g) {
  function dfs(v) {
    var children = g.children(v),
        node = g.node(v);
    if (children.length) {
      _.each(children, dfs);
    }

    if (_.has(node, "minRank")) {
      node.borderLeft = [];
      node.borderRight = [];
      for (var rank = node.minRank, maxRank = node.maxRank + 1;
           rank < maxRank;
           ++rank) {
        addBorderNode(g, "borderLeft", "_bl", v, node, rank);
        addBorderNode(g, "borderRight", "_br", v, node, rank);
      }
    }
  }

  _.each(g.children(), dfs);
}

function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
  var label = { width: 0, height: 0, rank: rank, borderType: prop },
      prev = sgNode[prop][rank - 1],
      curr = util.addDummyNode(g, "border", label, prefix);
  sgNode[prop][rank] = curr;
  g.setParent(curr, sg);
  if (prev) {
    g.setEdge(prev, curr, { weight: 1 });
  }
}

},{"./lodash":340,"./util":336}],346:[function(require,module,exports) {
"use strict";

var _ = require("./lodash");

module.exports = {
  adjust: adjust,
  undo: undo
};

function adjust(g) {
  var rankDir = g.graph().rankdir.toLowerCase();
  if (rankDir === "lr" || rankDir === "rl") {
    swapWidthHeight(g);
  }
}

function undo(g) {
  var rankDir = g.graph().rankdir.toLowerCase();
  if (rankDir === "bt" || rankDir === "rl") {
    reverseY(g);
  }

  if (rankDir === "lr" || rankDir === "rl") {
    swapXY(g);
    swapWidthHeight(g);
  }
}

function swapWidthHeight(g) {
  _.each(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });
  _.each(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });
}

function swapWidthHeightOne(attrs) {
  var w = attrs.width;
  attrs.width = attrs.height;
  attrs.height = w;
}

function reverseY(g) {
  _.each(g.nodes(), function(v) { reverseYOne(g.node(v)); });

  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    _.each(edge.points, reverseYOne);
    if (_.has(edge, "y")) {
      reverseYOne(edge);
    }
  });
}

function reverseYOne(attrs) {
  attrs.y = -attrs.y;
}

function swapXY(g) {
  _.each(g.nodes(), function(v) { swapXYOne(g.node(v)); });

  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    _.each(edge.points, swapXYOne);
    if (_.has(edge, "x")) {
      swapXYOne(edge);
    }
  });
}

function swapXYOne(attrs) {
  var x = attrs.x;
  attrs.x = attrs.y;
  attrs.y = x;
}

},{"./lodash":340}],362:[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = initOrder;

/*
 * Assigns an initial order value for each node by performing a DFS search
 * starting from nodes in the first rank. Nodes are assigned an order in their
 * rank as they are first visited.
 *
 * This approach comes from Gansner, et al., "A Technique for Drawing Directed
 * Graphs."
 *
 * Returns a layering matrix with an array per layer and each layer sorted by
 * the order of its nodes.
 */
function initOrder(g) {
  var visited = {},
      simpleNodes = _.filter(g.nodes(), function(v) {
        return !g.children(v).length;
      }),
      maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; })),
      layers = _.map(_.range(maxRank + 1), function() { return []; });

  function dfs(v) {
    if (_.has(visited, v)) return;
    visited[v] = true;
    var node = g.node(v);
    layers[node.rank].push(v);
    _.each(g.successors(v), dfs);
  }

  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });
  _.each(orderedVs, dfs);

  return layers;
}

},{"../lodash":340}],363:[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = crossCount;

/*
 * A function that takes a layering (an array of layers, each with an array of
 * ordererd nodes) and a graph and returns a weighted crossing count.
 *
 * Pre-conditions:
 *
 *    1. Input graph must be simple (not a multigraph), directed, and include
 *       only simple edges.
 *    2. Edges in the input graph must have assigned weights.
 *
 * Post-conditions:
 *
 *    1. The graph and layering matrix are left unchanged.
 *
 * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
 */
function crossCount(g, layering) {
  var cc = 0;
  for (var i = 1; i < layering.length; ++i) {
    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);
  }
  return cc;
}

function twoLayerCrossCount(g, northLayer, southLayer) {
  // Sort all of the edges between the north and south layers by their position
  // in the north layer and then the south. Map these edges to the position of
  // their head in the south layer.
  var southPos = _.zipObject(southLayer,
                             _.map(southLayer, function (v, i) { return i; }));
  var southEntries = _.flatten(_.map(northLayer, function(v) {
    return _.chain(g.outEdges(v))
            .map(function(e) {
              return { pos: southPos[e.w], weight: g.edge(e).weight };
            })
            .sortBy("pos")
            .value();
  }), true);

  // Build the accumulator tree
  var firstIndex = 1;
  while (firstIndex < southLayer.length) firstIndex <<= 1;
  var treeSize = 2 * firstIndex - 1;
  firstIndex -= 1;
  var tree = _.map(new Array(treeSize), function() { return 0; });

  // Calculate the weighted crossings
  var cc = 0;
  _.each(southEntries.forEach(function(entry) {
    var index = entry.pos + firstIndex;
    tree[index] += entry.weight;
    var weightSum = 0;
    while (index > 0) {
      if (index % 2) {
        weightSum += tree[index + 1];
      }
      index = (index - 1) >> 1;
      tree[index] += entry.weight;
    }
    cc += entry.weight * weightSum;
  }));

  return cc;
}

},{"../lodash":340}],370:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = barycenter;

function barycenter(g, movable) {
  return _.map(movable, function(v) {
    var inV = g.inEdges(v);
    if (!inV.length) {
      return { v: v };
    } else {
      var result = _.reduce(inV, function(acc, e) {
        var edge = g.edge(e),
            nodeU = g.node(e.v);
        return {
          sum: acc.sum + (edge.weight * nodeU.order),
          weight: acc.weight + edge.weight
        };
      }, { sum: 0, weight: 0 });

      return {
        v: v,
        barycenter: result.sum / result.weight,
        weight: result.weight
      };
    }
  });
}


},{"../lodash":340}],371:[function(require,module,exports) {
"use strict";

var _ = require("../lodash");

module.exports = resolveConflicts;

/*
 * Given a list of entries of the form {v, barycenter, weight} and a
 * constraint graph this function will resolve any conflicts between the
 * constraint graph and the barycenters for the entries. If the barycenters for
 * an entry would violate a constraint in the constraint graph then we coalesce
 * the nodes in the conflict into a new node that respects the contraint and
 * aggregates barycenter and weight information.
 *
 * This implementation is based on the description in Forster, "A Fast and
 * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
 * differs in some specific details.
 *
 * Pre-conditions:
 *
 *    1. Each entry has the form {v, barycenter, weight}, or if the node has
 *       no barycenter, then {v}.
 *
 * Returns:
 *
 *    A new list of entries of the form {vs, i, barycenter, weight}. The list
 *    `vs` may either be a singleton or it may be an aggregation of nodes
 *    ordered such that they do not violate constraints from the constraint
 *    graph. The property `i` is the lowest original index of any of the
 *    elements in `vs`.
 */
function resolveConflicts(entries, cg) {
  var mappedEntries = {};
  _.each(entries, function(entry, i) {
    var tmp = mappedEntries[entry.v] = {
      indegree: 0,
      "in": [],
      out: [],
      vs: [entry.v],
      i: i
    };
    if (!_.isUndefined(entry.barycenter)) {
      tmp.barycenter = entry.barycenter;
      tmp.weight = entry.weight;
    }
  });

  _.each(cg.edges(), function(e) {
    var entryV = mappedEntries[e.v],
        entryW = mappedEntries[e.w];
    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {
      entryW.indegree++;
      entryV.out.push(mappedEntries[e.w]);
    }
  });

  var sourceSet = _.filter(mappedEntries, function(entry) {
    return !entry.indegree;
  });

  return doResolveConflicts(sourceSet);
}

function doResolveConflicts(sourceSet) {
  var entries = [];

  function handleIn(vEntry) {
    return function(uEntry) {
      if (uEntry.merged) {
        return;
      }
      if (_.isUndefined(uEntry.barycenter) ||
          _.isUndefined(vEntry.barycenter) ||
          uEntry.barycenter >= vEntry.barycenter) {
        mergeEntries(vEntry, uEntry);
      }
    };
  }

  function handleOut(vEntry) {
    return function(wEntry) {
      wEntry["in"].push(vEntry);
      if (--wEntry.indegree === 0) {
        sourceSet.push(wEntry);
      }
    };
  }

  while (sourceSet.length) {
    var entry = sourceSet.pop();
    entries.push(entry);
    _.each(entry["in"].reverse(), handleIn(entry));
    _.each(entry.out, handleOut(entry));
  }

  return _.chain(entries)
          .filter(function(entry) { return !entry.merged; })
          .map(function(entry) {
            return _.pick(entry, ["vs", "i", "barycenter", "weight"]);
          })
          .value();
}

function mergeEntries(target, source) {
  var sum = 0,
      weight = 0;

  if (target.weight) {
    sum += target.barycenter * target.weight;
    weight += target.weight;
  }

  if (source.weight) {
    sum += source.barycenter * source.weight;
    weight += source.weight;
  }

  target.vs = source.vs.concat(target.vs);
  target.barycenter = sum / weight;
  target.weight = weight;
  target.i = Math.min(source.i, target.i);
  source.merged = true;
}

},{"../lodash":340}],372:[function(require,module,exports) {
var _ = require("../lodash"),
    util = require("../util");

module.exports = sort;

function sort(entries, biasRight) {
  var parts = util.partition(entries, function(entry) {
    return _.has(entry, "barycenter");
  });
  var sortable = parts.lhs,
      unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),
      vs = [],
      sum = 0,
      weight = 0,
      vsIndex = 0;

  sortable.sort(compareWithBias(!!biasRight));

  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

  _.each(sortable, function (entry) {
    vsIndex += entry.vs.length;
    vs.push(entry.vs);
    sum += entry.barycenter * entry.weight;
    weight += entry.weight;
    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
  });

  var result = { vs: _.flatten(vs, true) };
  if (weight) {
    result.barycenter = sum / weight;
    result.weight = weight;
  }
  return result;
}

function consumeUnsortable(vs, unsortable, index) {
  var last;
  while (unsortable.length && (last = _.last(unsortable)).i <= index) {
    unsortable.pop();
    vs.push(last.vs);
    index++;
  }
  return index;
}

function compareWithBias(bias) {
  return function(entryV, entryW) {
    if (entryV.barycenter < entryW.barycenter) {
      return -1;
    } else if (entryV.barycenter > entryW.barycenter) {
      return 1;
    }

    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
  };
}

},{"../lodash":340,"../util":336}],364:[function(require,module,exports) {
var _ = require("../lodash"),
    barycenter = require("./barycenter"),
    resolveConflicts = require("./resolve-conflicts"),
    sort = require("./sort");

module.exports = sortSubgraph;

function sortSubgraph(g, v, cg, biasRight) {
  var movable = g.children(v),
      node = g.node(v),
      bl = node ? node.borderLeft : undefined,
      br = node ? node.borderRight: undefined,
      subgraphs = {};

  if (bl) {
    movable = _.filter(movable, function(w) {
      return w !== bl && w !== br;
    });
  }

  var barycenters = barycenter(g, movable);
  _.each(barycenters, function(entry) {
    if (g.children(entry.v).length) {
      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
      subgraphs[entry.v] = subgraphResult;
      if (_.has(subgraphResult, "barycenter")) {
        mergeBarycenters(entry, subgraphResult);
      }
    }
  });

  var entries = resolveConflicts(barycenters, cg);
  expandSubgraphs(entries, subgraphs);

  var result = sort(entries, biasRight);

  if (bl) {
    result.vs = _.flatten([bl, result.vs, br], true);
    if (g.predecessors(bl).length) {
      var blPred = g.node(g.predecessors(bl)[0]),
          brPred = g.node(g.predecessors(br)[0]);
      if (!_.has(result, "barycenter")) {
        result.barycenter = 0;
        result.weight = 0;
      }
      result.barycenter = (result.barycenter * result.weight +
                           blPred.order + brPred.order) / (result.weight + 2);
      result.weight += 2;
    }
  }

  return result;
}

function expandSubgraphs(entries, subgraphs) {
  _.each(entries, function(entry) {
    entry.vs = _.flatten(entry.vs.map(function(v) {
      if (subgraphs[v]) {
        return subgraphs[v].vs;
      }
      return v;
    }), true);
  });
}

function mergeBarycenters(target, other) {
  if (!_.isUndefined(target.barycenter)) {
    target.barycenter = (target.barycenter * target.weight +
                         other.barycenter * other.weight) /
                        (target.weight + other.weight);
    target.weight += other.weight;
  } else {
    target.barycenter = other.barycenter;
    target.weight = other.weight;
  }
}

},{"../lodash":340,"./barycenter":370,"./resolve-conflicts":371,"./sort":372}],365:[function(require,module,exports) {
var _ = require("../lodash"),
    Graph = require("../graphlib").Graph;

module.exports = buildLayerGraph;

/*
 * Constructs a graph that can be used to sort a layer of nodes. The graph will
 * contain all base and subgraph nodes from the request layer in their original
 * hierarchy and any edges that are incident on these nodes and are of the type
 * requested by the "relationship" parameter.
 *
 * Nodes from the requested rank that do not have parents are assigned a root
 * node in the output graph, which is set in the root graph attribute. This
 * makes it easy to walk the hierarchy of movable nodes during ordering.
 *
 * Pre-conditions:
 *
 *    1. Input graph is a DAG
 *    2. Base nodes in the input graph have a rank attribute
 *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
 *    4. Edges have an assigned weight
 *
 * Post-conditions:
 *
 *    1. Output graph has all nodes in the movable rank with preserved
 *       hierarchy.
 *    2. Root nodes in the movable layer are made children of the node
 *       indicated by the root attribute of the graph.
 *    3. Non-movable nodes incident on movable nodes, selected by the
 *       relationship parameter, are included in the graph (without hierarchy).
 *    4. Edges incident on movable nodes, selected by the relationship
 *       parameter, are added to the output graph.
 *    5. The weights for copied edges are aggregated as need, since the output
 *       graph is not a multi-graph.
 */
function buildLayerGraph(g, rank, relationship) {
  var root = createRootNode(g),
      result = new Graph({ compound: true }).setGraph({ root: root })
                  .setDefaultNodeLabel(function(v) { return g.node(v); });

  _.each(g.nodes(), function(v) {
    var node = g.node(v),
        parent = g.parent(v);

    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
      result.setNode(v);
      result.setParent(v, parent || root);

      // This assumes we have only short edges!
      _.each(g[relationship](v), function(e) {
        var u = e.v === v ? e.w : e.v,
            edge = result.edge(u, v),
            weight = !_.isUndefined(edge) ? edge.weight : 0;
        result.setEdge(u, v, { weight: g.edge(e).weight + weight });
      });

      if (_.has(node, "minRank")) {
        result.setNode(v, {
          borderLeft: node.borderLeft[rank],
          borderRight: node.borderRight[rank]
        });
      }
    }
  });

  return result;
}

function createRootNode(g) {
  var v;
  while (g.hasNode((v = _.uniqueId("_root"))));
  return v;
}

},{"../lodash":340,"../graphlib":333}],366:[function(require,module,exports) {
var _ = require("../lodash");

module.exports = addSubgraphConstraints;

function addSubgraphConstraints(g, cg, vs) {
  var prev = {},
      rootPrev;

  _.each(vs, function(v) {
    var child = g.parent(v),
        parent,
        prevChild;
    while (child) {
      parent = g.parent(child);
      if (parent) {
        prevChild = prev[parent];
        prev[parent] = child;
      } else {
        prevChild = rootPrev;
        rootPrev = child;
      }
      if (prevChild && prevChild !== child) {
        cg.setEdge(prevChild, child);
        return;
      }
      child = parent;
    }
  });

  /*
  function dfs(v) {
    var children = v ? g.children(v) : g.children();
    if (children.length) {
      var min = Number.POSITIVE_INFINITY,
          subgraphs = [];
      _.each(children, function(child) {
        var childMin = dfs(child);
        if (g.children(child).length) {
          subgraphs.push({ v: child, order: childMin });
        }
        min = Math.min(min, childMin);
      });
      _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
        cg.setEdge(prev.v, curr.v);
        return curr;
      });
      return min;
    }
    return g.node(v).order;
  }
  dfs(undefined);
  */
}

},{"../lodash":340}],355:[function(require,module,exports) {
"use strict";

var _ = require("../lodash"),
    initOrder = require("./init-order"),
    crossCount = require("./cross-count"),
    sortSubgraph = require("./sort-subgraph"),
    buildLayerGraph = require("./build-layer-graph"),
    addSubgraphConstraints = require("./add-subgraph-constraints"),
    Graph = require("../graphlib").Graph,
    util = require("../util");

module.exports = order;

/*
 * Applies heuristics to minimize edge crossings in the graph and sets the best
 * order solution as an order attribute on each node.
 *
 * Pre-conditions:
 *
 *    1. Graph must be DAG
 *    2. Graph nodes must be objects with a "rank" attribute
 *    3. Graph edges must have the "weight" attribute
 *
 * Post-conditions:
 *
 *    1. Graph nodes will have an "order" attribute based on the results of the
 *       algorithm.
 */
function order(g) {
  var maxRank = util.maxRank(g),
      downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), "inEdges"),
      upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), "outEdges");

  var layering = initOrder(g);
  assignOrder(g, layering);

  var bestCC = Number.POSITIVE_INFINITY,
      best;

  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

    layering = util.buildLayerMatrix(g);
    var cc = crossCount(g, layering);
    if (cc < bestCC) {
      lastBest = 0;
      best = _.cloneDeep(layering);
      bestCC = cc;
    }
  }

  assignOrder(g, best);
}

function buildLayerGraphs(g, ranks, relationship) {
  return _.map(ranks, function(rank) {
    return buildLayerGraph(g, rank, relationship);
  });
}

function sweepLayerGraphs(layerGraphs, biasRight) {
  var cg = new Graph();
  _.each(layerGraphs, function(lg) {
    var root = lg.graph().root;
    var sorted = sortSubgraph(lg, root, cg, biasRight);
    _.each(sorted.vs, function(v, i) {
      lg.node(v).order = i;
    });
    addSubgraphConstraints(lg, cg, sorted.vs);
  });
}

function assignOrder(g, layering) {
  _.each(layering, function(layer) {
    _.each(layer, function(v, i) {
      g.node(v).order = i;
    });
  });
}

},{"../lodash":340,"./init-order":362,"./cross-count":363,"./sort-subgraph":364,"./build-layer-graph":365,"./add-subgraph-constraints":366,"../graphlib":333,"../util":336}],361:[function(require,module,exports) {
"use strict";

var _ = require("../lodash"),
    Graph = require("../graphlib").Graph,
    util = require("../util");

/*
 * This module provides coordinate assignment based on Brandes and Köpf, "Fast
 * and Simple Horizontal Coordinate Assignment."
 */

module.exports = {
  positionX: positionX,
  findType1Conflicts: findType1Conflicts,
  findType2Conflicts: findType2Conflicts,
  addConflict: addConflict,
  hasConflict: hasConflict,
  verticalAlignment: verticalAlignment,
  horizontalCompaction: horizontalCompaction,
  alignCoordinates: alignCoordinates,
  findSmallestWidthAlignment: findSmallestWidthAlignment,
  balance: balance
};

/*
 * Marks all edges in the graph with a type-1 conflict with the "type1Conflict"
 * property. A type-1 conflict is one where a non-inner segment crosses an
 * inner segment. An inner segment is an edge with both incident nodes marked
 * with the "dummy" property.
 *
 * This algorithm scans layer by layer, starting with the second, for type-1
 * conflicts between the current layer and the previous layer. For each layer
 * it scans the nodes from left to right until it reaches one that is incident
 * on an inner segment. It then scans predecessors to determine if they have
 * edges that cross that inner segment. At the end a final scan is done for all
 * nodes on the current rank to see if they cross the last visited inner
 * segment.
 *
 * This algorithm (safely) assumes that a dummy node will only be incident on a
 * single node in the layers being scanned.
 */
function findType1Conflicts(g, layering) {
  var conflicts = {};

  function visitLayer(prevLayer, layer) {
    var
      // last visited node in the previous layer that is incident on an inner
      // segment.
      k0 = 0,
      // Tracks the last node in this layer scanned for crossings with a type-1
      // segment.
      scanPos = 0,
      prevLayerLength = prevLayer.length,
      lastNode = _.last(layer);

    _.each(layer, function(v, i) {
      var w = findOtherInnerSegmentNode(g, v),
          k1 = w ? g.node(w).order : prevLayerLength;

      if (w || v === lastNode) {
        _.each(layer.slice(scanPos, i +1), function(scanNode) {
          _.each(g.predecessors(scanNode), function(u) {
            var uLabel = g.node(u),
                uPos = uLabel.order;
            if ((uPos < k0 || k1 < uPos) &&
                !(uLabel.dummy && g.node(scanNode).dummy)) {
              addConflict(conflicts, u, scanNode);
            }
          });
        });
        scanPos = i + 1;
        k0 = k1;
      }
    });

    return layer;
  }

  _.reduce(layering, visitLayer);
  return conflicts;
}

function findType2Conflicts(g, layering) {
  var conflicts = {};

  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
    var v;
    _.each(_.range(southPos, southEnd), function(i) {
      v = south[i];
      if (g.node(v).dummy) {
        _.each(g.predecessors(v), function(u) {
          var uNode = g.node(u);
          if (uNode.dummy &&
              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
            addConflict(conflicts, u, v);
          }
        });
      }
    });
  }


  function visitLayer(north, south) {
    var prevNorthPos = -1,
        nextNorthPos,
        southPos = 0;

    _.each(south, function(v, southLookahead) {
      if (g.node(v).dummy === "border") {
        var predecessors = g.predecessors(v);
        if (predecessors.length) {
          nextNorthPos = g.node(predecessors[0]).order;
          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
          southPos = southLookahead;
          prevNorthPos = nextNorthPos;
        }
      }
      scan(south, southPos, south.length, nextNorthPos, north.length);
    });

    return south;
  }

  _.reduce(layering, visitLayer);
  return conflicts;
}

function findOtherInnerSegmentNode(g, v) {
  if (g.node(v).dummy) {
    return _.find(g.predecessors(v), function(u) {
      return g.node(u).dummy;
    });
  }
}

function addConflict(conflicts, v, w) {
  if (v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }

  var conflictsV = conflicts[v];
  if (!conflictsV) {
    conflicts[v] = conflictsV = {};
  }
  conflictsV[w] = true;
}

function hasConflict(conflicts, v, w) {
  if (v > w) {
    var tmp = v;
    v = w;
    w = tmp;
  }
  return _.has(conflicts[v], w);
}

/*
 * Try to align nodes into vertical "blocks" where possible. This algorithm
 * attempts to align a node with one of its median neighbors. If the edge
 * connecting a neighbor is a type-1 conflict then we ignore that possibility.
 * If a previous node has already formed a block with a node after the node
 * we're trying to form a block with, we also ignore that possibility - our
 * blocks would be split in that scenario.
 */
function verticalAlignment(g, layering, conflicts, neighborFn) {
  var root = {},
      align = {},
      pos = {};

  // We cache the position here based on the layering because the graph and
  // layering may be out of sync. The layering matrix is manipulated to
  // generate different extreme alignments.
  _.each(layering, function(layer) {
    _.each(layer, function(v, order) {
      root[v] = v;
      align[v] = v;
      pos[v] = order;
    });
  });

  _.each(layering, function(layer) {
    var prevIdx = -1;
    _.each(layer, function(v) {
      var ws = neighborFn(v);
      if (ws.length) {
        ws = _.sortBy(ws, function(w) { return pos[w]; });
        var mp = (ws.length - 1) / 2;
        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
          var w = ws[i];
          if (align[v] === v &&
              prevIdx < pos[w] &&
              !hasConflict(conflicts, v, w)) {
            align[w] = v;
            align[v] = root[v] = root[w];
            prevIdx = pos[w];
          }
        }
      }
    });
  });

  return { root: root, align: align };
}

function horizontalCompaction(g, layering, root, align, reverseSep) {
  // This portion of the algorithm differs from BK due to a number of problems.
  // Instead of their algorithm we construct a new block graph and do two
  // sweeps. The first sweep places blocks with the smallest possible
  // coordinates. The second sweep removes unused space by moving blocks to the
  // greatest coordinates without violating separation.
  var xs = {},
      blockG = buildBlockGraph(g, layering, root, reverseSep);

  // First pass, assign smallest coordinates via DFS
  var visited = {};
  function pass1(v) {
    if (!_.has(visited, v)) {
      visited[v] = true;
      xs[v] = _.reduce(blockG.inEdges(v), function(max, e) {
        pass1(e.v);
        return Math.max(max, xs[e.v] + blockG.edge(e));
      }, 0);
    }
  }
  _.each(blockG.nodes(), pass1);

  var borderType = reverseSep ? "borderLeft" : "borderRight";
  function pass2(v) {
    if (visited[v] !== 2) {
      visited[v]++;
      var node = g.node(v);
      var min = _.reduce(blockG.outEdges(v), function(min, e) {
        pass2(e.w);
        return Math.min(min, xs[e.w] - blockG.edge(e));
      }, Number.POSITIVE_INFINITY);
      if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
        xs[v] = Math.max(xs[v], min);
      }
    }
  }
  _.each(blockG.nodes(), pass2);

  // Assign x coordinates to all nodes
  _.each(align, function(v) {
    xs[v] = xs[root[v]];
  });

  return xs;
}


function buildBlockGraph(g, layering, root, reverseSep) {
  var blockGraph = new Graph(),
      graphLabel = g.graph(),
      sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);

  _.each(layering, function(layer) {
    var u;
    _.each(layer, function(v) {
      var vRoot = root[v];
      blockGraph.setNode(vRoot);
      if (u) {
        var uRoot = root[u],
            prevMax = blockGraph.edge(uRoot, vRoot);
        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
      }
      u = v;
    });
  });

  return blockGraph;
}

/*
 * Returns the alignment that has the smallest width of the given alignments.
 */
function findSmallestWidthAlignment(g, xss) {
  return _.min(xss, function(xs) {
    var min = _.min(xs, function(x, v) { return x - width(g, v) / 2; }),
        max = _.max(xs, function(x, v) { return x + width(g, v) / 2; });
    return max - min;
  });
}

/*
 * Align the coordinates of each of the layout alignments such that
 * left-biased alignments have their minimum coordinate at the same point as
 * the minimum coordinate of the smallest width alignment and right-biased
 * alignments have their maximum coordinate at the same point as the maximum
 * coordinate of the smallest width alignment.
 */
function alignCoordinates(xss, alignTo) {
  var alignToMin = _.min(alignTo),
      alignToMax = _.max(alignTo);

  _.each(["u", "d"], function(vert) {
    _.each(["l", "r"], function(horiz) {
      var alignment = vert + horiz,
          xs = xss[alignment],
          delta;
      if (xs === alignTo) return;

      delta = horiz === "l" ? alignToMin - _.min(xs) : alignToMax - _.max(xs);

      if (delta) {
        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });
      }
    });
  });
}

function balance(xss, align) {
  return _.mapValues(xss.ul, function(ignore, v) {
    if (align) {
      return xss[align.toLowerCase()][v];
    } else {
      var xs = _.sortBy(_.pluck(xss, v));
      return (xs[1] + xs[2]) / 2;
    }
  });
}

function positionX(g) {
  var layering = util.buildLayerMatrix(g),
      conflicts = _.merge(findType1Conflicts(g, layering),
                          findType2Conflicts(g, layering));

  var xss = {},
      adjustedLayering;
  _.each(["u", "d"], function(vert) {
    adjustedLayering = vert === "u" ? layering : _.values(layering).reverse();
    _.each(["l", "r"], function(horiz) {
      if (horiz === "r") {
        adjustedLayering = _.map(adjustedLayering, function(inner) {
          return _.values(inner).reverse();
        });
      }

      var neighborFn = _.bind(vert === "u" ? g.predecessors : g.successors, g);
      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
      var xs = horizontalCompaction(g, adjustedLayering,
                                    align.root, align.align,
                                    horiz === "r");
      if (horiz === "r") {
        xs = _.mapValues(xs, function(x) { return -x; });
      }
      xss[vert + horiz] = xs;
    });
  });

  var smallestWidth = findSmallestWidthAlignment(g, xss);
  alignCoordinates(xss, smallestWidth);
  return balance(xss, g.graph().align);
}

function sep(nodeSep, edgeSep, reverseSep) {
  return function(g, v, w) {
    var vLabel = g.node(v),
        wLabel = g.node(w),
        sum = 0,
        delta;

    sum += vLabel.width / 2;
    if (_.has(vLabel, "labelpos")) {
      switch (vLabel.labelpos.toLowerCase()) {
        case "l": delta = -vLabel.width / 2; break;
        case "r": delta = vLabel.width / 2; break;
      }
    }
    if (delta) {
      sum += reverseSep ? delta : -delta;
    }
    delta = 0;

    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;

    sum += wLabel.width / 2;
    if (_.has(wLabel, "labelpos")) {
      switch (wLabel.labelpos.toLowerCase()) {
        case "l": delta = wLabel.width / 2; break;
        case "r": delta = -wLabel.width / 2; break;
      }
    }
    if (delta) {
      sum += reverseSep ? delta : -delta;
    }
    delta = 0;

    return sum;
  };
}

function width(g, v) {
  return g.node(v).width;
}

},{"../lodash":340,"../graphlib":333,"../util":336}],356:[function(require,module,exports) {
"use strict";

var _ = require("../lodash"),
    util = require("../util"),
    positionX = require("./bk").positionX;

module.exports = position;

function position(g) {
  g = util.asNonCompoundGraph(g);

  positionY(g);
  _.each(positionX(g), function(x, v) {
    g.node(v).x = x;
  });
}

function positionY(g) {
  var layering = util.buildLayerMatrix(g),
      rankSep = g.graph().ranksep,
      prevY = 0;
  _.each(layering, function(layer) {
    var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));
    _.each(layer, function(v) {
      g.node(v).y = prevY + maxHeight / 2;
    });
    prevY += maxHeight + rankSep;
  });
}


},{"../lodash":340,"../util":336,"./bk":361}],334:[function(require,module,exports) {
"use strict";

var _ = require("./lodash"),
    acyclic = require("./acyclic"),
    normalize = require("./normalize"),
    rank = require("./rank"),
    normalizeRanks = require("./util").normalizeRanks,
    parentDummyChains = require("./parent-dummy-chains"),
    removeEmptyRanks = require("./util").removeEmptyRanks,
    nestingGraph = require("./nesting-graph"),
    addBorderSegments = require("./add-border-segments"),
    coordinateSystem = require("./coordinate-system"),
    order = require("./order"),
    position = require("./position"),
    util = require("./util"),
    Graph = require("./graphlib").Graph;

module.exports = layout;

function layout(g, opts) {
  var time = opts && opts.debugTiming ? util.time : util.notime;
  time("layout", function() {
    var layoutGraph = time("  buildLayoutGraph",
                               function() { return buildLayoutGraph(g); });
    time("  runLayout",        function() { runLayout(layoutGraph, time); });
    time("  updateInputGraph", function() { updateInputGraph(g, layoutGraph); });
  });
}

function runLayout(g, time) {
  time("    makeSpaceForEdgeLabels", function() { makeSpaceForEdgeLabels(g); });
  time("    removeSelfEdges",        function() { removeSelfEdges(g); });
  time("    acyclic",                function() { acyclic.run(g); });
  time("    nestingGraph.run",       function() { nestingGraph.run(g); });
  time("    rank",                   function() { rank(util.asNonCompoundGraph(g)); });
  time("    injectEdgeLabelProxies", function() { injectEdgeLabelProxies(g); });
  time("    removeEmptyRanks",       function() { removeEmptyRanks(g); });
  time("    nestingGraph.cleanup",   function() { nestingGraph.cleanup(g); });
  time("    normalizeRanks",         function() { normalizeRanks(g); });
  time("    assignRankMinMax",       function() { assignRankMinMax(g); });
  time("    removeEdgeLabelProxies", function() { removeEdgeLabelProxies(g); });
  time("    normalize.run",          function() { normalize.run(g); });
  time("    parentDummyChains",      function() { parentDummyChains(g); });
  time("    addBorderSegments",      function() { addBorderSegments(g); });
  time("    order",                  function() { order(g); });
  time("    insertSelfEdges",        function() { insertSelfEdges(g); });
  time("    adjustCoordinateSystem", function() { coordinateSystem.adjust(g); });
  time("    position",               function() { position(g); });
  time("    positionSelfEdges",      function() { positionSelfEdges(g); });
  time("    removeBorderNodes",      function() { removeBorderNodes(g); });
  time("    normalize.undo",         function() { normalize.undo(g); });
  time("    fixupEdgeLabelCoords",   function() { fixupEdgeLabelCoords(g); });
  time("    undoCoordinateSystem",   function() { coordinateSystem.undo(g); });
  time("    translateGraph",         function() { translateGraph(g); });
  time("    assignNodeIntersects",   function() { assignNodeIntersects(g); });
  time("    reversePoints",          function() { reversePointsForReversedEdges(g); });
  time("    acyclic.undo",           function() { acyclic.undo(g); });
}

/*
 * Copies final layout information from the layout graph back to the input
 * graph. This process only copies whitelisted attributes from the layout graph
 * to the input graph, so it serves as a good place to determine what
 * attributes can influence layout.
 */
function updateInputGraph(inputGraph, layoutGraph) {
  _.each(inputGraph.nodes(), function(v) {
    var inputLabel = inputGraph.node(v),
        layoutLabel = layoutGraph.node(v);

    if (inputLabel) {
      inputLabel.x = layoutLabel.x;
      inputLabel.y = layoutLabel.y;

      if (layoutGraph.children(v).length) {
        inputLabel.width = layoutLabel.width;
        inputLabel.height = layoutLabel.height;
      }
    }
  });

  _.each(inputGraph.edges(), function(e) {
    var inputLabel = inputGraph.edge(e),
        layoutLabel = layoutGraph.edge(e);

    inputLabel.points = layoutLabel.points;
    if (_.has(layoutLabel, "x")) {
      inputLabel.x = layoutLabel.x;
      inputLabel.y = layoutLabel.y;
    }
  });

  inputGraph.graph().width = layoutGraph.graph().width;
  inputGraph.graph().height = layoutGraph.graph().height;
}

var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"],
    graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" },
    graphAttrs = ["acyclicer", "ranker", "rankdir", "align"],
    nodeNumAttrs = ["width", "height"],
    nodeDefaults = { width: 0, height: 0 },
    edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"],
    edgeDefaults = {
      minlen: 1, weight: 1, width: 0, height: 0,
      labeloffset: 10, labelpos: "r"
    },
    edgeAttrs = ["labelpos"];

/*
 * Constructs a new graph from the input graph, which can be used for layout.
 * This process copies only whitelisted attributes from the input graph to the
 * layout graph. Thus this function serves as a good place to determine what
 * attributes can influence layout.
 */
function buildLayoutGraph(inputGraph) {
  var g = new Graph({ multigraph: true, compound: true }),
      graph = canonicalize(inputGraph.graph());

  g.setGraph(_.merge({},
    graphDefaults,
    selectNumberAttrs(graph, graphNumAttrs),
    _.pick(graph, graphAttrs)));

  _.each(inputGraph.nodes(), function(v) {
    var node = canonicalize(inputGraph.node(v));
    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
    g.setParent(v, inputGraph.parent(v));
  });

  _.each(inputGraph.edges(), function(e) {
    var edge = canonicalize(inputGraph.edge(e));
    g.setEdge(e, _.merge({},
      edgeDefaults,
      selectNumberAttrs(edge, edgeNumAttrs),
      _.pick(edge, edgeAttrs)));
  });

  return g;
}

/*
 * This idea comes from the Gansner paper: to account for edge labels in our
 * layout we split each rank in half by doubling minlen and halving ranksep.
 * Then we can place labels at these mid-points between nodes.
 *
 * We also add some minimal padding to the width to push the label for the edge
 * away from the edge itself a bit.
 */
function makeSpaceForEdgeLabels(g) {
  var graph = g.graph();
  graph.ranksep /= 2;
  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    edge.minlen *= 2;
    if (edge.labelpos.toLowerCase() !== "c") {
      if (graph.rankdir === "TB" || graph.rankdir === "BT") {
        edge.width += edge.labeloffset;
      } else {
        edge.height += edge.labeloffset;
      }
    }
  });
}

/*
 * Creates temporary dummy nodes that capture the rank in which each edge's
 * label is going to, if it has one of non-zero width and height. We do this
 * so that we can safely remove empty ranks while preserving balance for the
 * label's position.
 */
function injectEdgeLabelProxies(g) {
  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.width && edge.height) {
      var v = g.node(e.v),
          w = g.node(e.w),
          label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
      util.addDummyNode(g, "edge-proxy", label, "_ep");
    }
  });
}

function assignRankMinMax(g) {
  var maxRank = 0;
  _.each(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.borderTop) {
      node.minRank = g.node(node.borderTop).rank;
      node.maxRank = g.node(node.borderBottom).rank;
      maxRank = _.max(maxRank, node.maxRank);
    }
  });
  g.graph().maxRank = maxRank;
}

function removeEdgeLabelProxies(g) {
  _.each(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.dummy === "edge-proxy") {
      g.edge(node.e).labelRank = node.rank;
      g.removeNode(v);
    }
  });
}

function translateGraph(g) {
  var minX = Number.POSITIVE_INFINITY,
      maxX = 0,
      minY = Number.POSITIVE_INFINITY,
      maxY = 0,
      graphLabel = g.graph(),
      marginX = graphLabel.marginx || 0,
      marginY = graphLabel.marginy || 0;

  function getExtremes(attrs) {
    var x = attrs.x,
        y = attrs.y,
        w = attrs.width,
        h = attrs.height;
    minX = Math.min(minX, x - w / 2);
    maxX = Math.max(maxX, x + w / 2);
    minY = Math.min(minY, y - h / 2);
    maxY = Math.max(maxY, y + h / 2);
  }

  _.each(g.nodes(), function(v) { getExtremes(g.node(v)); });
  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    if (_.has(edge, "x")) {
      getExtremes(edge);
    }
  });

  minX -= marginX;
  minY -= marginY;

  _.each(g.nodes(), function(v) {
    var node = g.node(v);
    node.x -= minX;
    node.y -= minY;
  });

  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    _.each(edge.points, function(p) {
      p.x -= minX;
      p.y -= minY;
    });
    if (_.has(edge, "x")) { edge.x -= minX; }
    if (_.has(edge, "y")) { edge.y -= minY; }
  });

  graphLabel.width = maxX - minX + marginX;
  graphLabel.height = maxY - minY + marginY;
}

function assignNodeIntersects(g) {
  _.each(g.edges(), function(e) {
    var edge = g.edge(e),
        nodeV = g.node(e.v),
        nodeW = g.node(e.w),
        p1, p2;
    if (!edge.points) {
      edge.points = [];
      p1 = nodeW;
      p2 = nodeV;
    } else {
      p1 = edge.points[0];
      p2 = edge.points[edge.points.length - 1];
    }
    edge.points.unshift(util.intersectRect(nodeV, p1));
    edge.points.push(util.intersectRect(nodeW, p2));
  });
}

function fixupEdgeLabelCoords(g) {
  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    if (_.has(edge, "x")) {
      if (edge.labelpos === "l" || edge.labelpos === "r") {
        edge.width -= edge.labeloffset;
      }
      switch (edge.labelpos) {
        case "l": edge.x -= edge.width / 2 + edge.labeloffset; break;
        case "r": edge.x += edge.width / 2 + edge.labeloffset; break;
      }
    }
  });
}

function reversePointsForReversedEdges(g) {
  _.each(g.edges(), function(e) {
    var edge = g.edge(e);
    if (edge.reversed) {
      edge.points.reverse();
    }
  });
}

function removeBorderNodes(g) {
  _.each(g.nodes(), function(v) {
    if (g.children(v).length) {
      var node = g.node(v),
          t = g.node(node.borderTop),
          b = g.node(node.borderBottom),
          l = g.node(_.last(node.borderLeft)),
          r = g.node(_.last(node.borderRight));

      node.width = Math.abs(r.x - l.x);
      node.height = Math.abs(b.y - t.y);
      node.x = l.x + node.width / 2;
      node.y = t.y + node.height / 2;
    }
  });

  _.each(g.nodes(), function(v) {
    if (g.node(v).dummy === "border") {
      g.removeNode(v);
    }
  });
}

function removeSelfEdges(g) {
  _.each(g.edges(), function(e) {
    if (e.v === e.w) {
      var node = g.node(e.v);
      if (!node.selfEdges) {
        node.selfEdges = [];
      }
      node.selfEdges.push({ e: e, label: g.edge(e) });
      g.removeEdge(e);
    }
  });
}

function insertSelfEdges(g) {
  var layers = util.buildLayerMatrix(g);
  _.each(layers, function(layer) {
    var orderShift = 0;
    _.each(layer, function(v, i) {
      var node = g.node(v);
      node.order = i + orderShift;
      _.each(node.selfEdges, function(selfEdge) {
        util.addDummyNode(g, "selfedge", {
          width: selfEdge.label.width,
          height: selfEdge.label.height,
          rank: node.rank,
          order: i + (++orderShift),
          e: selfEdge.e,
          label: selfEdge.label
        }, "_se");
      });
      delete node.selfEdges;
    });
  });
}

function positionSelfEdges(g) {
  _.each(g.nodes(), function(v) {
    var node = g.node(v);
    if (node.dummy === "selfedge") {
      var selfNode = g.node(node.e.v),
          x = selfNode.x + selfNode.width / 2,
          y = selfNode.y,
          dx = node.x - x,
          dy = selfNode.height / 2;
      g.setEdge(node.e, node.label);
      g.removeNode(v);
      node.label.points = [
        { x: x + 2 * dx / 3, y: y - dy },
        { x: x + 5 * dx / 6, y: y - dy },
        { x: x +     dx    , y: y },
        { x: x + 5 * dx / 6, y: y + dy },
        { x: x + 2 * dx / 3, y: y + dy },
      ];
      node.label.x = node.x;
      node.label.y = node.y;
    }
  });
}

function selectNumberAttrs(obj, attrs) {
  return _.mapValues(_.pick(obj, attrs), Number);
}

function canonicalize(attrs) {
  var newAttrs = {};
  _.each(attrs, function(v, k) {
    newAttrs[k.toLowerCase()] = v;
  });
  return newAttrs;
}

},{"./lodash":340,"./acyclic":341,"./normalize":342,"./rank":354,"./util":336,"./parent-dummy-chains":343,"./nesting-graph":344,"./add-border-segments":345,"./coordinate-system":346,"./order":355,"./position":356,"./graphlib":333}],335:[function(require,module,exports) {
var _ = require("./lodash"),
    util = require("./util"),
    Graph = require("./graphlib").Graph;

module.exports = {
  debugOrdering: debugOrdering
};

/* istanbul ignore next */
function debugOrdering(g) {
  var layerMatrix = util.buildLayerMatrix(g);

  var h = new Graph({ compound: true, multigraph: true }).setGraph({});

  _.each(g.nodes(), function(v) {
    h.setNode(v, { label: v });
    h.setParent(v, "layer" + g.node(v).rank);
  });

  _.each(g.edges(), function(e) {
    h.setEdge(e.v, e.w, {}, e.name);
  });

  _.each(layerMatrix, function(layer, i) {
    var layerV = "layer" + i;
    h.setNode(layerV, { rank: "same" });
    _.reduce(layer, function(u, v) {
      h.setEdge(u, v, { style: "invis" });
      return v;
    });
  });

  return h;
}

},{"./lodash":340,"./util":336,"./graphlib":333}],337:[function(require,module,exports) {
module.exports = "0.7.4";

},{}],321:[function(require,module,exports) {
/*
Copyright (c) 2012-2014 Chris Pettitt

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

module.exports = {
  graphlib: require("./lib/graphlib"),

  layout: require("./lib/layout"),
  debug: require("./lib/debug"),
  util: {
    time: require("./lib/util").time,
    notime: require("./lib/util").notime
  },
  version: require("./lib/version")
};

},{"./lib/graphlib":333,"./lib/layout":334,"./lib/debug":335,"./lib/util":336,"./lib/version":337}],258:[function(require,module,exports) {
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("dagre"));
	else if(typeof define === 'function' && define.amd)
		define(["dagre"], factory);
	else if(typeof exports === 'object')
		exports["cytoscapeDagre"] = factory(require("dagre"));
	else
		root["cytoscapeDagre"] = factory(root["dagre"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isFunction = function isFunction(o) {
  return typeof o === 'function';
};
var defaults = __webpack_require__(2);
var assign = __webpack_require__(1);
var dagre = __webpack_require__(4);

// constructor
// options : object containing layout options
function DagreLayout(options) {
  this.options = assign({}, defaults, options);
}

// runs the layout
DagreLayout.prototype.run = function () {
  var options = this.options;
  var layout = this;

  var cy = options.cy; // cy is automatically populated for us in the constructor
  var eles = options.eles;

  var getVal = function getVal(ele, val) {
    return isFunction(val) ? val.apply(ele, [ele]) : val;
  };

  var bb = options.boundingBox || { x1: 0, y1: 0, w: cy.width(), h: cy.height() };
  if (bb.x2 === undefined) {
    bb.x2 = bb.x1 + bb.w;
  }
  if (bb.w === undefined) {
    bb.w = bb.x2 - bb.x1;
  }
  if (bb.y2 === undefined) {
    bb.y2 = bb.y1 + bb.h;
  }
  if (bb.h === undefined) {
    bb.h = bb.y2 - bb.y1;
  }

  var g = new dagre.graphlib.Graph({
    multigraph: true,
    compound: true
  });

  var gObj = {};
  var setGObj = function setGObj(name, val) {
    if (val != null) {
      gObj[name] = val;
    }
  };

  setGObj('nodesep', options.nodeSep);
  setGObj('edgesep', options.edgeSep);
  setGObj('ranksep', options.rankSep);
  setGObj('rankdir', options.rankDir);
  setGObj('ranker', options.ranker);

  g.setGraph(gObj);

  g.setDefaultEdgeLabel(function () {
    return {};
  });
  g.setDefaultNodeLabel(function () {
    return {};
  });

  // add nodes to dagre
  var nodes = eles.nodes();
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    var nbb = node.layoutDimensions(options);

    g.setNode(node.id(), {
      width: nbb.w,
      height: nbb.h,
      name: node.id()
    });

    // console.log( g.node(node.id()) );
  }

  // set compound parents
  for (var _i = 0; _i < nodes.length; _i++) {
    var _node = nodes[_i];

    if (_node.isChild()) {
      g.setParent(_node.id(), _node.parent().id());
    }
  }

  // add edges to dagre
  var edges = eles.edges().stdFilter(function (edge) {
    return !edge.source().isParent() && !edge.target().isParent(); // dagre can't handle edges on compound nodes
  });
  for (var _i2 = 0; _i2 < edges.length; _i2++) {
    var edge = edges[_i2];

    g.setEdge(edge.source().id(), edge.target().id(), {
      minlen: getVal(edge, options.minLen),
      weight: getVal(edge, options.edgeWeight),
      name: edge.id()
    }, edge.id());

    // console.log( g.edge(edge.source().id(), edge.target().id(), edge.id()) );
  }

  dagre.layout(g);

  var gNodeIds = g.nodes();
  for (var _i3 = 0; _i3 < gNodeIds.length; _i3++) {
    var id = gNodeIds[_i3];
    var n = g.node(id);

    cy.getElementById(id).scratch().dagre = n;
  }

  var dagreBB = void 0;

  if (options.boundingBox) {
    dagreBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };
    nodes.forEach(function (node) {
      var dModel = node.scratch().dagre;

      dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);
      dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);

      dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);
      dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);
    });

    dagreBB.w = dagreBB.x2 - dagreBB.x1;
    dagreBB.h = dagreBB.y2 - dagreBB.y1;
  } else {
    dagreBB = bb;
  }

  var constrainPos = function constrainPos(p) {
    if (options.boundingBox) {
      var xPct = dagreBB.w === 0 ? 0 : (p.x - dagreBB.x1) / dagreBB.w;
      var yPct = dagreBB.h === 0 ? 0 : (p.y - dagreBB.y1) / dagreBB.h;

      return {
        x: bb.x1 + xPct * bb.w,
        y: bb.y1 + yPct * bb.h
      };
    } else {
      return p;
    }
  };

  nodes.layoutPositions(layout, options, function (ele) {
    ele = (typeof ele === 'undefined' ? 'undefined' : _typeof(ele)) === "object" ? ele : this;
    var dModel = ele.scratch().dagre;

    return constrainPos({
      x: dModel.x,
      y: dModel.y
    });
  });

  return this; // chaining
};

module.exports = DagreLayout;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Simple, internal Object.assign() polyfill for options objects etc.

module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    srcs[_key - 1] = arguments[_key];
  }

  srcs.forEach(function (src) {
    Object.keys(src).forEach(function (k) {
      return tgt[k] = src[k];
    });
  });

  return tgt;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = {
  // dagre algo options, uses default value on undefined
  nodeSep: undefined, // the separation between adjacent nodes in the same rank
  edgeSep: undefined, // the separation between adjacent edges in the same rank
  rankSep: undefined, // the separation between adjacent nodes in the same rank
  rankDir: undefined, // 'TB' for top to bottom flow, 'LR' for left to right,
  ranker: undefined, // Type of algorithm to assigns a rank to each node in the input graph.
  // Possible values: network-simplex, tight-tree or longest-path
  minLen: function minLen(edge) {
    return 1;
  }, // number of ranks to keep between the source and target of the edge
  edgeWeight: function edgeWeight(edge) {
    return 1;
  }, // higher weight edges are generally made shorter and straighter than lower weight edges

  // general layout options
  fit: true, // whether to fit to viewport
  padding: 30, // fit padding
  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
  nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node
  animate: false, // whether to transition the node positions
  animateFilter: function animateFilter(node, i) {
    return true;
  }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
  animationDuration: 500, // duration of animation in ms if enabled
  animationEasing: undefined, // easing of animation if enabled
  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
  transform: function transform(node, pos) {
    return pos;
  }, // a function that applies a transform to the final node position
  ready: function ready() {}, // on layoutready
  stop: function stop() {} // on layoutstop
};

module.exports = defaults;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var impl = __webpack_require__(0);

// registers the extension on a cytoscape lib ref
var register = function register(cytoscape) {
  if (!cytoscape) {
    return;
  } // can't register if cytoscape unspecified

  cytoscape('layout', 'dagre', impl); // register with cytoscape.js
};

if (typeof cytoscape !== 'undefined') {
  // expose to global cytoscape (i.e. window.cytoscape)
  register(cytoscape);
}

module.exports = register;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ })
/******/ ]);
});
},{"dagre":321}],10:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cytoscape = require('cytoscape');

var _cytoscape2 = _interopRequireDefault(_cytoscape);

var _cytoscapeDagre = require('cytoscape-dagre');

var _cytoscapeDagre2 = _interopRequireDefault(_cytoscapeDagre);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_cytoscape2.default.use(_cytoscapeDagre2.default);

var cy = (0, _cytoscape2.default)({
  container: document.getElementById('cy'),
  boxSelectionEnabled: false,
  autounselectify: true,

  style: [{
    selector: 'node',
    style: {
      'content': 'data(name)',
      'text-valign': 'center',
      'text-halign': 'center',
      'background-color': '#11479e',
      'color': 'white'
    }
  }, {
    selector: 'edge',
    style: {
      'curve-style': 'bezier',
      'width': 4,
      'target-arrow-shape': 'triangle',
      'line-color': '#9dbaea',
      'target-arrow-color': '#9dbaea'
    }
  }]
});

exports.default = cy;
},{"cytoscape":257,"cytoscape-dagre":258}],322:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
       value: true
});
exports.default = _isPlaceholder;
function _isPlaceholder(a) {
       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}
},{}],260:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _curry1;

var _isPlaceholder2 = require('./_isPlaceholder');

var _isPlaceholder3 = _interopRequireDefault(_isPlaceholder2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || (0, _isPlaceholder3.default)(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}
},{"./_isPlaceholder":322}],19:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      var t = R.always('Tee');
 *      t(); //=> 'Tee'
 */
var always = /*#__PURE__*/(0, _curry2.default)(function always(val) {
  return function () {
    return val;
  };
});
exports.default = always;
},{"./internal/_curry1":260}],11:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _always = require('./always');

var _always2 = _interopRequireDefault(_always);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function that always returns `false`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.T
 * @example
 *
 *      R.F(); //=> false
 */
var F = /*#__PURE__*/(0, _always2.default)(false);
exports.default = F;
},{"./always":19}],12:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _always = require('./always');

var _always2 = _interopRequireDefault(_always);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function that always returns `true`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.F
 * @example
 *
 *      R.T(); //=> true
 */
var T = /*#__PURE__*/(0, _always2.default)(true);
exports.default = T;
},{"./always":19}],13:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * A special placeholder value used to specify "gaps" within curried functions,
 * allowing partial application of any combination of arguments, regardless of
 * their positions.
 *
 * If `g` is a curried ternary function and `_` is `R.__`, the following are
 * equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2, _)(1, 3)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @constant
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @example
 *
 *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
 *      greet('Alice'); //=> 'Hello, Alice!'
 */
exports.default = { '@@functional/placeholder': true };
},{}],262:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _curry2;

var _curry = require('./_curry1');

var _curry3 = _interopRequireDefault(_curry);

var _isPlaceholder2 = require('./_isPlaceholder');

var _isPlaceholder3 = _interopRequireDefault(_isPlaceholder2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return (0, _isPlaceholder3.default)(a) ? f2 : (0, _curry3.default)(function (_b) {
          return fn(a, _b);
        });
      default:
        return (0, _isPlaceholder3.default)(a) && (0, _isPlaceholder3.default)(b) ? f2 : (0, _isPlaceholder3.default)(a) ? (0, _curry3.default)(function (_a) {
          return fn(_a, b);
        }) : (0, _isPlaceholder3.default)(b) ? (0, _curry3.default)(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}
},{"./_curry1":260,"./_isPlaceholder":322}],14:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Adds two values.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 * @see R.subtract
 * @example
 *
 *      R.add(2, 3);       //=>  5
 *      R.add(7)(10);      //=> 17
 */
var add = /*#__PURE__*/(0, _curry3.default)(function add(a, b) {
  return Number(a) + Number(b);
});
exports.default = add;
},{"./internal/_curry2":262}],259:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _concat;
/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];

  idx = 0;
  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }
  return result;
}
},{}],272:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _arity;
function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };
    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
}
},{}],280:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _curryN;

var _arity2 = require('./_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _isPlaceholder2 = require('./_isPlaceholder');

var _isPlaceholder3 = _interopRequireDefault(_isPlaceholder2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!(0, _isPlaceholder3.default)(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!(0, _isPlaceholder3.default)(result)) {
        left -= 1;
      }
      combinedIdx += 1;
    }
    return left <= 0 ? fn.apply(this, combined) : (0, _arity3.default)(left, _curryN(length, combined, fn));
  };
}
},{"./_arity":272,"./_isPlaceholder":322}],52:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _curry = require('./internal/_curry1');

var _curry3 = _interopRequireDefault(_curry);

var _curry4 = require('./internal/_curry2');

var _curry5 = _interopRequireDefault(_curry4);

var _curryN2 = require('./internal/_curryN');

var _curryN3 = _interopRequireDefault(_curryN2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      var sumArgs = (...args) => R.sum(args);
 *
 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
var curryN = /*#__PURE__*/(0, _curry5.default)(function curryN(length, fn) {
  if (length === 1) {
    return (0, _curry3.default)(fn);
  }
  return (0, _arity3.default)(length, (0, _curryN3.default)(length, [], fn));
});
exports.default = curryN;
},{"./internal/_arity":272,"./internal/_curry1":260,"./internal/_curry2":262,"./internal/_curryN":280}],15:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new list iteration function from an existing one by adding two new
 * parameters to its callback function: the current index, and the entire list.
 *
 * This would turn, for instance, [`R.map`](#map) function into one that
 * more closely resembles `Array.prototype.map`. Note that this will only work
 * for functions in which the iteration callback function is the first
 * parameter, and where the list is the last parameter. (This latter might be
 * unimportant if the list parameter is not used.)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Function
 * @category List
 * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
 * @param {Function} fn A list iteration function that does not pass index or list to its callback
 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
 * @example
 *
 *      var mapIndexed = R.addIndex(R.map);
 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
 */
var addIndex = /*#__PURE__*/(0, _curry2.default)(function addIndex(fn) {
  return (0, _curryN2.default)(fn.length, function () {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function () {
      var result = origFn.apply(this, (0, _concat3.default)(arguments, [idx, list]));
      idx += 1;
      return result;
    };
    return fn.apply(this, args);
  });
});
exports.default = addIndex;
},{"./internal/_concat":259,"./internal/_curry1":260,"./curryN":52}],261:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _curry3;

var _curry = require('./_curry1');

var _curry4 = _interopRequireDefault(_curry);

var _curry5 = require('./_curry2');

var _curry6 = _interopRequireDefault(_curry5);

var _isPlaceholder2 = require('./_isPlaceholder');

var _isPlaceholder3 = _interopRequireDefault(_isPlaceholder2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return (0, _isPlaceholder3.default)(a) ? f3 : (0, _curry6.default)(function (_b, _c) {
          return fn(a, _b, _c);
        });
      case 2:
        return (0, _isPlaceholder3.default)(a) && (0, _isPlaceholder3.default)(b) ? f3 : (0, _isPlaceholder3.default)(a) ? (0, _curry6.default)(function (_a, _c) {
          return fn(_a, b, _c);
        }) : (0, _isPlaceholder3.default)(b) ? (0, _curry6.default)(function (_b, _c) {
          return fn(a, _b, _c);
        }) : (0, _curry4.default)(function (_c) {
          return fn(a, b, _c);
        });
      default:
        return (0, _isPlaceholder3.default)(a) && (0, _isPlaceholder3.default)(b) && (0, _isPlaceholder3.default)(c) ? f3 : (0, _isPlaceholder3.default)(a) && (0, _isPlaceholder3.default)(b) ? (0, _curry6.default)(function (_a, _b) {
          return fn(_a, _b, c);
        }) : (0, _isPlaceholder3.default)(a) && (0, _isPlaceholder3.default)(c) ? (0, _curry6.default)(function (_a, _c) {
          return fn(_a, b, _c);
        }) : (0, _isPlaceholder3.default)(b) && (0, _isPlaceholder3.default)(c) ? (0, _curry6.default)(function (_b, _c) {
          return fn(a, _b, _c);
        }) : (0, _isPlaceholder3.default)(a) ? (0, _curry4.default)(function (_a) {
          return fn(_a, b, c);
        }) : (0, _isPlaceholder3.default)(b) ? (0, _curry4.default)(function (_b) {
          return fn(a, _b, c);
        }) : (0, _isPlaceholder3.default)(c) ? (0, _curry4.default)(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}
},{"./_curry1":260,"./_curry2":262,"./_isPlaceholder":322}],16:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Applies a function to the value at the given index of an array, returning a
 * new copy of the array with the element at the given index replaced with the
 * result of the function application.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a -> a) -> Number -> [a] -> [a]
 * @param {Function} fn The function to apply.
 * @param {Number} idx The index.
 * @param {Array|Arguments} list An array-like object whose value
 *        at the supplied index will be replaced.
 * @return {Array} A copy of the supplied array-like object with
 *         the element at index `idx` replaced with the value
 *         returned by applying `fn` to the existing element.
 * @see R.update
 * @example
 *
 *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]
 *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]
 * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]
 * @symb R.adjust(f, 0, [a, b]) = [f(a), b]
 */
var adjust = /*#__PURE__*/(0, _curry2.default)(function adjust(fn, idx, list) {
  if (idx >= list.length || idx < -list.length) {
    return list;
  }
  var start = idx < 0 ? list.length : 0;
  var _idx = start + idx;
  var _list = (0, _concat3.default)(list);
  _list[_idx] = fn(list[_idx]);
  return _list;
});
exports.default = adjust;
},{"./internal/_concat":259,"./internal/_curry3":261}],270:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
exports.default = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
};
},{}],301:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _isTransformer;
function _isTransformer(obj) {
  return typeof obj['@@transducer/step'] === 'function';
}
},{}],263:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _dispatchable;

var _isArray2 = require('./_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isTransformer2 = require('./_isTransformer');

var _isTransformer3 = _interopRequireDefault(_isTransformer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */
function _dispatchable(methodNames, xf, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }
    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();
    if (!(0, _isArray3.default)(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }
        idx += 1;
      }
      if ((0, _isTransformer3.default)(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
}
},{"./_isArray":270,"./_isTransformer":301}],312:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _reduced;
function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x : {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}
},{}],323:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
};
},{}],264:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduced2 = require('./_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XAll = /*#__PURE__*/function () {
  function XAll(f, xf) {
    this.xf = xf;
    this.f = f;
    this.all = true;
  }
  XAll.prototype['@@transducer/init'] = _xfBase3.default.init;
  XAll.prototype['@@transducer/result'] = function (result) {
    if (this.all) {
      result = this.xf['@@transducer/step'](result, true);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAll.prototype['@@transducer/step'] = function (result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = (0, _reduced3.default)(this.xf['@@transducer/step'](result, false));
    }
    return result;
  };

  return XAll;
}();

var _xall = /*#__PURE__*/(0, _curry3.default)(function _xall(f, xf) {
  return new XAll(f, xf);
});
exports.default = _xall;
},{"./_curry2":262,"./_reduced":312,"./_xfBase":323}],17:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xall2 = require('./internal/_xall');

var _xall3 = _interopRequireDefault(_xall2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if all elements of the list match the predicate, `false` if
 * there are any that don't.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
 *         otherwise.
 * @see R.any, R.none, R.transduce
 * @example
 *
 *      var equals3 = R.equals(3);
 *      R.all(equals3)([3, 3, 3, 3]); //=> true
 *      R.all(equals3)([3, 3, 1, 3]); //=> false
 */
var all = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['all'], _xall3.default, function all(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }
    idx += 1;
  }
  return true;
}));
exports.default = all;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xall":264}],131:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */
var max = /*#__PURE__*/(0, _curry3.default)(function max(a, b) {
  return b > a ? b : a;
});
exports.default = max;
},{"./internal/_curry2":262}],279:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _map;
function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
}
},{}],276:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _isString;
function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
}
},{}],324:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _isArray2 = require('./_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isString2 = require('./_isString');

var _isString3 = _interopRequireDefault(_isString2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Tests whether or not an object is similar to an array.
 *
 * @private
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @example
 *
 *      _isArrayLike([]); //=> true
 *      _isArrayLike(true); //=> false
 *      _isArrayLike({}); //=> false
 *      _isArrayLike({length: 10}); //=> false
 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */
var _isArrayLike = /*#__PURE__*/(0, _curry2.default)(function isArrayLike(x) {
  if ((0, _isArray3.default)(x)) {
    return true;
  }
  if (!x) {
    return false;
  }
  if (typeof x !== 'object') {
    return false;
  }
  if ((0, _isString3.default)(x)) {
    return false;
  }
  if (x.nodeType === 1) {
    return !!x.length;
  }
  if (x.length === 0) {
    return true;
  }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});
exports.default = _isArrayLike;
},{"./_curry1":260,"./_isArray":270,"./_isString":276}],318:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _xwrap;
var XWrap = /*#__PURE__*/function () {
  function XWrap(fn) {
    this.f = fn;
  }
  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };
  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };
  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return XWrap;
}();

function _xwrap(fn) {
  return new XWrap(fn);
}
},{}],33:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      var log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */
var bind = /*#__PURE__*/(0, _curry3.default)(function bind(fn, thisObj) {
  return (0, _arity3.default)(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});
exports.default = bind;
},{"./internal/_arity":272,"./internal/_curry2":262}],266:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _reduce;

var _isArrayLike2 = require('./_isArrayLike');

var _isArrayLike3 = _interopRequireDefault(_isArrayLike2);

var _xwrap2 = require('./_xwrap');

var _xwrap3 = _interopRequireDefault(_xwrap2);

var _bind = require('../bind');

var _bind2 = _interopRequireDefault(_bind);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);
    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }
    idx += 1;
  }
  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);
    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }
    step = iter.next();
  }
  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName]((0, _bind2.default)(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = (0, _xwrap3.default)(fn);
  }
  if ((0, _isArrayLike3.default)(list)) {
    return _arrayReduce(fn, acc, list);
  }
  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }
  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }
  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }
  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}
},{"./_isArrayLike":324,"./_xwrap":318,"../bind":33}],304:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XMap = /*#__PURE__*/function () {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XMap.prototype['@@transducer/init'] = _xfBase3.default.init;
  XMap.prototype['@@transducer/result'] = _xfBase3.default.result;
  XMap.prototype['@@transducer/step'] = function (result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return XMap;
}();

var _xmap = /*#__PURE__*/(0, _curry3.default)(function _xmap(f, xf) {
  return new XMap(f, xf);
});
exports.default = _xmap;
},{"./_curry2":262,"./_xfBase":323}],269:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _has;
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
},{}],288:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _has2 = require('./_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toString = Object.prototype.toString;
var _isArguments = function () {
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return (0, _has3.default)('callee', x);
  };
};

exports.default = _isArguments;
},{"./_has":269}],112:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

var _isArguments2 = require('./internal/_isArguments');

var _isArguments3 = _interopRequireDefault(_isArguments2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// cover IE < 9 keys issues
var hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
// Safari bug
var hasArgsEnumBug = /*#__PURE__*/function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }
    idx += 1;
  }
  return false;
};

/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @see R.keysIn, R.values
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */
var _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
} : function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }
  var prop, nIdx;
  var ks = [];
  var checkArgsLength = hasArgsEnumBug && (0, _isArguments3.default)(obj);
  for (prop in obj) {
    if ((0, _has3.default)(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];
      if ((0, _has3.default)(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }
      nIdx -= 1;
    }
  }
  return ks;
};
var keys = /*#__PURE__*/(0, _curry2.default)(_keys);
exports.default = keys;
},{"./internal/_curry1":260,"./internal/_has":269,"./internal/_isArguments":288}],125:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _map2 = require('./internal/_map');

var _map3 = _interopRequireDefault(_map2);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _xmap2 = require('./internal/_xmap');

var _xmap3 = _interopRequireDefault(_xmap2);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      var double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */
var map = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['fantasy-land/map', 'map'], _xmap3.default, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return (0, _curryN2.default)(functor.length, function () {
        return fn.call(this, functor.apply(this, arguments));
      });
    case '[object Object]':
      return (0, _reduce3.default)(function (acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, (0, _keys2.default)(functor));
    default:
      return (0, _map3.default)(fn, functor);
  }
}));
exports.default = map;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_map":279,"./internal/_reduce":266,"./internal/_xmap":304,"./curryN":52,"./keys":112}],166:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 */
var path = /*#__PURE__*/(0, _curry3.default)(function path(paths, obj) {
  var val = obj;
  var idx = 0;
  while (idx < paths.length) {
    if (val == null) {
      return;
    }
    val = val[paths[idx]];
    idx += 1;
  }
  return val;
});
exports.default = path;
},{"./internal/_curry2":262}],180:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _path = require('./path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig s -> {s: a} -> a | Undefined
 * @param {String} p The property name
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 */

var prop = /*#__PURE__*/(0, _curry3.default)(function prop(p, obj) {
  return (0, _path2.default)([p], obj);
});
exports.default = prop;
},{"./internal/_curry2":262,"./path":166}],176:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _prop = require('./prop');

var _prop2 = _interopRequireDefault(_prop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * `pluck` will work on
 * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
 * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => k -> f {k: v} -> f v
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} f The array or functor to consider.
 * @return {Array} The list of values for the given key.
 * @see R.props
 * @example
 *
 *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
 *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
 *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */
var pluck = /*#__PURE__*/(0, _curry3.default)(function pluck(p, list) {
  return (0, _map2.default)((0, _prop2.default)(p), list);
});
exports.default = pluck;
},{"./internal/_curry2":262,"./map":125,"./prop":180}],187:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * [`R.reduced`](#reduced) to shortcut the iteration.
 *
 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
 * is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present. When
 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
 * shortcuting, as this is not implemented by `reduce`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *      //          -               -10
 *      //         / \              / \
 *      //        -   4           -6   4
 *      //       / \              / \
 *      //      -   3   ==>     -3   3
 *      //     / \              / \
 *      //    -   2           -1   2
 *      //   / \              / \
 *      //  0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */
var reduce = /*#__PURE__*/(0, _curry2.default)(_reduce3.default);
exports.default = reduce;
},{"./internal/_curry3":261,"./internal/_reduce":266}],18:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _max = require('./max');

var _max2 = _interopRequireDefault(_max);

var _pluck = require('./pluck');

var _pluck2 = _interopRequireDefault(_pluck);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if every one of the provided predicates is satisfied
 * by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.anyPass
 * @example
 *
 *      var isQueen = R.propEq('rank', 'Q');
 *      var isSpade = R.propEq('suit', '♠︎');
 *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
 *
 *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
 *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
 */
var allPass = /*#__PURE__*/(0, _curry2.default)(function allPass(preds) {
  return (0, _curryN2.default)((0, _reduce2.default)(_max2.default, 0, (0, _pluck2.default)('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});
exports.default = allPass;
},{"./internal/_curry1":260,"./curryN":52,"./max":131,"./pluck":176,"./reduce":187}],20:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if both arguments are `true`; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if it is falsy, otherwise the second argument.
 * @see R.both
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */
var and = /*#__PURE__*/(0, _curry3.default)(function and(a, b) {
  return a && b;
});
exports.default = and;
},{"./internal/_curry2":262}],265:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduced2 = require('./_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XAny = /*#__PURE__*/function () {
  function XAny(f, xf) {
    this.xf = xf;
    this.f = f;
    this.any = false;
  }
  XAny.prototype['@@transducer/init'] = _xfBase3.default.init;
  XAny.prototype['@@transducer/result'] = function (result) {
    if (!this.any) {
      result = this.xf['@@transducer/step'](result, false);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAny.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.any = true;
      result = (0, _reduced3.default)(this.xf['@@transducer/step'](result, true));
    }
    return result;
  };

  return XAny;
}();

var _xany = /*#__PURE__*/(0, _curry3.default)(function _xany(f, xf) {
  return new XAny(f, xf);
});
exports.default = _xany;
},{"./_curry2":262,"./_reduced":312,"./_xfBase":323}],21:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xany2 = require('./internal/_xany');

var _xany3 = _interopRequireDefault(_xany2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if at least one of elements of the list match the predicate,
 * `false` otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
 *         otherwise.
 * @see R.all, R.none, R.transduce
 * @example
 *
 *      var lessThan0 = R.flip(R.lt)(0);
 *      var lessThan2 = R.flip(R.lt)(2);
 *      R.any(lessThan0)([1, 2]); //=> false
 *      R.any(lessThan2)([1, 2]); //=> true
 */
var any = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['any'], _xany3.default, function any(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}));
exports.default = any;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xany":265}],22:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _max = require('./max');

var _max2 = _interopRequireDefault(_max);

var _pluck = require('./pluck');

var _pluck2 = _interopRequireDefault(_pluck);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      var isClub = R.propEq('suit', '♣');
 *      var isSpade = R.propEq('suit', '♠');
 *      var isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
 */
var anyPass = /*#__PURE__*/(0, _curry2.default)(function anyPass(preds) {
  return (0, _curryN2.default)((0, _reduce2.default)(_max2.default, 0, (0, _pluck2.default)('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }
      idx += 1;
    }
    return false;
  });
});
exports.default = anyPass;
},{"./internal/_curry1":260,"./curryN":52,"./max":131,"./pluck":176,"./reduce":187}],23:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @sig (a -> b -> c) -> (a -> b) -> (a -> c)
 * @param {*} applyF
 * @param {*} applyX
 * @return {*}
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 *
 *      // R.ap can also be used as S combinator
 *      // when only two functions are passed
 *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */
var ap = /*#__PURE__*/(0, _curry3.default)(function ap(applyF, applyX) {
  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
    return applyF(x)(applyX(x));
  } :
  // else
  (0, _reduce3.default)(function (acc, f) {
    return (0, _concat3.default)(acc, (0, _map2.default)(f, applyX));
  }, [], applyF);
});
exports.default = ap;
},{"./internal/_concat":259,"./internal/_curry2":262,"./internal/_reduce":266,"./map":125}],267:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _aperture;
function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);
  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }
  return acc;
}
},{}],268:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XAperture = /*#__PURE__*/function () {
  function XAperture(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XAperture.prototype['@@transducer/init'] = _xfBase3.default.init;
  XAperture.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XAperture.prototype['@@transducer/step'] = function (result, input) {
    this.store(input);
    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
  };
  XAperture.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  XAperture.prototype.getCopy = function () {
    return (0, _concat3.default)(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
  };

  return XAperture;
}();

var _xaperture = /*#__PURE__*/(0, _curry3.default)(function _xaperture(n, xf) {
  return new XAperture(n, xf);
});
exports.default = _xaperture;
},{"./_concat":259,"./_curry2":262,"./_xfBase":323}],24:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _aperture2 = require('./internal/_aperture');

var _aperture3 = _interopRequireDefault(_aperture2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xaperture2 = require('./internal/_xaperture');

var _xaperture3 = _interopRequireDefault(_xaperture2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list, composed of n-tuples of consecutive elements. If `n` is
 * greater than the length of the list, an empty list is returned.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @param {Number} n The size of the tuples to create
 * @param {Array} list The list to split into `n`-length tuples
 * @return {Array} The resulting list of `n`-length tuples
 * @see R.transduce
 * @example
 *
 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
 */
var aperture = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xaperture3.default, _aperture3.default));
exports.default = aperture;
},{"./internal/_aperture":267,"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xaperture":268}],25:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing the contents of the given list, followed by
 * the given element.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The element to add to the end of the new list.
 * @param {Array} list The list of elements to add a new item to.
 *        list.
 * @return {Array} A new list containing the elements of the old list followed by `el`.
 * @see R.prepend
 * @example
 *
 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
 *      R.append('tests', []); //=> ['tests']
 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
 */
var append = /*#__PURE__*/(0, _curry3.default)(function append(el, list) {
  return (0, _concat3.default)(list, [el]);
});
exports.default = append;
},{"./internal/_concat":259,"./internal/_curry2":262}],26:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Applies function `fn` to the argument list `args`. This is useful for
 * creating a fixed-arity function from a variadic function. `fn` should be a
 * bound function if context is significant.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> a) -> [*] -> a
 * @param {Function} fn The function which will be called with `args`
 * @param {Array} args The arguments to call `fn` with
 * @return {*} result The result, equivalent to `fn(...args)`
 * @see R.call, R.unapply
 * @example
 *
 *      var nums = [1, 2, 3, -99, 42, 6, 7];
 *      R.apply(Math.max, nums); //=> 42
 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
 */
var apply = /*#__PURE__*/(0, _curry3.default)(function apply(fn, args) {
  return fn.apply(this, args);
});
exports.default = apply;
},{"./internal/_curry2":262}],246:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @see R.valuesIn, R.keys
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */
var values = /*#__PURE__*/(0, _curry2.default)(function values(obj) {
  var props = (0, _keys2.default)(obj);
  var len = props.length;
  var vals = [];
  var idx = 0;
  while (idx < len) {
    vals[idx] = obj[props[idx]];
    idx += 1;
  }
  return vals;
});
exports.default = values;
},{"./internal/_curry1":260,"./keys":112}],27:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _apply = require('./apply');

var _apply2 = _interopRequireDefault(_apply);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _max = require('./max');

var _max2 = _interopRequireDefault(_max);

var _pluck = require('./pluck');

var _pluck2 = _interopRequireDefault(_pluck);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _values = require('./values');

var _values2 = _interopRequireDefault(_values);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a spec object recursively mapping properties to functions, creates a
 * function producing an object of the same structure, by mapping each property
 * to the result of calling its associated function with the supplied arguments.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
 * @param {Object} spec an object recursively mapping properties to functions for
 *        producing the values for these properties.
 * @return {Function} A function that returns an object of the same structure
 * as `spec', with each property set to the value returned by calling its
 * associated function with the supplied arguments.
 * @see R.converge, R.juxt
 * @example
 *
 *      var getMetrics = R.applySpec({
 *        sum: R.add,
 *        nested: { mul: R.multiply }
 *      });
 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
 */
var applySpec = /*#__PURE__*/(0, _curry2.default)(function applySpec(spec) {
  spec = (0, _map2.default)(function (v) {
    return typeof v == 'function' ? v : applySpec(v);
  }, spec);
  return (0, _curryN2.default)((0, _reduce2.default)(_max2.default, 0, (0, _pluck2.default)('length', (0, _values2.default)(spec))), function () {
    var args = arguments;
    return (0, _map2.default)(function (f) {
      return (0, _apply2.default)(f, args);
    }, spec);
  });
});
exports.default = applySpec;
},{"./internal/_curry1":260,"./apply":26,"./curryN":52,"./map":125,"./max":131,"./pluck":176,"./reduce":187,"./values":246}],28:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Takes a value and applies a function to it.
*
* This function is also known as the `thrush` combinator.
*
* @func
* @memberOf R
 * @since v0.25.0
* @category Function
* @sig a -> (a -> b) -> b
* @param {*} x The value
* @param {Function} f The function to apply
* @return {*} The result of applying `f` to `x`
* @example
*
*      var t42 = R.applyTo(42);
*      t42(R.identity); //=> 42
*      t42(R.add(1)); //=> 43
*/
var applyTo = /*#__PURE__*/(0, _curry3.default)(function applyTo(x, f) {
  return f(x);
});
exports.default = applyTo;
},{"./internal/_curry2":262}],29:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes an ascending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
 * @see R.descend
 * @example
 *
 *      var byAge = R.ascend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByYoungestFirst = R.sort(byAge, people);
 */
var ascend = /*#__PURE__*/(0, _curry2.default)(function ascend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});
exports.default = ascend;
},{"./internal/_curry3":261}],30:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes a shallow clone of an object, setting or overriding the specified
 * property with the given value. Note that this copies and flattens prototype
 * properties onto the new object as well. All non-primitive properties are
 * copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {String} prop The property name to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except for the changed property.
 * @see R.dissoc
 * @example
 *
 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
 */
var assoc = /*#__PURE__*/(0, _curry2.default)(function assoc(prop, val, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop] = val;
  return result;
});
exports.default = assoc;
},{"./internal/_curry3":261}],271:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
exports.default = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};
},{}],109:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */
var isNil = /*#__PURE__*/(0, _curry2.default)(function isNil(x) {
  return x == null;
});
exports.default = isNil;
},{"./internal/_curry1":260}],31:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

var _isArray2 = require('./internal/_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isInteger2 = require('./internal/_isInteger');

var _isInteger3 = _interopRequireDefault(_isInteger2);

var _assoc = require('./assoc');

var _assoc2 = _interopRequireDefault(_assoc);

var _isNil = require('./isNil');

var _isNil2 = _interopRequireDefault(_isNil);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes a shallow clone of an object, setting or overriding the nodes required
 * to create the given path, and placing the specific value at the tail end of
 * that path. Note that this copies and flattens prototype properties onto the
 * new object as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> {a}
 * @param {Array} path the path to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except along the specified path.
 * @see R.dissocPath
 * @example
 *
 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
 *
 *      // Any missing or non-object keys in path will be overridden
 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
 */
var assocPath = /*#__PURE__*/(0, _curry2.default)(function assocPath(path, val, obj) {
  if (path.length === 0) {
    return val;
  }
  var idx = path[0];
  if (path.length > 1) {
    var nextObj = !(0, _isNil2.default)(obj) && (0, _has3.default)(idx, obj) ? obj[idx] : (0, _isInteger3.default)(path[1]) ? [] : {};
    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
  }
  if ((0, _isInteger3.default)(idx) && (0, _isArray3.default)(obj)) {
    var arr = [].concat(obj);
    arr[idx] = val;
    return arr;
  } else {
    return (0, _assoc2.default)(idx, val, obj);
  }
});
exports.default = assocPath;
},{"./internal/_curry3":261,"./internal/_has":269,"./internal/_isArray":270,"./internal/_isInteger":271,"./assoc":30,"./isNil":109}],149:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly `n` parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} n The desired arity of the new function.
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity `n`.
 * @see R.binary, R.unary
 * @example
 *
 *      var takesTwoArgs = (a, b) => [a, b];
 *
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.nAry(1, takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only `n` arguments are passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.nAry(0, f)(a, b) = f()
 * @symb R.nAry(1, f)(a, b) = f(a)
 * @symb R.nAry(2, f)(a, b) = f(a, b)
 */
var nAry = /*#__PURE__*/(0, _curry3.default)(function nAry(n, fn) {
  switch (n) {
    case 0:
      return function () {
        return fn.call(this);
      };
    case 1:
      return function (a0) {
        return fn.call(this, a0);
      };
    case 2:
      return function (a0, a1) {
        return fn.call(this, a0, a1);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.call(this, a0, a1, a2);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.call(this, a0, a1, a2, a3);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.call(this, a0, a1, a2, a3, a4);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.call(this, a0, a1, a2, a3, a4, a5);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      };
    default:
      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
  }
});
exports.default = nAry;
},{"./internal/_curry2":262}],32:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _nAry = require('./nAry');

var _nAry2 = _interopRequireDefault(_nAry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 2 parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> c) -> (a, b -> c)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 2.
 * @see R.nAry, R.unary
 * @example
 *
 *      var takesThreeArgs = function(a, b, c) {
 *        return [a, b, c];
 *      };
 *      takesThreeArgs.length; //=> 3
 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
 *
 *      var takesTwoArgs = R.binary(takesThreeArgs);
 *      takesTwoArgs.length; //=> 2
 *      // Only 2 arguments are passed to the wrapped function
 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
 * @symb R.binary(f)(a, b, c) = f(a, b)
 */
var binary = /*#__PURE__*/(0, _curry2.default)(function binary(fn) {
  return (0, _nAry2.default)(2, fn);
});
exports.default = binary;
},{"./internal/_curry1":260,"./nAry":149}],273:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _isFunction;
function _isFunction(x) {
  return Object.prototype.toString.call(x) === '[object Function]';
}
},{}],122:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _ap = require('./ap');

var _ap2 = _interopRequireDefault(_ap);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      var madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */
var liftN = /*#__PURE__*/(0, _curry3.default)(function liftN(arity, fn) {
  var lifted = (0, _curryN2.default)(arity, fn);
  return (0, _curryN2.default)(arity, function () {
    return (0, _reduce3.default)(_ap2.default, (0, _map2.default)(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});
exports.default = liftN;
},{"./internal/_curry2":262,"./internal/_reduce":266,"./ap":23,"./curryN":52,"./map":125}],121:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _liftN = require('./liftN');

var _liftN2 = _interopRequireDefault(_liftN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      var madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 *
 *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
 */
var lift = /*#__PURE__*/(0, _curry2.default)(function lift(fn) {
  return (0, _liftN2.default)(fn.length, fn);
});
exports.default = lift;
},{"./internal/_curry1":260,"./liftN":122}],34:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isFunction2 = require('./internal/_isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _and = require('./and');

var _and2 = _interopRequireDefault(_and);

var _lift = require('./lift');

var _lift2 = _interopRequireDefault(_lift);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function which calls the two provided functions and returns the `&&`
 * of the results.
 * It returns the result of the first function if it is false-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * false-y value.
 *
 * In addition to functions, `R.both` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f A predicate
 * @param {Function} g Another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
 * @see R.and
 * @example
 *
 *      var gt10 = R.gt(R.__, 10)
 *      var lt20 = R.lt(R.__, 20)
 *      var f = R.both(gt10, lt20);
 *      f(15); //=> true
 *      f(30); //=> false
 */
var both = /*#__PURE__*/(0, _curry3.default)(function both(f, g) {
  return (0, _isFunction3.default)(f) ? function _both() {
    return f.apply(this, arguments) && g.apply(this, arguments);
  } : (0, _lift2.default)(_and2.default)(f, g);
});
exports.default = both;
},{"./internal/_curry2":262,"./internal/_isFunction":273,"./and":20,"./lift":121}],51:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN
 * @example
 *
 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
var curry = /*#__PURE__*/(0, _curry2.default)(function curry(fn) {
  return (0, _curryN2.default)(fn.length, fn);
});
exports.default = curry;
},{"./internal/_curry1":260,"./curryN":52}],35:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./curry');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the result of calling its first argument with the remaining
 * arguments. This is occasionally useful as a converging function for
 * [`R.converge`](#converge): the first branch can produce a function while the
 * remaining branches produce values to be passed to that function as its
 * arguments.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig (*... -> a),*... -> a
 * @param {Function} fn The function to apply to the remaining arguments.
 * @param {...*} args Any number of positional arguments.
 * @return {*}
 * @see R.apply
 * @example
 *
 *      R.call(R.add, 1, 2); //=> 3
 *
 *      var indentN = R.pipe(R.repeat(' '),
 *                           R.join(''),
 *                           R.replace(/^(?!$)/gm));
 *
 *      var format = R.converge(R.call, [
 *                                  R.pipe(R.prop('indent'), indentN),
 *                                  R.prop('value')
 *                              ]);
 *
 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
 * @symb R.call(f, a, b) = f(a, b)
 */
var call = /*#__PURE__*/(0, _curry2.default)(function call(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});
exports.default = call;
},{"./curry":51}],274:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _makeFlat;

var _isArrayLike2 = require('./_isArrayLike');

var _isArrayLike3 = _interopRequireDefault(_isArrayLike2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `_makeFlat` is a helper function that returns a one-level or fully recursive
 * function based on the flag passed in.
 *
 * @private
 */
function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;

    while (idx < ilen) {
      if ((0, _isArrayLike3.default)(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;
        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
}
},{"./_isArrayLike":324}],338:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _forceReduced;
function _forceReduced(x) {
  return {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}
},{}],325:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _forceReduced2 = require('./_forceReduced');

var _forceReduced3 = _interopRequireDefault(_forceReduced2);

var _isArrayLike2 = require('./_isArrayLike');

var _isArrayLike3 = _interopRequireDefault(_isArrayLike2);

var _reduce2 = require('./_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var preservingReduced = function (xf) {
  return {
    '@@transducer/init': _xfBase3.default.init,
    '@@transducer/result': function (result) {
      return xf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      var ret = xf['@@transducer/step'](result, input);
      return ret['@@transducer/reduced'] ? (0, _forceReduced3.default)(ret) : ret;
    }
  };
};

var _flatCat = function _xcat(xf) {
  var rxf = preservingReduced(xf);
  return {
    '@@transducer/init': _xfBase3.default.init,
    '@@transducer/result': function (result) {
      return rxf['@@transducer/result'](result);
    },
    '@@transducer/step': function (result, input) {
      return !(0, _isArrayLike3.default)(input) ? (0, _reduce3.default)(rxf, result, [input]) : (0, _reduce3.default)(rxf, result, input);
    }
  };
};

exports.default = _flatCat;
},{"./_forceReduced":338,"./_isArrayLike":324,"./_reduce":266,"./_xfBase":323}],275:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _flatCat2 = require('./_flatCat');

var _flatCat3 = _interopRequireDefault(_flatCat2);

var _map = require('../map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _xchain = /*#__PURE__*/(0, _curry3.default)(function _xchain(f, xf) {
  return (0, _map2.default)(f, (0, _flatCat3.default)(xf));
});
exports.default = _xchain;
},{"./_curry2":262,"./_flatCat":325,"../map":125}],36:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _makeFlat2 = require('./internal/_makeFlat');

var _makeFlat3 = _interopRequireDefault(_makeFlat2);

var _xchain2 = require('./internal/_xchain');

var _xchain3 = _interopRequireDefault(_xchain2);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `chain` maps a function over a list and concatenates the results. `chain`
 * is also known as `flatMap` in some libraries
 *
 * Dispatches to the `chain` method of the second argument, if present,
 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain m => (a -> m b) -> m a -> m b
 * @param {Function} fn The function to map with
 * @param {Array} list The list to map over
 * @return {Array} The result of flat-mapping `list` with `fn`
 * @example
 *
 *      var duplicate = n => [n, n];
 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
 *
 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
 */
var chain = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['fantasy-land/chain', 'chain'], _xchain3.default, function chain(fn, monad) {
  if (typeof monad === 'function') {
    return function (x) {
      return fn(monad(x))(x);
    };
  }
  return (0, _makeFlat3.default)(false)((0, _map2.default)(fn, monad));
}));
exports.default = chain;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_makeFlat":274,"./internal/_xchain":275,"./map":125}],37:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */
var clamp = /*#__PURE__*/(0, _curry2.default)(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }
  return value < min ? min : value > max ? max : value;
});
exports.default = clamp;
},{"./internal/_curry3":261}],316:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
                                  value: true
});
exports.default = _cloneRegExp;
function _cloneRegExp(pattern) {
                                  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
}
},{}],231:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 *      R.type(() => {}); //=> "Function"
 *      R.type(undefined); //=> "Undefined"
 */
var type = /*#__PURE__*/(0, _curry2.default)(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});
exports.default = type;
},{"./internal/_curry1":260}],277:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _clone;

var _cloneRegExp2 = require('./_cloneRegExp');

var _cloneRegExp3 = _interopRequireDefault(_cloneRegExp2);

var _type = require('../type');

var _type2 = _interopRequireDefault(_type);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copies an object.
 *
 * @private
 * @param {*} value The value to be copied
 * @param {Array} refFrom Array containing the source references
 * @param {Array} refTo Array containing the copied source references
 * @param {Boolean} deep Whether or not to perform deep cloning.
 * @return {*} The copied value.
 */
function _clone(value, refFrom, refTo, deep) {
  var copy = function copy(copiedValue) {
    var len = refFrom.length;
    var idx = 0;
    while (idx < len) {
      if (value === refFrom[idx]) {
        return refTo[idx];
      }
      idx += 1;
    }
    refFrom[idx + 1] = value;
    refTo[idx + 1] = copiedValue;
    for (var key in value) {
      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
    }
    return copiedValue;
  };
  switch ((0, _type2.default)(value)) {
    case 'Object':
      return copy({});
    case 'Array':
      return copy([]);
    case 'Date':
      return new Date(value.valueOf());
    case 'RegExp':
      return (0, _cloneRegExp3.default)(value);
    default:
      return value;
  }
}
},{"./_cloneRegExp":316,"../type":231}],38:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _clone2 = require('./internal/_clone');

var _clone3 = _interopRequireDefault(_clone2);

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a deep copy of the value which may contain (nested) `Array`s and
 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
 * assigned by reference rather than copied
 *
 * Dispatches to a `clone` method if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {*} -> {*}
 * @param {*} value The object or array to clone
 * @return {*} A deeply cloned copy of `val`
 * @example
 *
 *      var objects = [{}, {}, {}];
 *      var objectsClone = R.clone(objects);
 *      objects === objectsClone; //=> false
 *      objects[0] === objectsClone[0]; //=> false
 */
var clone = /*#__PURE__*/(0, _curry2.default)(function clone(value) {
  return value != null && typeof value.clone === 'function' ? value.clone() : (0, _clone3.default)(value, [], [], true);
});
exports.default = clone;
},{"./internal/_clone":277,"./internal/_curry1":260}],39:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      var byAge = R.comparator((a, b) => a.age < b.age);
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByIncreasingAge = R.sort(byAge, people);
 */
var comparator = /*#__PURE__*/(0, _curry2.default)(function comparator(pred) {
  return function (a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});
exports.default = comparator;
},{"./internal/_curry1":260}],152:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */
var not = /*#__PURE__*/(0, _curry2.default)(function not(a) {
  return !a;
});
exports.default = not;
},{"./internal/_curry1":260}],40:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lift = require('./lift');

var _lift2 = _interopRequireDefault(_lift);

var _not = require('./not');

var _not2 = _interopRequireDefault(_not);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      var isNotNil = R.complement(R.isNil);
 *      isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      isNil(7); //=> false
 *      isNotNil(7); //=> true
 */
var complement = /*#__PURE__*/(0, _lift2.default)(_not2.default);
exports.default = complement;
},{"./lift":121,"./not":152}],309:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _pipe;
function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
}
},{}],297:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _checkForMethod;

var _isArray2 = require('./_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */
function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;
    if (length === 0) {
      return fn();
    }
    var obj = arguments[length - 1];
    return (0, _isArray3.default)(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}
},{"./_isArray":270}],200:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _checkForMethod2 = require('./internal/_checkForMethod');

var _checkForMethod3 = _interopRequireDefault(_checkForMethod2);

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */
var slice = /*#__PURE__*/(0, _curry2.default)( /*#__PURE__*/(0, _checkForMethod3.default)('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));
exports.default = slice;
},{"./internal/_checkForMethod":297,"./internal/_curry3":261}],213:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _checkForMethod2 = require('./internal/_checkForMethod');

var _checkForMethod3 = _interopRequireDefault(_checkForMethod2);

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */
var tail = /*#__PURE__*/(0, _curry2.default)( /*#__PURE__*/(0, _checkForMethod3.default)('tail', /*#__PURE__*/(0, _slice2.default)(1, Infinity)));
exports.default = tail;
},{"./internal/_checkForMethod":297,"./internal/_curry1":260,"./slice":200}],173:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pipe;

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _pipe2 = require('./internal/_pipe');

var _pipe3 = _interopRequireDefault(_pipe2);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _tail = require('./tail');

var _tail2 = _interopRequireDefault(_tail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Performs left-to-right function composition. The leftmost function may have
 * any arity; the remaining functions must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      var f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */
function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }
  return (0, _arity3.default)(arguments[0].length, (0, _reduce2.default)(_pipe3.default, arguments[0], (0, _tail2.default)(arguments)));
}
},{"./internal/_arity":272,"./internal/_pipe":309,"./reduce":187,"./tail":213}],196:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _isString2 = require('./internal/_isString');

var _isString3 = _interopRequireDefault(_isString2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */
var reverse = /*#__PURE__*/(0, _curry2.default)(function reverse(list) {
  return (0, _isString3.default)(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
});
exports.default = reverse;
},{"./internal/_curry1":260,"./internal/_isString":276}],41:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = compose;

var _pipe = require('./pipe');

var _pipe2 = _interopRequireDefault(_pipe);

var _reverse = require('./reverse');

var _reverse2 = _interopRequireDefault(_reverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Performs right-to-left function composition. The rightmost function may have
 * any arity; the remaining functions must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      var classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      var yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 */
function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }
  return _pipe2.default.apply(this, (0, _reverse2.default)(arguments));
}
},{"./pipe":173,"./reverse":196}],42:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = composeK;

var _chain = require('./chain');

var _chain2 = _interopRequireDefault(_chain);

var _compose = require('./compose');

var _compose2 = _interopRequireDefault(_compose);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the right-to-left Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipeK
 * @example
 *
 *       //  get :: String -> Object -> Maybe *
 *       var get = R.curry((propName, obj) => Maybe(obj[propName]))
 *
 *       //  getStateCode :: Maybe String -> Maybe String
 *       var getStateCode = R.composeK(
 *         R.compose(Maybe.of, R.toUpper),
 *         get('state'),
 *         get('address'),
 *         get('user'),
 *       );
 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
 *       getStateCode({}); //=> Maybe.Nothing()
 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
 */
function composeK() {
  if (arguments.length === 0) {
    throw new Error('composeK requires at least one argument');
  }
  var init = Array.prototype.slice.call(arguments);
  var last = init.pop();
  return (0, _compose2.default)(_compose2.default.apply(this, (0, _map2.default)(_chain2.default, init)), last);
}
},{"./chain":36,"./compose":41,"./map":125}],310:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _pipeP;
function _pipeP(f, g) {
  return function () {
    var ctx = this;
    return f.apply(ctx, arguments).then(function (x) {
      return g.call(ctx, x);
    });
  };
}
},{}],175:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pipeP;

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _pipeP2 = require('./internal/_pipeP');

var _pipeP3 = _interopRequireDefault(_pipeP2);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _tail = require('./tail');

var _tail2 = _interopRequireDefault(_tail);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Performs left-to-right composition of one or more Promise-returning
 * functions. The leftmost function may have any arity; the remaining functions
 * must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeP
 * @example
 *
 *      //  followersForUser :: String -> Promise [User]
 *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
 */
function pipeP() {
  if (arguments.length === 0) {
    throw new Error('pipeP requires at least one argument');
  }
  return (0, _arity3.default)(arguments[0].length, (0, _reduce2.default)(_pipeP3.default, arguments[0], (0, _tail2.default)(arguments)));
}
},{"./internal/_arity":272,"./internal/_pipeP":310,"./reduce":187,"./tail":213}],43:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = composeP;

var _pipeP = require('./pipeP');

var _pipeP2 = _interopRequireDefault(_pipeP);

var _reverse = require('./reverse');

var _reverse2 = _interopRequireDefault(_reverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Performs right-to-left composition of one or more Promise-returning
 * functions. The rightmost function may have any arity; the remaining
 * functions must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
 * @param {...Function} functions The functions to compose
 * @return {Function}
 * @see R.pipeP
 * @example
 *
 *      var db = {
 *        users: {
 *          JOE: {
 *            name: 'Joe',
 *            followers: ['STEVE', 'SUZY']
 *          }
 *        }
 *      }
 *
 *      // We'll pretend to do a db lookup which returns a promise
 *      var lookupUser = (userId) => Promise.resolve(db.users[userId])
 *      var lookupFollowers = (user) => Promise.resolve(user.followers)
 *      lookupUser('JOE').then(lookupFollowers)
 *
 *      //  followersForUser :: String -> Promise [UserId]
 *      var followersForUser = R.composeP(lookupFollowers, lookupUser);
 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
 *      // Followers: ["STEVE","SUZY"]
 */
function composeP() {
  if (arguments.length === 0) {
    throw new Error('composeP requires at least one argument');
  }
  return _pipeP2.default.apply(this, (0, _reverse2.default)(arguments));
}
},{"./pipeP":175,"./reverse":196}],326:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _arrayFromIterator;
function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
}
},{}],281:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _containsWith;
function _containsWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}
},{}],327:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _functionName;
function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
}
},{}],91:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns true if its arguments are identical, false otherwise. Values are
 * identical if they reference the same memory. `NaN` is identical to `NaN`;
 * `0` and `-0` are not identical.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      var o = {};
 *      R.identical(o, o); //=> true
 *      R.identical(1, 1); //=> true
 *      R.identical(1, '1'); //=> false
 *      R.identical([], []); //=> false
 *      R.identical(0, -0); //=> false
 *      R.identical(NaN, NaN); //=> true
 */
var identical = /*#__PURE__*/(0, _curry3.default)(function identical(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
});
exports.default = identical;
},{"./internal/_curry2":262}],296:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _equals;

var _arrayFromIterator2 = require('./_arrayFromIterator');

var _arrayFromIterator3 = _interopRequireDefault(_arrayFromIterator2);

var _containsWith2 = require('./_containsWith');

var _containsWith3 = _interopRequireDefault(_containsWith2);

var _functionName2 = require('./_functionName');

var _functionName3 = _interopRequireDefault(_functionName2);

var _has2 = require('./_has');

var _has3 = _interopRequireDefault(_has2);

var _identical = require('../identical');

var _identical2 = _interopRequireDefault(_identical);

var _keys = require('../keys');

var _keys2 = _interopRequireDefault(_keys);

var _type = require('../type');

var _type2 = _interopRequireDefault(_type);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparision of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */

function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = (0, _arrayFromIterator3.default)(aIterator);
  var b = (0, _arrayFromIterator3.default)(bIterator);

  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  }

  // if *a* array contains any element that is not included in *b*
  return !(0, _containsWith3.default)(function (b, aItem) {
    return !(0, _containsWith3.default)(eq, aItem, b);
  }, b, a);
}

function _equals(a, b, stackA, stackB) {
  if ((0, _identical2.default)(a, b)) {
    return true;
  }

  var typeA = (0, _type2.default)(a);

  if (typeA !== (0, _type2.default)(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (typeA) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && (0, _functionName3.default)(a.constructor) === 'Promise') {
        return a === b;
      }
      break;
    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && (0, _identical2.default)(a.valueOf(), b.valueOf()))) {
        return false;
      }
      break;
    case 'Date':
      if (!(0, _identical2.default)(a.valueOf(), b.valueOf())) {
        return false;
      }
      break;
    case 'Error':
      return a.name === b.name && a.message === b.message;
    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }
      break;
  }

  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }
    idx -= 1;
  }

  switch (typeA) {
    case 'Map':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
    case 'Set':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
    case 'Arguments':
    case 'Array':
    case 'Object':
    case 'Boolean':
    case 'Number':
    case 'String':
    case 'Date':
    case 'Error':
    case 'RegExp':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'ArrayBuffer':
      break;
    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = (0, _keys2.default)(a);
  if (keysA.length !== (0, _keys2.default)(b).length) {
    return false;
  }

  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);

  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!((0, _has3.default)(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }
    idx -= 1;
  }
  return true;
}
},{"./_arrayFromIterator":326,"./_containsWith":281,"./_functionName":327,"./_has":269,"../identical":91,"../keys":112,"../type":231}],72:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _equals2 = require('./internal/_equals');

var _equals3 = _interopRequireDefault(_equals2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      var a = {}; a.v = a;
 *      var b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */
var equals = /*#__PURE__*/(0, _curry3.default)(function equals(a, b) {
  return (0, _equals3.default)(a, b, [], []);
});
exports.default = equals;
},{"./internal/_curry2":262,"./internal/_equals":296}],300:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _indexOf;

var _equals = require('../equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _indexOf(list, a, idx) {
  var inf, item;
  // Array.prototype.indexOf doesn't exist below IE9
  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === 'number' && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        // non-zero numbers can utilise Set
        return list.indexOf(a, idx);

      // all these types can utilise Set
      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }
    }
  }
  // anything else not covered above, defer to R.equals
  while (idx < list.length) {
    if ((0, _equals2.default)(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}
},{"../equals":72}],278:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _contains;

var _indexOf2 = require('./_indexOf');

var _indexOf3 = _interopRequireDefault(_indexOf2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _contains(a, list) {
  return (0, _indexOf3.default)(list, a, 0) >= 0;
}
},{"./_indexOf":300}],329:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _quote;
function _quote(s) {
  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');

  return '"' + escaped.replace(/"/g, '\\"') + '"';
}
},{}],330:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
var pad = function pad(n) {
  return (n < 10 ? '0' : '') + n;
};

var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
  return d.toISOString();
} : function _toISOString(d) {
  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
};

exports.default = _toISOString;
},{}],306:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _complement;
function _complement(f) {
  return function () {
    return !f.apply(this, arguments);
  };
}
},{}],291:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _filter;
function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
}
},{}],289:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _isObject;
function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
}
},{}],292:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XFilter = /*#__PURE__*/function () {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFilter.prototype['@@transducer/init'] = _xfBase3.default.init;
  XFilter.prototype['@@transducer/result'] = _xfBase3.default.result;
  XFilter.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return XFilter;
}();

var _xfilter = /*#__PURE__*/(0, _curry3.default)(function _xfilter(f, xf) {
  return new XFilter(f, xf);
});
exports.default = _xfilter;
},{"./_curry2":262,"./_xfBase":323}],74:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _filter2 = require('./internal/_filter');

var _filter3 = _interopRequireDefault(_filter2);

var _isObject2 = require('./internal/_isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _xfilter2 = require('./internal/_xfilter');

var _xfilter3 = _interopRequireDefault(_xfilter2);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a predicate and a `Filterable`, and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array} Filterable
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
var filter = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['filter'], _xfilter3.default, function (pred, filterable) {
  return (0, _isObject3.default)(filterable) ? (0, _reduce3.default)(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, (0, _keys2.default)(filterable)) :
  // else
  (0, _filter3.default)(pred, filterable);
}));
exports.default = filter;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_filter":291,"./internal/_isObject":289,"./internal/_reduce":266,"./internal/_xfilter":292,"./keys":112}],192:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _complement2 = require('./internal/_complement');

var _complement3 = _interopRequireDefault(_complement2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _filter = require('./filter');

var _filter2 = _interopRequireDefault(_filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The complement of [`filter`](#filter).
 *
 * Acts as a transducer if a transformer is given in list position. Filterable
 * objects include plain objects or any object that has a filter method such
 * as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      var isOdd = (n) => n % 2 === 1;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
var reject = /*#__PURE__*/(0, _curry3.default)(function reject(pred, filterable) {
  return (0, _filter2.default)((0, _complement3.default)(pred), filterable);
});
exports.default = reject;
},{"./internal/_complement":306,"./internal/_curry2":262,"./filter":74}],319:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _toString;

var _contains2 = require('./_contains');

var _contains3 = _interopRequireDefault(_contains2);

var _map2 = require('./_map');

var _map3 = _interopRequireDefault(_map2);

var _quote2 = require('./_quote');

var _quote3 = _interopRequireDefault(_quote2);

var _toISOString2 = require('./_toISOString');

var _toISOString3 = _interopRequireDefault(_toISOString2);

var _keys = require('../keys');

var _keys2 = _interopRequireDefault(_keys);

var _reject = require('../reject');

var _reject2 = _interopRequireDefault(_reject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return (0, _contains3.default)(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  //  mapPairs :: (Object, [String]) -> [String]
  var mapPairs = function (obj, keys) {
    return (0, _map3.default)(function (k) {
      return (0, _quote3.default)(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + (0, _map3.default)(recur, x).join(', ') + '))';
    case '[object Array]':
      return '[' + (0, _map3.default)(recur, x).concat(mapPairs(x, (0, _reject2.default)(function (k) {
        return (/^\d+$/.test(k)
        );
      }, (0, _keys2.default)(x)))).join(', ') + ']';
    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : (0, _quote3.default)((0, _toISOString3.default)(x))) + ')';
    case '[object Null]':
      return 'null';
    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : (0, _quote3.default)(x);
    case '[object Undefined]':
      return 'undefined';
    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();
        if (repr !== '[object Object]') {
          return repr;
        }
      }
      return '{' + mapPairs(x, (0, _keys2.default)(x)).join(', ') + '}';
  }
}
},{"./_contains":278,"./_map":279,"./_quote":329,"./_toISOString":330,"../keys":112,"../reject":192}],224:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _toString2 = require('./internal/_toString');

var _toString3 = _interopRequireDefault(_toString2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */
var toString = /*#__PURE__*/(0, _curry2.default)(function toString(val) {
  return (0, _toString3.default)(val, []);
});
exports.default = toString;
},{"./internal/_curry1":260,"./internal/_toString":319}],44:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isArray2 = require('./internal/_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isFunction2 = require('./internal/_isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = require('./internal/_isString');

var _isString3 = _interopRequireDefault(_isString2);

var _toString = require('./toString');

var _toString2 = _interopRequireDefault(_toString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 * Can also concatenate two members of a [fantasy-land
 * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */
var concat = /*#__PURE__*/(0, _curry3.default)(function concat(a, b) {
  if ((0, _isArray3.default)(a)) {
    if ((0, _isArray3.default)(b)) {
      return a.concat(b);
    }
    throw new TypeError((0, _toString2.default)(b) + ' is not an array');
  }
  if ((0, _isString3.default)(a)) {
    if ((0, _isString3.default)(b)) {
      return a + b;
    }
    throw new TypeError((0, _toString2.default)(b) + ' is not a string');
  }
  if (a != null && (0, _isFunction3.default)(a['fantasy-land/concat'])) {
    return a['fantasy-land/concat'](b);
  }
  if (a != null && (0, _isFunction3.default)(a.concat)) {
    return a.concat(b);
  }
  throw new TypeError((0, _toString2.default)(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
});
exports.default = concat;
},{"./internal/_curry2":262,"./internal/_isArray":270,"./internal/_isFunction":273,"./internal/_isString":276,"./toString":224}],45:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _max = require('./max');

var _max2 = _interopRequireDefault(_max);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @example
 *
 *      var fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0°C')],
 *        [R.equals(100), R.always('water boils at 100°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0°C'
 *      fn(50); //=> 'nothing special happens at 50°C'
 *      fn(100); //=> 'water boils at 100°C'
 */
var cond = /*#__PURE__*/(0, _curry2.default)(function cond(pairs) {
  var arity = (0, _reduce2.default)(_max2.default, 0, (0, _map2.default)(function (pair) {
    return pair[0].length;
  }, pairs));
  return (0, _arity3.default)(arity, function () {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});
exports.default = cond;
},{"./internal/_arity":272,"./internal/_curry1":260,"./map":125,"./max":131,"./reduce":187}],47:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _curry4 = require('./curry');

var _curry5 = _interopRequireDefault(_curry4);

var _nAry = require('./nAry');

var _nAry2 = _interopRequireDefault(_nAry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type. The arity of the function
 * returned is specified to allow using variadic constructor functions.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Function
 * @sig Number -> (* -> {*}) -> (* -> {*})
 * @param {Number} n The arity of the constructor function.
 * @param {Function} Fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Variadic Constructor function
 *      function Salad() {
 *        this.ingredients = arguments;
 *      }
 *
 *      Salad.prototype.recipe = function() {
 *        var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);
 *        return R.join('\n', instructions);
 *      };
 *
 *      var ThreeLayerSalad = R.constructN(3, Salad);
 *
 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
 *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');
 *
 *      console.log(salad.recipe());
 *      // Add a dollop of Mayonnaise
 *      // Add a dollop of Potato Chips
 *      // Add a dollop of Ketchup
 */
var constructN = /*#__PURE__*/(0, _curry3.default)(function constructN(n, Fn) {
  if (n > 10) {
    throw new Error('Constructor with greater than ten arguments');
  }
  if (n === 0) {
    return function () {
      return new Fn();
    };
  }
  return (0, _curry5.default)((0, _nAry2.default)(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (arguments.length) {
      case 1:
        return new Fn($0);
      case 2:
        return new Fn($0, $1);
      case 3:
        return new Fn($0, $1, $2);
      case 4:
        return new Fn($0, $1, $2, $3);
      case 5:
        return new Fn($0, $1, $2, $3, $4);
      case 6:
        return new Fn($0, $1, $2, $3, $4, $5);
      case 7:
        return new Fn($0, $1, $2, $3, $4, $5, $6);
      case 8:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
      case 9:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
      case 10:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});
exports.default = constructN;
},{"./internal/_curry2":262,"./curry":51,"./nAry":149}],46:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _constructN = require('./constructN');

var _constructN2 = _interopRequireDefault(_constructN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> {*}) -> (* -> {*})
 * @param {Function} fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @see R.invoker
 * @example
 *
 *      // Constructor function
 *      function Animal(kind) {
 *        this.kind = kind;
 *      };
 *      Animal.prototype.sighting = function() {
 *        return "It's a " + this.kind + "!";
 *      }
 *
 *      var AnimalConstructor = R.construct(Animal)
 *
 *      // Notice we no longer need the 'new' keyword:
 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
 *
 *      var animalTypes = ["Lion", "Tiger", "Bear"];
 *      var animalSighting = R.invoker(0, 'sighting');
 *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
 */
var construct = /*#__PURE__*/(0, _curry2.default)(function construct(Fn) {
  return (0, _constructN2.default)(Fn.length, Fn);
});
exports.default = construct;
},{"./internal/_curry1":260,"./constructN":47}],48:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contains2 = require('./internal/_contains');

var _contains3 = _interopRequireDefault(_contains2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
 * terms, to at least one element of the given list; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.contains(3, [1, 2, 3]); //=> true
 *      R.contains(4, [1, 2, 3]); //=> false
 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.contains([42], [[42]]); //=> true
 */
var contains = /*#__PURE__*/(0, _curry3.default)(_contains3.default);
exports.default = contains;
},{"./internal/_contains":278,"./internal/_curry2":262}],49:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _map2 = require('./internal/_map');

var _map3 = _interopRequireDefault(_map2);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _max = require('./max');

var _max2 = _interopRequireDefault(_max);

var _pluck = require('./pluck');

var _pluck2 = _interopRequireDefault(_pluck);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Accepts a converging function and a list of branching functions and returns
 * a new function. When invoked, this new function is applied to some
 * arguments, each branching function is applied to those same arguments. The
 * results of each branching function are passed as arguments to the converging
 * function to produce the return value.
 *
 * @func
 * @memberOf R
 * @since v0.4.2
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} after A function. `after` will be invoked with the return values of
 *        `fn1` and `fn2` as its arguments.
 * @param {Array} functions A list of functions.
 * @return {Function} A new function.
 * @see R.useWith
 * @example
 *
 *      var average = R.converge(R.divide, [R.sum, R.length])
 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
 *
 *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
 *      strangeConcat("Yodel") //=> "YODELyodel"
 *
 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
 */
var converge = /*#__PURE__*/(0, _curry3.default)(function converge(after, fns) {
  return (0, _curryN2.default)((0, _reduce2.default)(_max2.default, 0, (0, _pluck2.default)('length', fns)), function () {
    var args = arguments;
    var context = this;
    return after.apply(context, (0, _map3.default)(function (fn) {
      return fn.apply(context, args);
    }, fns));
  });
});
exports.default = converge;
},{"./internal/_curry2":262,"./internal/_map":279,"./curryN":52,"./max":131,"./pluck":176,"./reduce":187}],311:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curryN2 = require('./_curryN');

var _curryN3 = _interopRequireDefault(_curryN2);

var _has2 = require('./_has');

var _has3 = _interopRequireDefault(_has2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XReduceBy = /*#__PURE__*/function () {
  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }
  XReduceBy.prototype['@@transducer/init'] = _xfBase3.default.init;
  XReduceBy.prototype['@@transducer/result'] = function (result) {
    var key;
    for (key in this.inputs) {
      if ((0, _has3.default)(key, this.inputs)) {
        result = this.xf['@@transducer/step'](result, this.inputs[key]);
        if (result['@@transducer/reduced']) {
          result = result['@@transducer/value'];
          break;
        }
      }
    }
    this.inputs = null;
    return this.xf['@@transducer/result'](result);
  };
  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };

  return XReduceBy;
}();

var _xreduceBy = /*#__PURE__*/(0, _curryN3.default)(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
  return new XReduceBy(valueFn, valueAcc, keyFn, xf);
});
exports.default = _xreduceBy;
},{"./_curryN":280,"./_has":269,"./_xfBase":323}],188:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curryN2 = require('./internal/_curryN');

var _curryN3 = _interopRequireDefault(_curryN2);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _xreduceBy2 = require('./internal/_xreduceBy');

var _xreduceBy3 = _interopRequireDefault(_xreduceBy2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Groups the elements of the list according to the result of calling
 * the String-returning function `keyFn` on each element and reduces the elements
 * of each group to a single value via the reducer function `valueFn`.
 *
 * This function is basically a more general [`groupBy`](#groupBy) function.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category List
 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
 * @param {Function} valueFn The function that reduces the elements of each group to a single
 *        value. Receives two values, accumulator for a particular group and the current element.
 * @param {*} acc The (initial) accumulator value for each group.
 * @param {Function} keyFn The function that maps the list's element into a key.
 * @param {Array} list The array to group.
 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
 *         `valueFn` for elements which produced that key when passed to `keyFn`.
 * @see R.groupBy, R.reduce
 * @example
 *
 *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
 *      var namesByGrade = reduceToNamesBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Lucy', score: 92},
 *                      {name: 'Drew', score: 85},
 *                      // ...
 *                      {name: 'Bart', score: 62}];
 *      namesByGrade(students);
 *      // {
 *      //   'A': ['Lucy'],
 *      //   'B': ['Drew']
 *      //   // ...,
 *      //   'F': ['Bart']
 *      // }
 */
var reduceBy = /*#__PURE__*/(0, _curryN3.default)(4, [], /*#__PURE__*/(0, _dispatchable3.default)([], _xreduceBy3.default, function reduceBy(valueFn, valueAcc, keyFn, list) {
  return (0, _reduce3.default)(function (acc, elt) {
    var key = keyFn(elt);
    acc[key] = valueFn((0, _has3.default)(key, acc) ? acc[key] : valueAcc, elt);
    return acc;
  }, {}, list);
}));
exports.default = reduceBy;
},{"./internal/_curryN":280,"./internal/_dispatchable":263,"./internal/_has":269,"./internal/_reduce":266,"./internal/_xreduceBy":311}],50:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduceBy = require('./reduceBy');

var _reduceBy2 = _interopRequireDefault(_reduceBy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> String) -> [a] -> {*}
 * @param {Function} fn The function used to map values to keys.
 * @param {Array} list The list to count elements from.
 * @return {Object} An object mapping keys to number of occurrences in the list.
 * @example
 *
 *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
 *
 *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];
 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
 */
var countBy = /*#__PURE__*/(0, _reduceBy2.default)(function (acc, elem) {
  return acc + 1;
}, 0);
exports.default = countBy;
},{"./reduceBy":188}],53:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Decrements its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n - 1
 * @see R.inc
 * @example
 *
 *      R.dec(42); //=> 41
 */
var dec = /*#__PURE__*/(0, _add2.default)(-1);
exports.default = dec;
},{"./add":14}],54:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      var defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */
var defaultTo = /*#__PURE__*/(0, _curry3.default)(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});
exports.default = defaultTo;
},{"./internal/_curry2":262}],55:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes a descending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
 * @see R.ascend
 * @example
 *
 *      var byAge = R.descend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByOldestFirst = R.sort(byAge, people);
 */
var descend = /*#__PURE__*/(0, _curry2.default)(function descend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});
exports.default = descend;
},{"./internal/_curry3":261}],56:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contains2 = require('./internal/_contains');

var _contains3 = _interopRequireDefault(_contains2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Objects and Arrays are compared in terms of
 * value equality, not reference equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without
 * @example
 *
 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
 */
var difference = /*#__PURE__*/(0, _curry3.default)(function difference(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!(0, _contains3.default)(first[idx], second) && !(0, _contains3.default)(first[idx], out)) {
      out[out.length] = first[idx];
    }
    idx += 1;
  }
  return out;
});
exports.default = difference;
},{"./internal/_contains":278,"./internal/_curry2":262}],57:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _containsWith2 = require('./internal/_containsWith');

var _containsWith3 = _interopRequireDefault(_containsWith2);

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      var cmp = (x, y) => x.a === y.a;
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
 *      var l2 = [{a: 3}, {a: 4}];
 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
 */
var differenceWith = /*#__PURE__*/(0, _curry2.default)(function differenceWith(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!(0, _containsWith3.default)(pred, first[idx], second) && !(0, _containsWith3.default)(pred, first[idx], out)) {
      out.push(first[idx]);
    }
    idx += 1;
  }
  return out;
});
exports.default = differenceWith;
},{"./internal/_containsWith":281,"./internal/_curry3":261}],58:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new object that does not contain a `prop` property.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Object
 * @sig String -> {k: v} -> {k: v}
 * @param {String} prop The name of the property to dissociate
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original but without the specified property
 * @see R.assoc
 * @example
 *
 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
 */
var dissoc = /*#__PURE__*/(0, _curry3.default)(function dissoc(prop, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  delete result[prop];
  return result;
});
exports.default = dissoc;
},{"./internal/_curry2":262}],193:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Removes the sub-list of `list` starting at index `start` and containing
 * `count` elements. _Note that this is not destructive_: it returns a copy of
 * the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} start The position to start removing elements
 * @param {Number} count The number of elements to remove
 * @param {Array} list The list to remove from
 * @return {Array} A new Array with `count` elements from `start` removed.
 * @example
 *
 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
 */
var remove = /*#__PURE__*/(0, _curry2.default)(function remove(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count);
  return result;
});
exports.default = remove;
},{"./internal/_curry3":261}],244:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _adjust = require('./adjust');

var _adjust2 = _interopRequireDefault(_adjust);

var _always = require('./always');

var _always2 = _interopRequireDefault(_always);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new copy of the array with the element at the provided index
 * replaced with the given value.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} idx The index to update.
 * @param {*} x The value to exist at the given index of the returned array.
 * @param {Array|Arguments} list The source array-like object to be updated.
 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
 * @see R.adjust
 * @example
 *
 *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
 *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
 * @symb R.update(-1, a, [b, c]) = [b, a]
 * @symb R.update(0, a, [b, c]) = [a, c]
 * @symb R.update(1, a, [b, c]) = [b, a]
 */
var update = /*#__PURE__*/(0, _curry2.default)(function update(idx, x, list) {
  return (0, _adjust2.default)((0, _always2.default)(x), idx, list);
});
exports.default = update;
},{"./internal/_curry3":261,"./adjust":16,"./always":19}],59:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isInteger2 = require('./internal/_isInteger');

var _isInteger3 = _interopRequireDefault(_isInteger2);

var _assoc = require('./assoc');

var _assoc2 = _interopRequireDefault(_assoc);

var _dissoc = require('./dissoc');

var _dissoc2 = _interopRequireDefault(_dissoc);

var _remove = require('./remove');

var _remove2 = _interopRequireDefault(_remove);

var _update = require('./update');

var _update2 = _interopRequireDefault(_update);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Makes a shallow clone of an object, omitting the property at the given path.
 * Note that this copies and flattens prototype properties onto the new object
 * as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.11.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {k: v} -> {k: v}
 * @param {Array} path The path to the value to omit
 * @param {Object} obj The object to clone
 * @return {Object} A new object without the property at path
 * @see R.assocPath
 * @example
 *
 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
 */
var dissocPath = /*#__PURE__*/(0, _curry3.default)(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;
    case 1:
      return (0, _isInteger3.default)(path[0]) ? (0, _remove2.default)(path[0], 1, obj) : (0, _dissoc2.default)(path[0], obj);
    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);
      if (obj[head] == null) {
        return obj;
      } else if ((0, _isInteger3.default)(path[0])) {
        return (0, _update2.default)(head, dissocPath(tail, obj[head]), obj);
      } else {
        return (0, _assoc2.default)(head, dissocPath(tail, obj[head]), obj);
      }
  }
});
exports.default = dissocPath;
},{"./internal/_curry2":262,"./internal/_isInteger":271,"./assoc":30,"./dissoc":58,"./remove":193,"./update":244}],60:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Divides two numbers. Equivalent to `a / b`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a / b`.
 * @see R.multiply
 * @example
 *
 *      R.divide(71, 100); //=> 0.71
 *
 *      var half = R.divide(R.__, 2);
 *      half(42); //=> 21
 *
 *      var reciprocal = R.divide(1);
 *      reciprocal(4);   //=> 0.25
 */
var divide = /*#__PURE__*/(0, _curry3.default)(function divide(a, b) {
  return a / b;
});
exports.default = divide;
},{"./internal/_curry2":262}],284:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XDrop = /*#__PURE__*/function () {
  function XDrop(n, xf) {
    this.xf = xf;
    this.n = n;
  }
  XDrop.prototype['@@transducer/init'] = _xfBase3.default.init;
  XDrop.prototype['@@transducer/result'] = _xfBase3.default.result;
  XDrop.prototype['@@transducer/step'] = function (result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return XDrop;
}();

var _xdrop = /*#__PURE__*/(0, _curry3.default)(function _xdrop(n, xf) {
  return new XDrop(n, xf);
});
exports.default = _xdrop;
},{"./_curry2":262,"./_xfBase":323}],61:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xdrop2 = require('./internal/_xdrop');

var _xdrop3 = _interopRequireDefault(_xdrop2);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns all but the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `drop` method).
 *
 * Dispatches to the `drop` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*} A copy of list without the first `n` elements
 * @see R.take, R.transduce, R.dropLast, R.dropWhile
 * @example
 *
 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(3, 'ramda');               //=> 'da'
 */
var drop = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['drop'], _xdrop3.default, function drop(n, xs) {
  return (0, _slice2.default)(Math.max(0, n), Infinity, xs);
}));
exports.default = drop;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xdrop":284,"./slice":200}],313:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduced2 = require('./_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XTake = /*#__PURE__*/function () {
  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }
  XTake.prototype['@@transducer/init'] = _xfBase3.default.init;
  XTake.prototype['@@transducer/result'] = _xfBase3.default.result;
  XTake.prototype['@@transducer/step'] = function (result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.n >= 0 && this.i >= this.n ? (0, _reduced3.default)(ret) : ret;
  };

  return XTake;
}();

var _xtake = /*#__PURE__*/(0, _curry3.default)(function _xtake(n, xf) {
  return new XTake(n, xf);
});
exports.default = _xtake;
},{"./_curry2":262,"./_reduced":312,"./_xfBase":323}],214:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xtake2 = require('./internal/_xtake');

var _xtake3 = _interopRequireDefault(_xtake2);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      var personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      var takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */
var take = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['take'], _xtake3.default, function take(n, xs) {
  return (0, _slice2.default)(0, n < 0 ? Infinity : n, xs);
}));
exports.default = take;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xtake":313,"./slice":200}],285:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dropLast;

var _take = require('../take');

var _take2 = _interopRequireDefault(_take);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dropLast(n, xs) {
  return (0, _take2.default)(n < xs.length ? xs.length - n : 0, xs);
}
},{"../take":214}],286:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XDropLast = /*#__PURE__*/function () {
  function XDropLast(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XDropLast.prototype['@@transducer/init'] = _xfBase3.default.init;
  XDropLast.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.full) {
      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
    }
    this.store(input);
    return result;
  };
  XDropLast.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  return XDropLast;
}();

var _xdropLast = /*#__PURE__*/(0, _curry3.default)(function _xdropLast(n, xf) {
  return new XDropLast(n, xf);
});
exports.default = _xdropLast;
},{"./_curry2":262,"./_xfBase":323}],62:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _dropLast2 = require('./internal/_dropLast');

var _dropLast3 = _interopRequireDefault(_dropLast2);

var _xdropLast2 = require('./internal/_xdropLast');

var _xdropLast3 = _interopRequireDefault(_xdropLast2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a list containing all but the last `n` elements of the given `list`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements of `list` to skip.
 * @param {Array} list The list of elements to consider.
 * @return {Array} A copy of the list with only the first `list.length - n` elements
 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
 * @example
 *
 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(3, 'ramda');               //=> 'ra'
 */
var dropLast = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xdropLast3.default, _dropLast3.default));
exports.default = dropLast;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_dropLast":285,"./internal/_xdropLast":286}],282:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dropLastWhile;

var _slice = require('../slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dropLastWhile(pred, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && pred(xs[idx])) {
    idx -= 1;
  }
  return (0, _slice2.default)(0, idx + 1, xs);
}
},{"../slice":200}],283:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduce2 = require('./_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XDropLastWhile = /*#__PURE__*/function () {
  function XDropLastWhile(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }
  XDropLastWhile.prototype['@@transducer/init'] = _xfBase3.default.init;
  XDropLastWhile.prototype['@@transducer/result'] = function (result) {
    this.retained = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
  };
  XDropLastWhile.prototype.flush = function (result, input) {
    result = (0, _reduce3.default)(this.xf['@@transducer/step'], result, this.retained);
    this.retained = [];
    return this.xf['@@transducer/step'](result, input);
  };
  XDropLastWhile.prototype.retain = function (result, input) {
    this.retained.push(input);
    return result;
  };

  return XDropLastWhile;
}();

var _xdropLastWhile = /*#__PURE__*/(0, _curry3.default)(function _xdropLastWhile(fn, xf) {
  return new XDropLastWhile(fn, xf);
});
exports.default = _xdropLastWhile;
},{"./_curry2":262,"./_reduce":266,"./_xfBase":323}],63:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _dropLastWhile2 = require('./internal/_dropLastWhile');

var _dropLastWhile3 = _interopRequireDefault(_dropLastWhile2);

var _xdropLastWhile2 = require('./internal/_xdropLastWhile');

var _xdropLastWhile3 = _interopRequireDefault(_xdropLastWhile2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list excluding all the tailing elements of a given list which
 * satisfy the supplied predicate function. It passes each value from the right
 * to the supplied predicate function, skipping elements until the predicate
 * function returns a `falsy` value. The predicate function is applied to one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} predicate The function to be called on each element
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
 * @example
 *
 *      var lteThree = x => x <= 3;
 *
 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
 *
 *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'
 */
var dropLastWhile = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xdropLastWhile3.default, _dropLastWhile3.default));
exports.default = dropLastWhile;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_dropLastWhile":282,"./internal/_xdropLastWhile":283}],287:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XDropRepeatsWith = /*#__PURE__*/function () {
  function XDropRepeatsWith(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = undefined;
    this.seenFirstValue = false;
  }

  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase3.default.init;
  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase3.default.result;
  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
    var sameAsLast = false;
    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }
    this.lastValue = input;
    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
  };

  return XDropRepeatsWith;
}();

var _xdropRepeatsWith = /*#__PURE__*/(0, _curry3.default)(function _xdropRepeatsWith(pred, xf) {
  return new XDropRepeatsWith(pred, xf);
});
exports.default = _xdropRepeatsWith;
},{"./_curry2":262,"./_xfBase":323}],153:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isString2 = require('./internal/_isString');

var _isString3 = _interopRequireDefault(_isString2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      var list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */
var nth = /*#__PURE__*/(0, _curry3.default)(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return (0, _isString3.default)(list) ? list.charAt(idx) : list[idx];
});
exports.default = nth;
},{"./internal/_curry2":262,"./internal/_isString":276}],114:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nth = require('./nth');

var _nth2 = _interopRequireDefault(_nth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */
var last = /*#__PURE__*/(0, _nth2.default)(-1);
exports.default = last;
},{"./nth":153}],65:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xdropRepeatsWith2 = require('./internal/_xdropRepeatsWith');

var _xdropRepeatsWith3 = _interopRequireDefault(_xdropRepeatsWith2);

var _last = require('./last');

var _last2 = _interopRequireDefault(_last);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list without any consecutively repeating elements. Equality is
 * determined by applying the supplied predicate to each pair of consecutive elements. The
 * first element in a series of equal elements will be preserved.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
 */
var dropRepeatsWith = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xdropRepeatsWith3.default, function dropRepeatsWith(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;
  if (len !== 0) {
    result[0] = list[0];
    while (idx < len) {
      if (!pred((0, _last2.default)(result), list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
  }
  return result;
}));
exports.default = dropRepeatsWith;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xdropRepeatsWith":287,"./last":114}],64:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xdropRepeatsWith2 = require('./internal/_xdropRepeatsWith');

var _xdropRepeatsWith3 = _interopRequireDefault(_xdropRepeatsWith2);

var _dropRepeatsWith = require('./dropRepeatsWith');

var _dropRepeatsWith2 = _interopRequireDefault(_dropRepeatsWith);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list without any consecutively repeating elements.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
 */
var dropRepeats = /*#__PURE__*/(0, _curry2.default)( /*#__PURE__*/(0, _dispatchable3.default)([], /*#__PURE__*/(0, _xdropRepeatsWith3.default)(_equals2.default), /*#__PURE__*/(0, _dropRepeatsWith2.default)(_equals2.default)));
exports.default = dropRepeats;
},{"./internal/_curry1":260,"./internal/_dispatchable":263,"./internal/_xdropRepeatsWith":287,"./dropRepeatsWith":65,"./equals":72}],290:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XDropWhile = /*#__PURE__*/function () {
  function XDropWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XDropWhile.prototype['@@transducer/init'] = _xfBase3.default.init;
  XDropWhile.prototype['@@transducer/result'] = _xfBase3.default.result;
  XDropWhile.prototype['@@transducer/step'] = function (result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }
      this.f = null;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return XDropWhile;
}();

var _xdropWhile = /*#__PURE__*/(0, _curry3.default)(function _xdropWhile(f, xf) {
  return new XDropWhile(f, xf);
});
exports.default = _xdropWhile;
},{"./_curry2":262,"./_xfBase":323}],66:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xdropWhile2 = require('./internal/_xdropWhile');

var _xdropWhile3 = _interopRequireDefault(_xdropWhile2);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list excluding the leading elements of a given list which
 * satisfy the supplied predicate function. It passes each value to the supplied
 * predicate function, skipping elements while the predicate function returns
 * `true`. The predicate function is applied to one argument: *(value)*.
 *
 * Dispatches to the `dropWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.takeWhile, R.transduce, R.addIndex
 * @example
 *
 *      var lteTwo = x => x <= 2;
 *
 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
 *
 *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'
 */
var dropWhile = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['dropWhile'], _xdropWhile3.default, function dropWhile(pred, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && pred(xs[idx])) {
    idx += 1;
  }
  return (0, _slice2.default)(idx, Infinity, xs);
}));
exports.default = dropWhile;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xdropWhile":290,"./slice":200}],160:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if one or both of its arguments are `true`. Returns `false`
 * if both arguments are `false`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if truthy, otherwise the second argument.
 * @see R.either
 * @example
 *
 *      R.or(true, true); //=> true
 *      R.or(true, false); //=> true
 *      R.or(false, true); //=> true
 *      R.or(false, false); //=> false
 */
var or = /*#__PURE__*/(0, _curry3.default)(function or(a, b) {
  return a || b;
});
exports.default = or;
},{"./internal/_curry2":262}],67:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isFunction2 = require('./internal/_isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _lift = require('./lift');

var _lift2 = _interopRequireDefault(_lift);

var _or = require('./or');

var _or2 = _interopRequireDefault(_or);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function wrapping calls to the two functions in an `||` operation,
 * returning the result of the first function if it is truth-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * truth-y value.
 *
 * In addition to functions, `R.either` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f a predicate
 * @param {Function} g another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
 * @see R.or
 * @example
 *
 *      var gt10 = x => x > 10;
 *      var even = x => x % 2 === 0;
 *      var f = R.either(gt10, even);
 *      f(101); //=> true
 *      f(8); //=> true
 */
var either = /*#__PURE__*/(0, _curry3.default)(function either(f, g) {
  return (0, _isFunction3.default)(f) ? function _either() {
    return f.apply(this, arguments) || g.apply(this, arguments);
  } : (0, _lift2.default)(_or2.default)(f, g);
});
exports.default = either;
},{"./internal/_curry2":262,"./internal/_isFunction":273,"./lift":121,"./or":160}],68:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _isArguments2 = require('./internal/_isArguments');

var _isArguments3 = _interopRequireDefault(_isArguments2);

var _isArray2 = require('./internal/_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isObject2 = require('./internal/_isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _isString2 = require('./internal/_isString');

var _isString3 = _interopRequireDefault(_isString2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the empty value of its argument's type. Ramda defines the empty
 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
 * types are supported if they define `<Type>.empty`,
 * `<Type>.prototype.empty` or implement the
 * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
 *
 * Dispatches to the `empty` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> a
 * @param {*} x
 * @return {*}
 * @example
 *
 *      R.empty(Just(42));      //=> Nothing()
 *      R.empty([1, 2, 3]);     //=> []
 *      R.empty('unicorns');    //=> ''
 *      R.empty({x: 1, y: 2});  //=> {}
 */
var empty = /*#__PURE__*/(0, _curry2.default)(function empty(x) {
  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : (0, _isArray3.default)(x) ? [] : (0, _isString3.default)(x) ? '' : (0, _isObject3.default)(x) ? {} : (0, _isArguments3.default)(x) ? function () {
    return arguments;
  }() :
  // else
  void 0;
});
exports.default = empty;
},{"./internal/_curry1":260,"./internal/_isArguments":288,"./internal/_isArray":270,"./internal/_isObject":289,"./internal/_isString":276}],215:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _drop = require('./drop');

var _drop2 = _interopRequireDefault(_drop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing the last `n` elements of the given list.
 * If `n > list.length`, returns a list of `list.length` elements.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements to return.
 * @param {Array} xs The collection to consider.
 * @return {Array}
 * @see R.dropLast
 * @example
 *
 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(3, 'ramda');               //=> 'mda'
 */
var takeLast = /*#__PURE__*/(0, _curry3.default)(function takeLast(n, xs) {
  return (0, _drop2.default)(n >= 0 ? xs.length - n : 0, xs);
});
exports.default = takeLast;
},{"./internal/_curry2":262,"./drop":61}],69:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

var _takeLast = require('./takeLast');

var _takeLast2 = _interopRequireDefault(_takeLast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if a list ends with the provided values
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> Boolean
 * @sig String -> Boolean
 * @param {*} suffix
 * @param {*} list
 * @return {Boolean}
 * @example
 *
 *      R.endsWith('c', 'abc')                //=> true
 *      R.endsWith('b', 'abc')                //=> false
 *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true
 *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false
 */
var endsWith = /*#__PURE__*/(0, _curry3.default)(function (suffix, list) {
  return (0, _equals2.default)((0, _takeLast2.default)(suffix.length, list), suffix);
});
exports.default = endsWith;
},{"./internal/_curry2":262,"./equals":72,"./takeLast":215}],70:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function and two values in its domain and returns `true` if the
 * values map to the same value in the codomain; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Relation
 * @sig (a -> b) -> a -> a -> Boolean
 * @param {Function} f
 * @param {*} x
 * @param {*} y
 * @return {Boolean}
 * @example
 *
 *      R.eqBy(Math.abs, 5, -5); //=> true
 */
var eqBy = /*#__PURE__*/(0, _curry2.default)(function eqBy(f, x, y) {
  return (0, _equals2.default)(f(x), f(y));
});
exports.default = eqBy;
},{"./internal/_curry3":261,"./equals":72}],71:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Reports whether two objects have the same value, in [`R.equals`](#equals)
 * terms, for the specified property. Useful as a curried predicate.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig k -> {k: v} -> {k: v} -> Boolean
 * @param {String} prop The name of the property to compare
 * @param {Object} obj1
 * @param {Object} obj2
 * @return {Boolean}
 *
 * @example
 *
 *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
 *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
 *      R.eqProps('a', o1, o2); //=> false
 *      R.eqProps('c', o1, o2); //=> true
 */
var eqProps = /*#__PURE__*/(0, _curry2.default)(function eqProps(prop, obj1, obj2) {
  return (0, _equals2.default)(obj1[prop], obj2[prop]);
});
exports.default = eqProps;
},{"./internal/_curry3":261,"./equals":72}],73:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object by recursively evolving a shallow copy of `object`,
 * according to the `transformation` functions. All non-primitive properties
 * are copied by reference.
 *
 * A `transformation` function will not be invoked if its corresponding key
 * does not exist in the evolved object.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
 * @param {Object} transformations The object specifying transformation functions to apply
 *        to the object.
 * @param {Object} object The object to be transformed.
 * @return {Object} The transformed object.
 * @example
 *
 *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
 *      var transformations = {
 *        firstName: R.trim,
 *        lastName: R.trim, // Will not get invoked.
 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
 *      };
 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
 */
var evolve = /*#__PURE__*/(0, _curry3.default)(function evolve(transformations, object) {
  var result = {};
  var transformation, key, type;
  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];
  }
  return result;
});
exports.default = evolve;
},{"./internal/_curry2":262}],293:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduced2 = require('./_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XFind = /*#__PURE__*/function () {
  function XFind(f, xf) {
    this.xf = xf;
    this.f = f;
    this.found = false;
  }
  XFind.prototype['@@transducer/init'] = _xfBase3.default.init;
  XFind.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, void 0);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFind.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.found = true;
      result = (0, _reduced3.default)(this.xf['@@transducer/step'](result, input));
    }
    return result;
  };

  return XFind;
}();

var _xfind = /*#__PURE__*/(0, _curry3.default)(function _xfind(f, xf) {
  return new XFind(f, xf);
});
exports.default = _xfind;
},{"./_curry2":262,"./_reduced":312,"./_xfBase":323}],75:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xfind2 = require('./internal/_xfind');

var _xfind3 = _interopRequireDefault(_xfind2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the first element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Dispatches to the `find` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 *        desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
 *      R.find(R.propEq('a', 4))(xs); //=> undefined
 */
var find = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['find'], _xfind3.default, function find(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx += 1;
  }
}));
exports.default = find;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xfind":293}],294:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduced2 = require('./_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XFindIndex = /*#__PURE__*/function () {
  function XFindIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.found = false;
  }
  XFindIndex.prototype['@@transducer/init'] = _xfBase3.default.init;
  XFindIndex.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, -1);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFindIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.found = true;
      result = (0, _reduced3.default)(this.xf['@@transducer/step'](result, this.idx));
    }
    return result;
  };

  return XFindIndex;
}();

var _xfindIndex = /*#__PURE__*/(0, _curry3.default)(function _xfindIndex(f, xf) {
  return new XFindIndex(f, xf);
});
exports.default = _xfindIndex;
},{"./_curry2":262,"./_reduced":312,"./_xfBase":323}],76:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xfindIndex2 = require('./internal/_xfindIndex');

var _xfindIndex3 = _interopRequireDefault(_xfindIndex2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the index of the first element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
 */
var findIndex = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xfindIndex3.default, function findIndex(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}));
exports.default = findIndex;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xfindIndex":294}],295:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XFindLast = /*#__PURE__*/function () {
  function XFindLast(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFindLast.prototype['@@transducer/init'] = _xfBase3.default.init;
  XFindLast.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
  };
  XFindLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.last = input;
    }
    return result;
  };

  return XFindLast;
}();

var _xfindLast = /*#__PURE__*/(0, _curry3.default)(function _xfindLast(f, xf) {
  return new XFindLast(f, xf);
});
exports.default = _xfindLast;
},{"./_curry2":262,"./_xfBase":323}],77:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xfindLast2 = require('./internal/_xfindLast');

var _xfindLast3 = _interopRequireDefault(_xfindLast2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the last element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
 */
var findLast = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xfindLast3.default, function findLast(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx -= 1;
  }
}));
exports.default = findLast;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xfindLast":295}],298:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XFindLastIndex = /*#__PURE__*/function () {
  function XFindLastIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.lastIdx = -1;
  }
  XFindLastIndex.prototype['@@transducer/init'] = _xfBase3.default.init;
  XFindLastIndex.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
  };
  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.lastIdx = this.idx;
    }
    return result;
  };

  return XFindLastIndex;
}();

var _xfindLastIndex = /*#__PURE__*/(0, _curry3.default)(function _xfindLastIndex(f, xf) {
  return new XFindLastIndex(f, xf);
});
exports.default = _xfindLastIndex;
},{"./_curry2":262,"./_xfBase":323}],78:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xfindLastIndex2 = require('./internal/_xfindLastIndex');

var _xfindLastIndex3 = _interopRequireDefault(_xfindLastIndex2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the index of the last element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
 */
var findLastIndex = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xfindLastIndex3.default, function findLastIndex(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }
    idx -= 1;
  }
  return -1;
}));
exports.default = findLastIndex;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xfindLastIndex":298}],79:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _makeFlat2 = require('./internal/_makeFlat');

var _makeFlat3 = _interopRequireDefault(_makeFlat2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list by pulling every item out of it (and all its sub-arrays)
 * and putting them in a new array, depth-first.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b]
 * @param {Array} list The array to consider.
 * @return {Array} The flattened list.
 * @see R.unnest
 * @example
 *
 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 */
var flatten = /*#__PURE__*/(0, _curry2.default)( /*#__PURE__*/(0, _makeFlat3.default)(true));
exports.default = flatten;
},{"./internal/_curry1":260,"./internal/_makeFlat":274}],80:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      var mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */
var flip = /*#__PURE__*/(0, _curry2.default)(function flip(fn) {
  return (0, _curryN2.default)(fn.length, function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});
exports.default = flip;
},{"./internal/_curry1":260,"./curryN":52}],81:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _checkForMethod2 = require('./internal/_checkForMethod');

var _checkForMethod3 = _interopRequireDefault(_checkForMethod2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Iterate over an input `list`, calling a provided function `fn` for each
 * element in the list.
 *
 * `fn` receives one argument: *(value)*.
 *
 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.forEach` method. For more
 * details on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
 *
 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
 * the original array. In some libraries this function is named `each`.
 *
 * Dispatches to the `forEach` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> *) -> [a] -> [a]
 * @param {Function} fn The function to invoke. Receives one argument, `value`.
 * @param {Array} list The list to iterate over.
 * @return {Array} The original list.
 * @see R.addIndex
 * @example
 *
 *      var printXPlusFive = x => console.log(x + 5);
 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
 *      // logs 6
 *      // logs 7
 *      // logs 8
 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
 */
var forEach = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _checkForMethod3.default)('forEach', function forEach(fn, list) {
  var len = list.length;
  var idx = 0;
  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }
  return list;
}));
exports.default = forEach;
},{"./internal/_checkForMethod":297,"./internal/_curry2":262}],82:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Iterate over an input `object`, calling a provided function `fn` for each
 * key and value in the object.
 *
 * `fn` receives three argument: *(value, key, obj)*.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Object
 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The object to iterate over.
 * @return {Object} The original object.
 * @example
 *
 *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);
 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
 *      // logs x:1
 *      // logs y:2
 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
 */
var forEachObjIndexed = /*#__PURE__*/(0, _curry3.default)(function forEachObjIndexed(fn, obj) {
  var keyList = (0, _keys2.default)(obj);
  var idx = 0;
  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }
  return obj;
});
exports.default = forEachObjIndexed;
},{"./internal/_curry2":262,"./keys":112}],83:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object from a list key-value pairs. If a key appears in
 * multiple pairs, the rightmost pair is included in the object.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [[k,v]] -> {k: v}
 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
 * @return {Object} The object made by pairing up `keys` and `values`.
 * @see R.toPairs, R.pair
 * @example
 *
 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
 */
var fromPairs = /*#__PURE__*/(0, _curry2.default)(function fromPairs(pairs) {
  var result = {};
  var idx = 0;
  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }
  return result;
});
exports.default = fromPairs;
},{"./internal/_curry1":260}],84:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _checkForMethod2 = require('./internal/_checkForMethod');

var _checkForMethod3 = _interopRequireDefault(_checkForMethod2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduceBy = require('./reduceBy');

var _reduceBy2 = _interopRequireDefault(_reduceBy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Splits a list into sub-lists stored in an object, based on the result of
 * calling a String-returning function on each element, and grouping the
 * results according to values returned.
 *
 * Dispatches to the `groupBy` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> String) -> [a] -> {String: [a]}
 * @param {Function} fn Function :: a -> String
 * @param {Array} list The array to group
 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
 *         that produced that key when passed to `fn`.
 * @see R.transduce
 * @example
 *
 *      var byGrade = R.groupBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Abby', score: 84},
 *                      {name: 'Eddy', score: 58},
 *                      // ...
 *                      {name: 'Jack', score: 69}];
 *      byGrade(students);
 *      // {
 *      //   'A': [{name: 'Dianne', score: 99}],
 *      //   'B': [{name: 'Abby', score: 84}]
 *      //   // ...,
 *      //   'F': [{name: 'Eddy', score: 58}]
 *      // }
 */
var groupBy = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _checkForMethod3.default)('groupBy', /*#__PURE__*/(0, _reduceBy2.default)(function (acc, item) {
  if (acc == null) {
    acc = [];
  }
  acc.push(item);
  return acc;
}, null)));
exports.default = groupBy;
},{"./internal/_checkForMethod":297,"./internal/_curry2":262,"./reduceBy":188}],85:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a list and returns a list of lists where each sublist's elements are
 * all satisfied pairwise comparison according to the provided function.
 * Only adjacent elements are passed to the comparison function.
 *
 * @func
 * @memberOf R
 * @since v0.21.0
 * @category List
 * @sig ((a, a) → Boolean) → [a] → [[a]]
 * @param {Function} fn Function for determining whether two given (adjacent)
 *        elements should be in the same group
 * @param {Array} list The array to group. Also accepts a string, which will be
 *        treated as a list of characters.
 * @return {List} A list that contains sublists of elements,
 *         whose concatenations are equal to the original list.
 * @example
 *
 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
 *
 * R.groupWith(R.eqBy(isVowel), 'aestiou')
 * //=> ['ae', 'st', 'iou']
 */
var groupWith = /*#__PURE__*/(0, _curry3.default)(function (fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    var nextidx = idx + 1;
    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
      nextidx += 1;
    }
    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }
  return res;
});
exports.default = groupWith;
},{"./internal/_curry2":262}],86:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */
var gt = /*#__PURE__*/(0, _curry3.default)(function gt(a, b) {
  return a > b;
});
exports.default = gt;
},{"./internal/_curry2":262}],87:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */
var gte = /*#__PURE__*/(0, _curry3.default)(function gte(a, b) {
  return a >= b;
});
exports.default = gte;
},{"./internal/_curry2":262}],88:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns whether or not an object has an own property with the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      var hasName = R.has('name');
 *      hasName({name: 'alice'});   //=> true
 *      hasName({name: 'bob'});     //=> true
 *      hasName({});                //=> false
 *
 *      var point = {x: 0, y: 0};
 *      var pointHas = R.has(R.__, point);
 *      pointHas('x');  //=> true
 *      pointHas('y');  //=> true
 *      pointHas('z');  //=> false
 */
var has = /*#__PURE__*/(0, _curry3.default)(_has3.default);
exports.default = has;
},{"./internal/_curry2":262,"./internal/_has":269}],89:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns whether or not an object or its prototype chain has a property with
 * the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      function Rectangle(width, height) {
 *        this.width = width;
 *        this.height = height;
 *      }
 *      Rectangle.prototype.area = function() {
 *        return this.width * this.height;
 *      };
 *
 *      var square = new Rectangle(2, 2);
 *      R.hasIn('width', square);  //=> true
 *      R.hasIn('area', square);  //=> true
 */
var hasIn = /*#__PURE__*/(0, _curry3.default)(function hasIn(prop, obj) {
  return prop in obj;
});
exports.default = hasIn;
},{"./internal/_curry2":262}],90:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nth = require('./nth');

var _nth2 = _interopRequireDefault(_nth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the first element of the given list or string. In some libraries
 * this function is named `first`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {Array|String} list
 * @return {*}
 * @see R.tail, R.init, R.last
 * @example
 *
 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
 *      R.head([]); //=> undefined
 *
 *      R.head('abc'); //=> 'a'
 *      R.head(''); //=> ''
 */
var head = /*#__PURE__*/(0, _nth2.default)(0);
exports.default = head;
},{"./nth":153}],299:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _identity;
function _identity(x) {
  return x;
}
},{}],92:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _identity2 = require('./internal/_identity');

var _identity3 = _interopRequireDefault(_identity2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      var obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */
var identity = /*#__PURE__*/(0, _curry2.default)(_identity3.default);
exports.default = identity;
},{"./internal/_curry1":260,"./internal/_identity":299}],93:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when
 * @example
 *
 *      var incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */
var ifElse = /*#__PURE__*/(0, _curry2.default)(function ifElse(condition, onTrue, onFalse) {
  return (0, _curryN2.default)(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});
exports.default = ifElse;
},{"./internal/_curry3":261,"./curryN":52}],94:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Increments its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n + 1
 * @see R.dec
 * @example
 *
 *      R.inc(42); //=> 43
 */
var inc = /*#__PURE__*/(0, _add2.default)(1);
exports.default = inc;
},{"./add":14}],95:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduceBy = require('./reduceBy');

var _reduceBy2 = _interopRequireDefault(_reduceBy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given a function that generates a key, turns a list of objects into an
 * object indexing the objects by the given key. Note that if multiple
 * objects generate the same value for the indexing key only the last value
 * will be included in the generated object.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
 * @param {Function} fn Function :: a -> String
 * @param {Array} array The array of objects to index
 * @return {Object} An object indexing each array element by the given property.
 * @example
 *
 *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
 *      R.indexBy(R.prop('id'), list);
 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
 */
var indexBy = /*#__PURE__*/(0, _reduceBy2.default)(function (acc, elem) {
  return elem;
}, null);
exports.default = indexBy;
},{"./reduceBy":188}],96:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _indexOf2 = require('./internal/_indexOf');

var _indexOf3 = _interopRequireDefault(_indexOf2);

var _isArray2 = require('./internal/_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the position of the first occurrence of an item in an array, or -1
 * if the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.lastIndexOf
 * @example
 *
 *      R.indexOf(3, [1,2,3,4]); //=> 2
 *      R.indexOf(10, [1,2,3,4]); //=> -1
 */
var indexOf = /*#__PURE__*/(0, _curry3.default)(function indexOf(target, xs) {
  return typeof xs.indexOf === 'function' && !(0, _isArray3.default)(xs) ? xs.indexOf(target) : (0, _indexOf3.default)(xs, target, 0);
});
exports.default = indexOf;
},{"./internal/_curry2":262,"./internal/_indexOf":300,"./internal/_isArray":270}],97:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns all but the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.last, R.head, R.tail
 * @example
 *
 *      R.init([1, 2, 3]);  //=> [1, 2]
 *      R.init([1, 2]);     //=> [1]
 *      R.init([1]);        //=> []
 *      R.init([]);         //=> []
 *
 *      R.init('abc');  //=> 'ab'
 *      R.init('ab');   //=> 'a'
 *      R.init('a');    //=> ''
 *      R.init('');     //=> ''
 */
var init = /*#__PURE__*/(0, _slice2.default)(0, -1);
exports.default = init;
},{"./slice":200}],98:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _containsWith2 = require('./internal/_containsWith');

var _containsWith3 = _interopRequireDefault(_containsWith2);

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _filter2 = require('./internal/_filter');

var _filter3 = _interopRequireDefault(_filter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list
 * `xs'` comprising each of the elements of `xs` which is equal to one or more
 * elements of `ys` according to `pred`.
 *
 * `pred` must be a binary function expecting an element from each list.
 *
 * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should
 * not be significant, but since `xs'` is ordered the implementation guarantees
 * that its values are in the same order as they appear in `xs`. Duplicates are
 * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Relation
 * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]
 * @param {Function} pred
 * @param {Array} xs
 * @param {Array} ys
 * @return {Array}
 * @see R.intersection
 * @example
 *
 *      R.innerJoin(
 *        (record, id) => record.id === id,
 *        [{id: 824, name: 'Richie Furay'},
 *         {id: 956, name: 'Dewey Martin'},
 *         {id: 313, name: 'Bruce Palmer'},
 *         {id: 456, name: 'Stephen Stills'},
 *         {id: 177, name: 'Neil Young'}],
 *        [177, 456, 999]
 *      );
 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
 */
var innerJoin = /*#__PURE__*/(0, _curry2.default)(function innerJoin(pred, xs, ys) {
  return (0, _filter3.default)(function (x) {
    return (0, _containsWith3.default)(pred, x, ys);
  }, xs);
});
exports.default = innerJoin;
},{"./internal/_containsWith":281,"./internal/_curry3":261,"./internal/_filter":291}],99:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Inserts the supplied element into the list, at the specified `index`. _Note that

 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */
var insert = /*#__PURE__*/(0, _curry2.default)(function insert(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});
exports.default = insert;
},{"./internal/_curry3":261}],100:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Inserts the sub-list into the list, at the specified `index`. _Note that this is not
 * destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig Number -> [a] -> [a] -> [a]
 * @param {Number} index The position to insert the sub-list
 * @param {Array} elts The sub-list to insert into the Array
 * @param {Array} list The list to insert the sub-list into
 * @return {Array} A new Array with `elts` inserted starting at `index`.
 * @example
 *
 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
 */
var insertAll = /*#__PURE__*/(0, _curry2.default)(function insertAll(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
});
exports.default = insertAll;
},{"./internal/_curry3":261}],320:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contains2 = require('./_contains');

var _contains3 = _interopRequireDefault(_contains2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Set = /*#__PURE__*/function () {
  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function (item) {
    return !hasOrAdd(item, true, this);
  };

  //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //
  _Set.prototype.has = function (item) {
    return hasOrAdd(item, false, this);
  };

  //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //
  return _Set;
}();

function hasOrAdd(item, shouldAdd, set) {
  var type = typeof item;
  var prevSize, newSize;
  switch (type) {
    case 'string':
    case 'number':
      // distinguish between +0 and -0
      if (item === 0 && 1 / item === -Infinity) {
        if (set._items['-0']) {
          return true;
        } else {
          if (shouldAdd) {
            set._items['-0'] = true;
          }
          return false;
        }
      }
      // these types can all utilise the native Set
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = {};
            set._items[type][item] = true;
          }
          return false;
        } else if (item in set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][item] = true;
          }
          return false;
        }
      }

    case 'boolean':
      // set._items['boolean'] holds a two element array
      // representing [ falseExists, trueExists ]
      if (type in set._items) {
        var bIdx = item ? 1 : 0;
        if (set._items[type][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type][bIdx] = true;
          }
          return false;
        }
      } else {
        if (shouldAdd) {
          set._items[type] = item ? [false, true] : [true, false];
        }
        return false;
      }

    case 'function':
      // compare functions for reference equality
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }
          return false;
        }
        if (!(0, _contains3.default)(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }
          return false;
        }
        return true;
      }

    case 'undefined':
      if (set._items[type]) {
        return true;
      } else {
        if (shouldAdd) {
          set._items[type] = true;
        }
        return false;
      }

    case 'object':
      if (item === null) {
        if (!set._items['null']) {
          if (shouldAdd) {
            set._items['null'] = true;
          }
          return false;
        }
        return true;
      }
    /* falls through */
    default:
      // reduce the search size of heterogeneous sets by creating buckets
      // for each type.
      type = Object.prototype.toString.call(item);
      if (!(type in set._items)) {
        if (shouldAdd) {
          set._items[type] = [item];
        }
        return false;
      }
      // scan through all previously applied items
      if (!(0, _contains3.default)(item, set._items[type])) {
        if (shouldAdd) {
          set._items[type].push(item);
        }
        return false;
      }
      return true;
  }
}

// A simple Set type that honours R.equals semantics
exports.default = _Set;
},{"./_contains":278}],239:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Set2 = require('./internal/_Set');

var _Set3 = _interopRequireDefault(_Set2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. [`R.equals`](#equals) is used for comparison.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */
var uniqBy = /*#__PURE__*/(0, _curry3.default)(function uniqBy(fn, list) {
  var set = new _Set3.default();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);
    if (set.add(appliedItem)) {
      result.push(item);
    }
    idx += 1;
  }
  return result;
});
exports.default = uniqBy;
},{"./internal/_Set":320,"./internal/_curry2":262}],238:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _identity = require('./identity');

var _identity2 = _interopRequireDefault(_identity);

var _uniqBy = require('./uniqBy');

var _uniqBy2 = _interopRequireDefault(_uniqBy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing only one copy of each element in the original
 * list. [`R.equals`](#equals) is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */
var uniq = /*#__PURE__*/(0, _uniqBy2.default)(_identity2.default);
exports.default = uniq;
},{"./identity":92,"./uniqBy":239}],101:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contains2 = require('./internal/_contains');

var _contains3 = _interopRequireDefault(_contains2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _filter2 = require('./internal/_filter');

var _filter3 = _interopRequireDefault(_filter2);

var _flip = require('./flip');

var _flip2 = _interopRequireDefault(_flip);

var _uniq = require('./uniq');

var _uniq2 = _interopRequireDefault(_uniq);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.innerJoin
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */
var intersection = /*#__PURE__*/(0, _curry3.default)(function intersection(list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  return (0, _uniq2.default)((0, _filter3.default)((0, _flip2.default)(_contains3.default)(lookupList), filteredList));
});
exports.default = intersection;
},{"./internal/_contains":278,"./internal/_curry2":262,"./internal/_filter":291,"./flip":80,"./uniq":238}],102:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _checkForMethod2 = require('./internal/_checkForMethod');

var _checkForMethod3 = _interopRequireDefault(_checkForMethod2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new list with the separator interposed between elements.
 *
 * Dispatches to the `intersperse` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} separator The element to add to the list.
 * @param {Array} list The list to be interposed.
 * @return {Array} The new list.
 * @example
 *
 *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
 */
var intersperse = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _checkForMethod3.default)('intersperse', function intersperse(separator, list) {
  var out = [];
  var idx = 0;
  var length = list.length;
  while (idx < length) {
    if (idx === length - 1) {
      out.push(list[idx]);
    } else {
      out.push(list[idx], separator);
    }
    idx += 1;
  }
  return out;
}));
exports.default = intersperse;
},{"./internal/_checkForMethod":297,"./internal/_curry2":262}],328:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _objectAssign;

var _has2 = require('./_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;
  while (idx < length) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if ((0, _has3.default)(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
}
},{"./_has":269}],305:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectAssign2 = require('./_objectAssign');

var _objectAssign3 = _interopRequireDefault(_objectAssign2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof Object.assign === 'function' ? Object.assign : _objectAssign3.default;
},{"./_objectAssign":328}],156:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates an object containing a single key:value pair.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @sig String -> a -> {String:a}
 * @param {String} key
 * @param {*} val
 * @return {Object}
 * @see R.pair
 * @example
 *
 *      var matchPhrases = R.compose(
 *        R.objOf('must'),
 *        R.map(R.objOf('match_phrase'))
 *      );
 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
 */
var objOf = /*#__PURE__*/(0, _curry3.default)(function objOf(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});
exports.default = objOf;
},{"./internal/_curry2":262}],302:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _stepCat;

var _assign2 = require('./_assign');

var _assign3 = _interopRequireDefault(_assign2);

var _identity2 = require('./_identity');

var _identity3 = _interopRequireDefault(_identity2);

var _isArrayLike2 = require('./_isArrayLike');

var _isArrayLike3 = _interopRequireDefault(_isArrayLike2);

var _isTransformer2 = require('./_isTransformer');

var _isTransformer3 = _interopRequireDefault(_isTransformer2);

var _objOf = require('../objOf');

var _objOf2 = _interopRequireDefault(_objOf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _stepCatArray = {
  '@@transducer/init': Array,
  '@@transducer/step': function (xs, x) {
    xs.push(x);
    return xs;
  },
  '@@transducer/result': _identity3.default
};
var _stepCatString = {
  '@@transducer/init': String,
  '@@transducer/step': function (a, b) {
    return a + b;
  },
  '@@transducer/result': _identity3.default
};
var _stepCatObject = {
  '@@transducer/init': Object,
  '@@transducer/step': function (result, input) {
    return (0, _assign3.default)(result, (0, _isArrayLike3.default)(input) ? (0, _objOf2.default)(input[0], input[1]) : input);
  },
  '@@transducer/result': _identity3.default
};

function _stepCat(obj) {
  if ((0, _isTransformer3.default)(obj)) {
    return obj;
  }
  if ((0, _isArrayLike3.default)(obj)) {
    return _stepCatArray;
  }
  if (typeof obj === 'string') {
    return _stepCatString;
  }
  if (typeof obj === 'object') {
    return _stepCatObject;
  }
  throw new Error('Cannot create transformer for ' + obj);
}
},{"./_assign":305,"./_identity":299,"./_isArrayLike":324,"./_isTransformer":301,"../objOf":156}],103:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _clone2 = require('./internal/_clone');

var _clone3 = _interopRequireDefault(_clone2);

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _isTransformer2 = require('./internal/_isTransformer');

var _isTransformer3 = _interopRequireDefault(_isTransformer2);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _stepCat2 = require('./internal/_stepCat');

var _stepCat3 = _interopRequireDefault(_stepCat2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transforms the items of the list with the transducer and appends the
 * transformed items to the accumulator using an appropriate iterator function
 * based on the accumulator type.
 *
 * The accumulator can be an array, string, object or a transformer. Iterated
 * items will be appended to arrays and concatenated to strings. Objects will
 * be merged directly or 2-item arrays will be merged as key, value pairs.
 *
 * The accumulator can also be a transformer object that provides a 2-arity
 * reducing iterator function, step, 0-arity initial value function, init, and
 * 1-arity result extraction function result. The step function is used as the
 * iterator function in reduce. The result function is used to convert the
 * final accumulator into the return type and in most cases is R.identity. The
 * init function is used to provide the initial accumulator.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the
 * transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig a -> (b -> b) -> [c] -> a
 * @param {*} acc The initial accumulator value.
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.into([], transducer, numbers); //=> [2, 3]
 *
 *      var intoArray = R.into([]);
 *      intoArray(transducer, numbers); //=> [2, 3]
 */
var into = /*#__PURE__*/(0, _curry2.default)(function into(acc, xf, list) {
  return (0, _isTransformer3.default)(acc) ? (0, _reduce3.default)(xf(acc), acc['@@transducer/init'](), list) : (0, _reduce3.default)(xf((0, _stepCat3.default)(acc)), (0, _clone3.default)(acc, [], [], false), list);
});
exports.default = into;
},{"./internal/_clone":277,"./internal/_curry3":261,"./internal/_isTransformer":301,"./internal/_reduce":266,"./internal/_stepCat":302}],104:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Same as [`R.invertObj`](#invertObj), however this accounts for objects with
 * duplicate values by putting the values into an array.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: [ s, ... ]}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object with keys in an array.
 * @see R.invertObj
 * @example
 *
 *      var raceResultsByFirstName = {
 *        first: 'alice',
 *        second: 'jake',
 *        third: 'alice',
 *      };
 *      R.invert(raceResultsByFirstName);
 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
 */
var invert = /*#__PURE__*/(0, _curry2.default)(function invert(obj) {
  var props = (0, _keys2.default)(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    var val = obj[key];
    var list = (0, _has3.default)(val, out) ? out[val] : out[val] = [];
    list[list.length] = key;
    idx += 1;
  }
  return out;
});
exports.default = invert;
},{"./internal/_curry1":260,"./internal/_has":269,"./keys":112}],105:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new object with the keys of the given object as values, and the
 * values of the given object, which are coerced to strings, as keys. Note
 * that the last key found is preferred when handling the same value.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: s}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object
 * @see R.invert
 * @example
 *
 *      var raceResults = {
 *        first: 'alice',
 *        second: 'jake'
 *      };
 *      R.invertObj(raceResults);
 *      //=> { 'alice': 'first', 'jake':'second' }
 *
 *      // Alternatively:
 *      var raceResults = ['alice', 'jake'];
 *      R.invertObj(raceResults);
 *      //=> { 'alice': '0', 'jake':'1' }
 */
var invertObj = /*#__PURE__*/(0, _curry2.default)(function invertObj(obj) {
  var props = (0, _keys2.default)(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    out[obj[key]] = key;
    idx += 1;
  }
  return out;
});
exports.default = invertObj;
},{"./internal/_curry1":260,"./keys":112}],106:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isFunction2 = require('./internal/_isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _toString = require('./toString');

var _toString2 = _interopRequireDefault(_toString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Turns a named method with a specified arity into a function that can be
 * called directly supplied with arguments and a target object.
 *
 * The returned function is curried and accepts `arity + 1` parameters where
 * the final parameter is the target object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
 * @param {Number} arity Number of arguments the returned function should take
 *        before the target object.
 * @param {String} method Name of the method to call.
 * @return {Function} A new curried function.
 * @see R.construct
 * @example
 *
 *      var sliceFrom = R.invoker(1, 'slice');
 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
 *      var sliceFrom6 = R.invoker(2, 'slice')(6);
 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
 * @symb R.invoker(0, 'method')(o) = o['method']()
 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
 */
var invoker = /*#__PURE__*/(0, _curry3.default)(function invoker(arity, method) {
  return (0, _curryN2.default)(arity + 1, function () {
    var target = arguments[arity];
    if (target != null && (0, _isFunction3.default)(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError((0, _toString2.default)(target) + ' does not have a method named "' + method + '"');
  });
});
exports.default = invoker;
},{"./internal/_curry2":262,"./internal/_isFunction":273,"./curryN":52,"./toString":224}],107:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * See if an object (`val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */
var is = /*#__PURE__*/(0, _curry3.default)(function is(Ctor, val) {
  return val != null && val.constructor === Ctor || val instanceof Ctor;
});
exports.default = is;
},{"./internal/_curry2":262}],108:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _empty = require('./empty');

var _empty2 = _interopRequireDefault(_empty);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the given value is its type's empty value; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> Boolean
 * @param {*} x
 * @return {Boolean}
 * @see R.empty
 * @example
 *
 *      R.isEmpty([1, 2, 3]);   //=> false
 *      R.isEmpty([]);          //=> true
 *      R.isEmpty('');          //=> true
 *      R.isEmpty(null);        //=> false
 *      R.isEmpty({});          //=> true
 *      R.isEmpty({length: 0}); //=> false
 */
var isEmpty = /*#__PURE__*/(0, _curry2.default)(function isEmpty(x) {
  return x != null && (0, _equals2.default)(x, (0, _empty2.default)(x));
});
exports.default = isEmpty;
},{"./internal/_curry1":260,"./empty":68,"./equals":72}],110:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invoker = require('./invoker');

var _invoker2 = _interopRequireDefault(_invoker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a string made by inserting the `separator` between each element and
 * concatenating all the elements into a single string.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig String -> [a] -> String
 * @param {Number|String} separator The string used to separate the elements.
 * @param {Array} xs The elements to join into a string.
 * @return {String} str The string made by concatenating `xs` with `separator`.
 * @see R.split
 * @example
 *
 *      var spacer = R.join(' ');
 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
 */
var join = /*#__PURE__*/(0, _invoker2.default)(1, 'join');
exports.default = join;
},{"./invoker":106}],111:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _converge = require('./converge');

var _converge2 = _interopRequireDefault(_converge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * juxt applies a list of functions to a list of values.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Function
 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
 * @param {Array} fns An array of functions
 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
 * @see R.applySpec
 * @example
 *
 *      var getRange = R.juxt([Math.min, Math.max]);
 *      getRange(3, 4, 9, -3); //=> [-3, 9]
 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
 */
var juxt = /*#__PURE__*/(0, _curry2.default)(function juxt(fns) {
  return (0, _converge2.default)(function () {
    return Array.prototype.slice.call(arguments, 0);
  }, fns);
});
exports.default = juxt;
},{"./internal/_curry1":260,"./converge":49}],113:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a list containing the names of all the properties of the supplied
 * object, including prototype properties.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own and prototype properties.
 * @see R.keys, R.valuesIn
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.keysIn(f); //=> ['x', 'y']
 */
var keysIn = /*#__PURE__*/(0, _curry2.default)(function keysIn(obj) {
  var prop;
  var ks = [];
  for (prop in obj) {
    ks[ks.length] = prop;
  }
  return ks;
});
exports.default = keysIn;
},{"./internal/_curry1":260}],115:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isArray2 = require('./internal/_isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the position of the last occurrence of an item in an array, or -1 if
 * the item is not included in the array. [`R.equals`](#equals) is used to
 * determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.indexOf
 * @example
 *
 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
 */
var lastIndexOf = /*#__PURE__*/(0, _curry3.default)(function lastIndexOf(target, xs) {
  if (typeof xs.lastIndexOf === 'function' && !(0, _isArray3.default)(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;
    while (idx >= 0) {
      if ((0, _equals2.default)(xs[idx], target)) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }
});
exports.default = lastIndexOf;
},{"./internal/_curry2":262,"./internal/_isArray":270,"./equals":72}],303:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _isNumber;
function _isNumber(x) {
  return Object.prototype.toString.call(x) === '[object Number]';
}
},{}],116:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _isNumber2 = require('./internal/_isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the number of elements in the array by returning `list.length`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [a] -> Number
 * @param {Array} list The array to inspect.
 * @return {Number} The length of the array.
 * @example
 *
 *      R.length([]); //=> 0
 *      R.length([1, 2, 3]); //=> 3
 */
var length = /*#__PURE__*/(0, _curry2.default)(function length(list) {
  return list != null && (0, _isNumber3.default)(list.length) ? list.length : NaN;
});
exports.default = length;
},{"./internal/_curry1":260,"./internal/_isNumber":303}],117:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a lens for the given getter and setter functions. The getter "gets"
 * the value of the focus; the setter "sets" the value of the focus. The setter
 * should not mutate the data structure.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
 * @param {Function} getter
 * @param {Function} setter
 * @return {Lens}
 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
var lens = /*#__PURE__*/(0, _curry3.default)(function lens(getter, setter) {
  return function (toFunctorFn) {
    return function (target) {
      return (0, _map2.default)(function (focus) {
        return setter(focus, target);
      }, toFunctorFn(getter(target)));
    };
  };
});
exports.default = lens;
},{"./internal/_curry2":262,"./map":125}],118:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _lens = require('./lens');

var _lens2 = _interopRequireDefault(_lens);

var _nth = require('./nth');

var _nth2 = _interopRequireDefault(_nth);

var _update = require('./update');

var _update2 = _interopRequireDefault(_update);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a lens whose focus is the specified index.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Number -> Lens s a
 * @param {Number} n
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
 */
var lensIndex = /*#__PURE__*/(0, _curry2.default)(function lensIndex(n) {
  return (0, _lens2.default)((0, _nth2.default)(n), (0, _update2.default)(n));
});
exports.default = lensIndex;
},{"./internal/_curry1":260,"./lens":117,"./nth":153,"./update":244}],119:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _assocPath = require('./assocPath');

var _assocPath2 = _interopRequireDefault(_assocPath);

var _lens = require('./lens');

var _lens2 = _interopRequireDefault(_lens);

var _path = require('./path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a lens whose focus is the specified path.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @typedefn Idx = String | Int
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig [Idx] -> Lens s a
 * @param {Array} path The path to use.
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xHeadYLens = R.lensPath(['x', 0, 'y']);
 *
 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> 2
 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
 */
var lensPath = /*#__PURE__*/(0, _curry2.default)(function lensPath(p) {
  return (0, _lens2.default)((0, _path2.default)(p), (0, _assocPath2.default)(p));
});
exports.default = lensPath;
},{"./internal/_curry1":260,"./assocPath":31,"./lens":117,"./path":166}],120:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _assoc = require('./assoc');

var _assoc2 = _interopRequireDefault(_assoc);

var _lens = require('./lens');

var _lens2 = _interopRequireDefault(_lens);

var _prop = require('./prop');

var _prop2 = _interopRequireDefault(_prop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a lens whose focus is the specified property.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig String -> Lens s a
 * @param {String} k
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
var lensProp = /*#__PURE__*/(0, _curry2.default)(function lensProp(k) {
  return (0, _lens2.default)((0, _prop2.default)(k), (0, _assoc2.default)(k));
});
exports.default = lensProp;
},{"./internal/_curry1":260,"./assoc":30,"./lens":117,"./prop":180}],123:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the first argument is less than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.gt
 * @example
 *
 *      R.lt(2, 1); //=> false
 *      R.lt(2, 2); //=> false
 *      R.lt(2, 3); //=> true
 *      R.lt('a', 'z'); //=> true
 *      R.lt('z', 'a'); //=> false
 */
var lt = /*#__PURE__*/(0, _curry3.default)(function lt(a, b) {
  return a < b;
});
exports.default = lt;
},{"./internal/_curry2":262}],124:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */
var lte = /*#__PURE__*/(0, _curry3.default)(function lte(a, b) {
  return a <= b;
});
exports.default = lte;
},{"./internal/_curry2":262}],126:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The `mapAccum` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from left to right, and returning a final value of this
 * accumulator together with the new list.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccumRight
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var appender = (a, b) => [a + b, a + b];
 *
 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
 * @symb R.mapAccum(f, a, [b, c, d]) = [
 *   f(f(f(a, b)[0], c)[0], d)[0],
 *   [
 *     f(a, b)[1],
 *     f(f(a, b)[0], c)[1],
 *     f(f(f(a, b)[0], c)[0], d)[1]
 *   ]
 * ]
 */
var mapAccum = /*#__PURE__*/(0, _curry2.default)(function mapAccum(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var tuple = [acc];
  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }
  return [tuple[0], result];
});
exports.default = mapAccum;
},{"./internal/_curry3":261}],127:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The `mapAccumRight` function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from right to left, and returning a final value of this
 * accumulator together with the new list.
 *
 * Similar to [`mapAccum`](#mapAccum), except moves through the input list from
 * the right to the left.
 *
 * The iterator function receives two arguments, *value* and *acc*, and should
 * return a tuple *[value, acc]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccum
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var append = (a, b) => [a + b, a + b];
 *
 *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']
 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
 *   [
 *     f(b, f(c, f(d, a)[0])[0])[1],
 *     f(c, f(d, a)[0])[1],
 *     f(d, a)[1],
 *   ]
 *   f(b, f(c, f(d, a)[0])[0])[0],
 * ]
 */
var mapAccumRight = /*#__PURE__*/(0, _curry2.default)(function mapAccumRight(fn, acc, list) {
  var idx = list.length - 1;
  var result = [];
  var tuple = [acc];
  while (idx >= 0) {
    tuple = fn(list[idx], tuple[0]);
    result[idx] = tuple[1];
    idx -= 1;
  }
  return [result, tuple[0]];
});
exports.default = mapAccumRight;
},{"./internal/_curry3":261}],128:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _keys = require('./keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An Object-specific version of [`map`](#map). The function is applied to three
 * arguments: *(value, key, obj)*. If only the value is significant, use
 * [`map`](#map) instead.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig ((*, String, Object) -> *) -> Object -> Object
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @see R.map
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
 *
 *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */
var mapObjIndexed = /*#__PURE__*/(0, _curry3.default)(function mapObjIndexed(fn, obj) {
  return (0, _reduce3.default)(function (acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, (0, _keys2.default)(obj));
});
exports.default = mapObjIndexed;
},{"./internal/_curry2":262,"./internal/_reduce":266,"./keys":112}],129:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Tests a regular expression against a String. Note that this function will
 * return an empty array when there are no matches. This differs from
 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
 * which returns `null` when there are no matches.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig RegExp -> String -> [String | Undefined]
 * @param {RegExp} rx A regular expression.
 * @param {String} str The string to match against
 * @return {Array} The list of matches or empty array.
 * @see R.test
 * @example
 *
 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
 *      R.match(/a/, 'b'); //=> []
 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
 */
var match = /*#__PURE__*/(0, _curry3.default)(function match(rx, str) {
  return str.match(rx) || [];
});
exports.default = match;
},{"./internal/_curry2":262}],130:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isInteger2 = require('./internal/_isInteger');

var _isInteger3 = _interopRequireDefault(_isInteger2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `mathMod` behaves like the modulo operator should mathematically, unlike the
 * `%` operator (and by extension, [`R.modulo`](#modulo)). So while
 * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer
 * arguments, and returns NaN when the modulus is zero or negative.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} m The dividend.
 * @param {Number} p the modulus.
 * @return {Number} The result of `b mod a`.
 * @see R.modulo
 * @example
 *
 *      R.mathMod(-17, 5);  //=> 3
 *      R.mathMod(17, 5);   //=> 2
 *      R.mathMod(17, -5);  //=> NaN
 *      R.mathMod(17, 0);   //=> NaN
 *      R.mathMod(17.2, 5); //=> NaN
 *      R.mathMod(17, 5.3); //=> NaN
 *
 *      var clock = R.mathMod(R.__, 12);
 *      clock(15); //=> 3
 *      clock(24); //=> 0
 *
 *      var seventeenMod = R.mathMod(17);
 *      seventeenMod(3);  //=> 2
 *      seventeenMod(4);  //=> 1
 *      seventeenMod(10); //=> 7
 */
var mathMod = /*#__PURE__*/(0, _curry3.default)(function mathMod(m, p) {
  if (!(0, _isInteger3.default)(m)) {
    return NaN;
  }
  if (!(0, _isInteger3.default)(p) || p < 1) {
    return NaN;
  }
  return (m % p + p) % p;
});
exports.default = mathMod;
},{"./internal/_curry2":262,"./internal/_isInteger":271}],132:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function and two values, and returns whichever value produces the
 * larger result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.max, R.minBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.maxBy(square, -3, 2); //=> -3
 *
 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
 *      R.reduce(R.maxBy(square), 0, []); //=> 0
 */
var maxBy = /*#__PURE__*/(0, _curry2.default)(function maxBy(f, a, b) {
  return f(b) > f(a) ? b : a;
});
exports.default = maxBy;
},{"./internal/_curry3":261}],210:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _add = require('./add');

var _add2 = _interopRequireDefault(_add);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Adds together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The sum of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.sum([2,4,6,8,100,1]); //=> 121
 */
var sum = /*#__PURE__*/(0, _reduce2.default)(_add2.default, 0);
exports.default = sum;
},{"./add":14,"./reduce":187}],133:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _sum = require('./sum');

var _sum2 = _interopRequireDefault(_sum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the mean of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.median
 * @example
 *
 *      R.mean([2, 7, 9]); //=> 6
 *      R.mean([]); //=> NaN
 */
var mean = /*#__PURE__*/(0, _curry2.default)(function mean(list) {
  return (0, _sum2.default)(list) / list.length;
});
exports.default = mean;
},{"./internal/_curry1":260,"./sum":210}],134:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _mean = require('./mean');

var _mean2 = _interopRequireDefault(_mean);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the median of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @see R.mean
 * @example
 *
 *      R.median([2, 9, 7]); //=> 7
 *      R.median([7, 2, 10, 9]); //=> 8
 *      R.median([]); //=> NaN
 */
var median = /*#__PURE__*/(0, _curry2.default)(function median(list) {
  var len = list.length;
  if (len === 0) {
    return NaN;
  }
  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return (0, _mean2.default)(Array.prototype.slice.call(list, 0).sort(function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});
exports.default = median;
},{"./internal/_curry1":260,"./mean":133}],136:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an
 * additional function that will be applied to a given argument set and used to
 * create the cache key under which the results of the function to be memoized
 * will be stored. Care must be taken when implementing key generation to avoid
 * clashes that may overwrite previous entries erroneously.
 *
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to generate the cache key.
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @see R.memoize
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoizeWith(R.identity, n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */
var memoizeWith = /*#__PURE__*/(0, _curry3.default)(function memoizeWith(mFn, fn) {
  var cache = {};
  return (0, _arity3.default)(fn.length, function () {
    var key = mFn.apply(this, arguments);
    if (!(0, _has3.default)(key, cache)) {
      cache[key] = fn.apply(this, arguments);
    }
    return cache[key];
  });
});
exports.default = memoizeWith;
},{"./internal/_arity":272,"./internal/_curry2":262,"./internal/_has":269}],135:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _memoizeWith = require('./memoizeWith');

var _memoizeWith2 = _interopRequireDefault(_memoizeWith);

var _toString = require('./toString');

var _toString2 = _interopRequireDefault(_toString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new function that, when invoked, caches the result of calling `fn`
 * for a given argument set and returns the result. Subsequent calls to the
 * memoized `fn` with the same argument set will not result in an additional
 * call to `fn`; instead, the cached result for that set of arguments will be
 * returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @see R.memoizeWith
 * @deprecated since v0.25.0
 * @example
 *
 *      let count = 0;
 *      const factorial = R.memoize(n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */
var memoize = /*#__PURE__*/(0, _memoizeWith2.default)(function () {
  return (0, _toString2.default)(arguments);
});
exports.default = memoize;
},{"./memoizeWith":136,"./toString":224}],137:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('./internal/_assign');

var _assign3 = _interopRequireDefault(_assign2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      var resetToDefault = R.merge(R.__, {x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }
 */
var merge = /*#__PURE__*/(0, _curry3.default)(function merge(l, r) {
  return (0, _assign3.default)({}, l, r);
});
exports.default = merge;
},{"./internal/_assign":305,"./internal/_curry2":262}],138:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign2 = require('./internal/_assign');

var _assign3 = _interopRequireDefault(_assign2);

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Merges a list of objects together into one object.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig [{k: v}] -> {k: v}
 * @param {Array} list An array of objects
 * @return {Object} A merged object.
 * @see R.reduce
 * @example
 *
 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
 */
var mergeAll = /*#__PURE__*/(0, _curry2.default)(function mergeAll(list) {
  return _assign3.default.apply(null, [{}].concat(list));
});
exports.default = mergeAll;
},{"./internal/_assign":305,"./internal/_curry1":260}],144:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWithKey, R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */
var mergeWithKey = /*#__PURE__*/(0, _curry2.default)(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if ((0, _has3.default)(k, l)) {
      result[k] = (0, _has3.default)(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if ((0, _has3.default)(k, r) && !(0, _has3.default)(k, result)) {
      result[k] = r[k];
    }
  }

  return result;
});
exports.default = mergeWithKey;
},{"./internal/_curry3":261,"./internal/_has":269}],142:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _isObject2 = require('./internal/_isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _mergeWithKey = require('./mergeWithKey');

var _mergeWithKey2 = _interopRequireDefault(_mergeWithKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to the key and associated values
 *   using the resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeDeepWithKey(concatValues,
 *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
 *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
 *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
 */
var mergeDeepWithKey = /*#__PURE__*/(0, _curry2.default)(function mergeDeepWithKey(fn, lObj, rObj) {
  return (0, _mergeWithKey2.default)(function (k, lVal, rVal) {
    if ((0, _isObject3.default)(lVal) && (0, _isObject3.default)(rVal)) {
      return mergeDeepWithKey(fn, lVal, rVal);
    } else {
      return fn(k, lVal, rVal);
    }
  }, lObj, rObj);
});
exports.default = mergeDeepWithKey;
},{"./internal/_curry3":261,"./internal/_isObject":289,"./mergeWithKey":144}],139:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _mergeDeepWithKey = require('./mergeDeepWithKey');

var _mergeDeepWithKey2 = _interopRequireDefault(_mergeDeepWithKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the first object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                      { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
 */
var mergeDeepLeft = /*#__PURE__*/(0, _curry3.default)(function mergeDeepLeft(lObj, rObj) {
  return (0, _mergeDeepWithKey2.default)(function (k, lVal, rVal) {
    return lVal;
  }, lObj, rObj);
});
exports.default = mergeDeepLeft;
},{"./internal/_curry2":262,"./mergeDeepWithKey":142}],140:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _mergeDeepWithKey = require('./mergeDeepWithKey');

var _mergeDeepWithKey2 = _interopRequireDefault(_mergeDeepWithKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects:
 * - and both values are objects, the two values will be recursively merged
 * - otherwise the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig {a} -> {a} -> {a}
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
 *                       { age: 40, contact: { email: 'baa@example.com' }});
 *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}
 */
var mergeDeepRight = /*#__PURE__*/(0, _curry3.default)(function mergeDeepRight(lObj, rObj) {
  return (0, _mergeDeepWithKey2.default)(function (k, lVal, rVal) {
    return rVal;
  }, lObj, rObj);
});
exports.default = mergeDeepRight;
},{"./internal/_curry2":262,"./mergeDeepWithKey":142}],141:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _mergeDeepWithKey = require('./mergeDeepWithKey');

var _mergeDeepWithKey2 = _interopRequireDefault(_mergeDeepWithKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object with the own properties of the two provided objects.
 * If a key exists in both objects:
 * - and both associated values are also objects then the values will be
 *   recursively merged.
 * - otherwise the provided function is applied to associated values using the
 *   resulting value as the new value associated with the key.
 * If a key only exists in one object, the value will be associated with the key
 * of the resulting object.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} lObj
 * @param {Object} rObj
 * @return {Object}
 * @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey
 * @example
 *
 *      R.mergeDeepWith(R.concat,
 *                      { a: true, c: { values: [10, 20] }},
 *                      { b: true, c: { values: [15, 35] }});
 *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}
 */
var mergeDeepWith = /*#__PURE__*/(0, _curry2.default)(function mergeDeepWith(fn, lObj, rObj) {
  return (0, _mergeDeepWithKey2.default)(function (k, lVal, rVal) {
    return fn(lVal, rVal);
  }, lObj, rObj);
});
exports.default = mergeDeepWith;
},{"./internal/_curry3":261,"./mergeDeepWithKey":142}],143:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _mergeWithKey = require('./mergeWithKey');

var _mergeWithKey2 = _interopRequireDefault(_mergeWithKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the values
 * associated with the key in each object, with the result being used as the
 * value associated with the key in the returned object.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeDeepWith, R.merge, R.mergeWithKey
 * @example
 *
 *      R.mergeWith(R.concat,
 *                  { a: true, values: [10, 20] },
 *                  { b: true, values: [15, 35] });
 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
 */
var mergeWith = /*#__PURE__*/(0, _curry2.default)(function mergeWith(fn, l, r) {
  return (0, _mergeWithKey2.default)(function (_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});
exports.default = mergeWith;
},{"./internal/_curry3":261,"./mergeWithKey":144}],145:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the smaller of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.minBy, R.max
 * @example
 *
 *      R.min(789, 123); //=> 123
 *      R.min('a', 'b'); //=> 'a'
 */
var min = /*#__PURE__*/(0, _curry3.default)(function min(a, b) {
  return b < a ? b : a;
});
exports.default = min;
},{"./internal/_curry2":262}],146:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function and two values, and returns whichever value produces the
 * smaller result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.min, R.maxBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.minBy(square, -3, 2); //=> 2
 *
 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
 */
var minBy = /*#__PURE__*/(0, _curry2.default)(function minBy(f, a, b) {
  return f(b) < f(a) ? b : a;
});
exports.default = minBy;
},{"./internal/_curry3":261}],147:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Divides the first parameter by the second and returns the remainder. Note
 * that this function preserves the JavaScript-style behavior for modulo. For
 * mathematical modulo see [`mathMod`](#mathMod).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The value to the divide.
 * @param {Number} b The pseudo-modulus
 * @return {Number} The result of `b % a`.
 * @see R.mathMod
 * @example
 *
 *      R.modulo(17, 3); //=> 2
 *      // JS behavior:
 *      R.modulo(-17, 3); //=> -2
 *      R.modulo(17, -3); //=> 2
 *
 *      var isOdd = R.modulo(R.__, 2);
 *      isOdd(42); //=> 0
 *      isOdd(21); //=> 1
 */
var modulo = /*#__PURE__*/(0, _curry3.default)(function modulo(a, b) {
  return a % b;
});
exports.default = modulo;
},{"./internal/_curry2":262}],148:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Multiplies two numbers. Equivalent to `a * b` but curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a * b`.
 * @see R.divide
 * @example
 *
 *      var double = R.multiply(2);
 *      var triple = R.multiply(3);
 *      double(3);       //=>  6
 *      triple(4);       //=> 12
 *      R.multiply(2, 5);  //=> 10
 */
var multiply = /*#__PURE__*/(0, _curry3.default)(function multiply(a, b) {
  return a * b;
});
exports.default = multiply;
},{"./internal/_curry2":262}],150:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Negates its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number}
 * @example
 *
 *      R.negate(42); //=> -42
 */
var negate = /*#__PURE__*/(0, _curry2.default)(function negate(n) {
  return -n;
});
exports.default = negate;
},{"./internal/_curry1":260}],151:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _complement2 = require('./internal/_complement');

var _complement3 = _interopRequireDefault(_complement2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xany2 = require('./internal/_xany');

var _xany3 = _interopRequireDefault(_xany2);

var _any = require('./any');

var _any2 = _interopRequireDefault(_any);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if no elements of the list match the predicate, `false`
 * otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
 * @see R.all, R.any
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *      var isOdd = n => n % 2 === 1;
 *
 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
 *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false
 */
var none = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _complement3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['any'], _xany3.default, _any2.default)));
exports.default = none;
},{"./internal/_complement":306,"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xany":265,"./any":21}],154:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

var _nth = require('./nth');

var _nth2 = _interopRequireDefault(_nth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function which returns its nth argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig Number -> *... -> *
 * @param {Number} n
 * @return {Function}
 * @example
 *
 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
 * @symb R.nthArg(-1)(a, b, c) = c
 * @symb R.nthArg(0)(a, b, c) = a
 * @symb R.nthArg(1)(a, b, c) = b
 */
var nthArg = /*#__PURE__*/(0, _curry2.default)(function nthArg(n) {
  var arity = n < 0 ? 1 : n + 1;
  return (0, _curryN2.default)(arity, function () {
    return (0, _nth2.default)(n, arguments);
  });
});
exports.default = nthArg;
},{"./internal/_curry1":260,"./curryN":52,"./nth":153}],155:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `o` is a curried composition function that returns a unary function.
 * Like [`compose`](#compose), `o` performs right-to-left function composition.
 * Unlike [`compose`](#compose), the rightmost function passed to `o` will be
 * invoked with only one argument.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category Function
 * @sig (b -> c) -> (a -> b) -> a -> c
 * @param {Function} f
 * @param {Function} g
 * @return {Function}
 * @see R.compose, R.pipe
 * @example
 *
 *      var classyGreeting = name => "The name's " + name.last + ", " + name.first + " " + name.last
 *      var yellGreeting = R.o(R.toUpper, classyGreeting);
 *      yellGreeting({first: 'James', last: 'Bond'}); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.o(R.multiply(10), R.add(10))(-4) //=> 60
 *
 * @symb R.o(f, g, x) = f(g(x))
 */
var o = /*#__PURE__*/(0, _curry2.default)(function o(f, g, x) {
  return f(g(x));
});
exports.default = o;
},{"./internal/_curry3":261}],307:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _of;
function _of(x) {
  return [x];
}
},{}],157:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _of2 = require('./internal/_of');

var _of3 = _interopRequireDefault(_of2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a singleton array containing the value provided.
 *
 * Note this `of` is different from the ES6 `of`; See
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> [a]
 * @param {*} x any value
 * @return {Array} An array wrapping `x`.
 * @example
 *
 *      R.of(null); //=> [null]
 *      R.of([42]); //=> [[42]]
 */
var of = /*#__PURE__*/(0, _curry2.default)(_of3.default);
exports.default = of;
},{"./internal/_curry1":260,"./internal/_of":307}],158:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a partial copy of an object omitting the keys specified.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [String] -> {String: *} -> {String: *}
 * @param {Array} names an array of String property names to omit from the new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with properties from `names` not on it.
 * @see R.pick
 * @example
 *
 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
 */
var omit = /*#__PURE__*/(0, _curry3.default)(function omit(names, obj) {
  var result = {};
  var index = {};
  var idx = 0;
  var len = names.length;

  while (idx < len) {
    index[names[idx]] = 1;
    idx += 1;
  }

  for (var prop in obj) {
    if (!index.hasOwnProperty(prop)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});
exports.default = omit;
},{"./internal/_curry2":262}],159:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Accepts a function `fn` and returns a function that guards invocation of
 * `fn` such that `fn` can only ever be called once, no matter how many times
 * the returned function is invoked. The first value calculated is returned in
 * subsequent invocations.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a... -> b) -> (a... -> b)
 * @param {Function} fn The function to wrap in a call-only-once wrapper.
 * @return {Function} The wrapped function.
 * @example
 *
 *      var addOneOnce = R.once(x => x + 1);
 *      addOneOnce(10); //=> 11
 *      addOneOnce(addOneOnce(50)); //=> 11
 */
var once = /*#__PURE__*/(0, _curry2.default)(function once(fn) {
  var called = false;
  var result;
  return (0, _arity3.default)(fn.length, function () {
    if (called) {
      return result;
    }
    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});
exports.default = once;
},{"./internal/_arity":272,"./internal/_curry1":260}],161:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// `Identity` is a functor that holds a single value, where `map` simply
// transforms the held value with the provided function.
var Identity = function (x) {
  return { value: x, map: function (f) {
      return Identity(f(x));
    } };
};

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the result of applying the given function to
 * the focused value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> (a -> a) -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
 */
var over = /*#__PURE__*/(0, _curry2.default)(function over(lens, f, x) {
  // The value returned by the getter function is first transformed with `f`,
  // then set as the value of an `Identity`. This is then mapped over with the
  // setter function of the lens.
  return lens(function (y) {
    return Identity(f(y));
  })(x).value;
});
exports.default = over;
},{"./internal/_curry3":261}],162:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category List
 * @sig a -> b -> (a,b)
 * @param {*} fst
 * @param {*} snd
 * @return {Array}
 * @see R.objOf, R.of
 * @example
 *
 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
 */
var pair = /*#__PURE__*/(0, _curry3.default)(function pair(fst, snd) {
  return [fst, snd];
});
exports.default = pair;
},{"./internal/_curry2":262}],308:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _createPartialApplicator;

var _arity2 = require('./_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createPartialApplicator(concat) {
  return (0, _curry3.default)(function (fn, args) {
    return (0, _arity3.default)(Math.max(0, fn.length - args.length), function () {
      return fn.apply(this, concat(args, arguments));
    });
  });
}
},{"./_arity":272,"./_curry2":262}],163:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _createPartialApplicator2 = require('./internal/_createPartialApplicator');

var _createPartialApplicator3 = _interopRequireDefault(_createPartialApplicator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided initially followed by the arguments provided to `g`.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partialRight
 * @example
 *
 *      var multiply2 = (a, b) => a * b;
 *      var double = R.partial(multiply2, [2]);
 *      double(2); //=> 4
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var sayHello = R.partial(greet, ['Hello']);
 *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
 */
var partial = /*#__PURE__*/(0, _createPartialApplicator3.default)(_concat3.default);
exports.default = partial;
},{"./internal/_concat":259,"./internal/_createPartialApplicator":308}],164:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _createPartialApplicator2 = require('./internal/_createPartialApplicator');

var _createPartialApplicator3 = _interopRequireDefault(_createPartialApplicator2);

var _flip = require('./flip');

var _flip2 = _interopRequireDefault(_flip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided to `g` followed by the arguments provided initially.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partial
 * @example
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
 *
 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
 */
var partialRight = /*#__PURE__*/(0, _createPartialApplicator3.default)( /*#__PURE__*/(0, _flip2.default)(_concat3.default));
exports.default = partialRight;
},{"./internal/_concat":259,"./internal/_createPartialApplicator":308,"./flip":80}],165:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _filter = require('./filter');

var _filter2 = _interopRequireDefault(_filter);

var _juxt = require('./juxt');

var _juxt2 = _interopRequireDefault(_juxt);

var _reject = require('./reject');

var _reject2 = _interopRequireDefault(_reject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a predicate and a list or other `Filterable` object and returns the
 * pair of filterable objects of the same type of elements which do and do not
 * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
 * that has a filter method such as `Array`.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
 * @param {Function} pred A predicate to determine which side the element belongs to.
 * @param {Array} filterable the list (or other filterable) to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @see R.filter, R.reject
 * @example
 *
 *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 *
 *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
 */
var partition = /*#__PURE__*/(0, _juxt2.default)([_filter2.default, _reject2.default]);
exports.default = partition;
},{"./filter":74,"./juxt":111,"./reject":192}],167:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

var _path2 = require('./path');

var _path3 = _interopRequireDefault(_path2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Determines whether a nested path on an object has a specific value, in
 * [`R.equals`](#equals) terms. Most likely used to filter a list.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Relation
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> Boolean
 * @param {Array} path The path of the nested property to use
 * @param {*} val The value to compare the nested property with
 * @param {Object} obj The object to check the nested property in
 * @return {Boolean} `true` if the value equals the nested object property,
 *         `false` otherwise.
 * @example
 *
 *      var user1 = { address: { zipCode: 90210 } };
 *      var user2 = { address: { zipCode: 55555 } };
 *      var user3 = { name: 'Bob' };
 *      var users = [ user1, user2, user3 ];
 *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
 *      R.filter(isFamous, users); //=> [ user1 ]
 */
var pathEq = /*#__PURE__*/(0, _curry2.default)(function pathEq(_path, val, obj) {
  return (0, _equals2.default)((0, _path3.default)(_path, obj), val);
});
exports.default = pathEq;
},{"./internal/_curry3":261,"./equals":72,"./path":166}],168:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _defaultTo = require('./defaultTo');

var _defaultTo2 = _interopRequireDefault(_defaultTo);

var _path = require('./path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig a -> [Idx] -> {a} -> a
 * @param {*} d The default value.
 * @param {Array} p The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
 */
var pathOr = /*#__PURE__*/(0, _curry2.default)(function pathOr(d, p, obj) {
  return (0, _defaultTo2.default)(d, (0, _path2.default)(p, obj));
});
exports.default = pathOr;
},{"./internal/_curry3":261,"./defaultTo":54,"./path":166}],169:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _path = require('./path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the specified object property at given path satisfies the
 * given predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Logic
 * @typedefn Idx = String | Int
 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
 * @param {Function} pred
 * @param {Array} propPath
 * @param {*} obj
 * @return {Boolean}
 * @see R.propSatisfies, R.path
 * @example
 *
 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
 */
var pathSatisfies = /*#__PURE__*/(0, _curry2.default)(function pathSatisfies(pred, propPath, obj) {
  return propPath.length > 0 && pred((0, _path2.default)(propPath, obj));
});
exports.default = pathSatisfies;
},{"./internal/_curry3":261,"./path":166}],170:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */
var pick = /*#__PURE__*/(0, _curry3.default)(function pick(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});
exports.default = pick;
},{"./internal/_curry2":262}],171:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Similar to `pick` except that this one includes a `key: undefined` pair for
 * properties that don't exist.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.pick
 * @example
 *
 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
 */
var pickAll = /*#__PURE__*/(0, _curry3.default)(function pickAll(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }
  return result;
});
exports.default = pickAll;
},{"./internal/_curry2":262}],172:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a partial copy of an object containing only the keys that satisfy
 * the supplied predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}
 * @param {Function} pred A predicate to determine whether or not a key
 *        should be included on the output object.
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties that satisfy `pred`
 *         on it.
 * @see R.pick, R.filter
 * @example
 *
 *      var isUpperCase = (val, key) => key.toUpperCase() === key;
 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
 */
var pickBy = /*#__PURE__*/(0, _curry3.default)(function pickBy(test, obj) {
  var result = {};
  for (var prop in obj) {
    if (test(obj[prop], prop, obj)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});
exports.default = pickBy;
},{"./internal/_curry2":262}],174:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pipeK;

var _composeK = require('./composeK');

var _composeK2 = _interopRequireDefault(_composeK);

var _reverse = require('./reverse');

var _reverse2 = _interopRequireDefault(_reverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the left-to-right Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
 * @param {...Function}
 * @return {Function}
 * @see R.composeK
 * @example
 *
 *      //  parseJson :: String -> Maybe *
 *      //  get :: String -> Object -> Maybe *
 *
 *      //  getStateCode :: Maybe String -> Maybe String
 *      var getStateCode = R.pipeK(
 *        parseJson,
 *        get('user'),
 *        get('address'),
 *        get('state'),
 *        R.compose(Maybe.of, R.toUpper)
 *      );
 *
 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
 *      //=> Just('NY')
 *      getStateCode('[Invalid JSON]');
 *      //=> Nothing()
 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
 */
function pipeK() {
  if (arguments.length === 0) {
    throw new Error('pipeK requires at least one argument');
  }
  return _composeK2.default.apply(this, (0, _reverse2.default)(arguments));
}
},{"./composeK":42,"./reverse":196}],177:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list with the given element at the front, followed by the
 * contents of the list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The item to add to the head of the output list.
 * @param {Array} list The array to add to the tail of the output list.
 * @return {Array} A new array.
 * @see R.append
 * @example
 *
 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
 */
var prepend = /*#__PURE__*/(0, _curry3.default)(function prepend(el, list) {
  return (0, _concat3.default)([el], list);
});
exports.default = prepend;
},{"./internal/_concat":259,"./internal/_curry2":262}],178:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _multiply = require('./multiply');

var _multiply2 = _interopRequireDefault(_multiply);

var _reduce = require('./reduce');

var _reduce2 = _interopRequireDefault(_reduce);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Multiplies together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The product of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.product([2,4,6,8,100,1]); //=> 38400
 */
var product = /*#__PURE__*/(0, _reduce2.default)(_multiply2.default, 1);
exports.default = product;
},{"./multiply":148,"./reduce":187}],245:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Accepts a function `fn` and a list of transformer functions and returns a
 * new curried function. When the new function is invoked, it calls the
 * function `fn` with parameters consisting of the result of calling each
 * supplied handler on successive arguments to the new function.
 *
 * If more arguments are passed to the returned function than transformer
 * functions, those arguments are passed directly to `fn` as additional
 * parameters. If you expect additional arguments that don't need to be
 * transformed, although you can ignore them, it's best to pass an identity
 * function so that the new function reports the correct arity.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} fn The function to wrap.
 * @param {Array} transformers A list of transformer functions
 * @return {Function} The wrapped function.
 * @see R.converge
 * @example
 *
 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
 */
var useWith = /*#__PURE__*/(0, _curry3.default)(function useWith(fn, transformers) {
  return (0, _curryN2.default)(transformers.length, function () {
    var args = [];
    var idx = 0;
    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }
    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});
exports.default = useWith;
},{"./internal/_curry2":262,"./curryN":52}],179:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _map2 = require('./internal/_map');

var _map3 = _interopRequireDefault(_map2);

var _identity = require('./identity');

var _identity2 = _interopRequireDefault(_identity);

var _pickAll = require('./pickAll');

var _pickAll2 = _interopRequireDefault(_pickAll);

var _useWith = require('./useWith');

var _useWith2 = _interopRequireDefault(_useWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Reasonable analog to SQL `select` statement.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @category Relation
 * @sig [k] -> [{k: v}] -> [{k: v}]
 * @param {Array} props The property names to project
 * @param {Array} objs The objects to query
 * @return {Array} An array of objects with just the `props` properties.
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
 *      var kids = [abby, fred];
 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
 */
var project = /*#__PURE__*/(0, _useWith2.default)(_map3.default, [_pickAll2.default, _identity2.default]); // passing `identity` gives correct arity
exports.default = project;
},{"./internal/_map":279,"./identity":92,"./pickAll":171,"./useWith":245}],181:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the specified object property is equal, in
 * [`R.equals`](#equals) terms, to the given value; `false` otherwise.
 * You can test multiple properties with [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig String -> a -> Object -> Boolean
 * @param {String} name
 * @param {*} val
 * @param {*} obj
 * @return {Boolean}
 * @see R.whereEq, R.propSatisfies, R.equals
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
 *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
 *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
 *      var kids = [abby, fred, rusty, alois];
 *      var hasBrownHair = R.propEq('hair', 'brown');
 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
 */
var propEq = /*#__PURE__*/(0, _curry2.default)(function propEq(name, val, obj) {
  return (0, _equals2.default)(val, obj[name]);
});
exports.default = propEq;
},{"./internal/_curry3":261,"./equals":72}],182:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _is = require('./is');

var _is2 = _interopRequireDefault(_is);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the specified object property is of the given type;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Type
 * @sig Type -> String -> Object -> Boolean
 * @param {Function} type
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.is, R.propSatisfies
 * @example
 *
 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
 *      R.propIs(Number, 'x', {});            //=> false
 */
var propIs = /*#__PURE__*/(0, _curry2.default)(function propIs(type, name, obj) {
  return (0, _is2.default)(type, obj[name]);
});
exports.default = propIs;
},{"./internal/_curry3":261,"./is":107}],183:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * If the given, non-null object has an own property with the specified name,
 * returns the value of that property. Otherwise returns the provided default
 * value.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Object
 * @sig a -> String -> Object -> a
 * @param {*} val The default value.
 * @param {String} p The name of the property to return.
 * @param {Object} obj The object to query.
 * @return {*} The value of given property of the supplied object or the default value.
 * @example
 *
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var favorite = R.prop('favoriteLibrary');
 *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
 *
 *      favorite(alice);  //=> undefined
 *      favoriteWithDefault(alice);  //=> 'Ramda'
 */
var propOr = /*#__PURE__*/(0, _curry2.default)(function propOr(val, p, obj) {
  return obj != null && (0, _has3.default)(p, obj) ? obj[p] : val;
});
exports.default = propOr;
},{"./internal/_curry3":261,"./internal/_has":269}],184:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns `true` if the specified object property satisfies the given
 * predicate; `false` otherwise. You can test multiple properties with
 * [`R.where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Logic
 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
 * @param {Function} pred
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.where, R.propEq, R.propIs
 * @example
 *
 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
 */
var propSatisfies = /*#__PURE__*/(0, _curry2.default)(function propSatisfies(pred, name, obj) {
  return pred(obj[name]);
});
exports.default = propSatisfies;
},{"./internal/_curry3":261}],185:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> [v]
 * @param {Array} ps The property names to fetch
 * @param {Object} obj The object to query
 * @return {Array} The corresponding values or partially applied function.
 * @example
 *
 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
 *
 *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
 */
var props = /*#__PURE__*/(0, _curry3.default)(function props(ps, obj) {
  var len = ps.length;
  var out = [];
  var idx = 0;

  while (idx < len) {
    out[idx] = obj[ps[idx]];
    idx += 1;
  }

  return out;
});
exports.default = props;
},{"./internal/_curry2":262}],186:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isNumber2 = require('./internal/_isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> Number -> [Number]
 * @param {Number} from The first number in the list.
 * @param {Number} to One more than the last number in the list.
 * @return {Array} The list of numbers in tthe set `[a, b)`.
 * @example
 *
 *      R.range(1, 5);    //=> [1, 2, 3, 4]
 *      R.range(50, 53);  //=> [50, 51, 52]
 */
var range = /*#__PURE__*/(0, _curry3.default)(function range(from, to) {
  if (!((0, _isNumber3.default)(from) && (0, _isNumber3.default)(to))) {
    throw new TypeError('Both arguments to range must be numbers');
  }
  var result = [];
  var n = from;
  while (n < to) {
    result.push(n);
    n += 1;
  }
  return result;
});
exports.default = range;
},{"./internal/_curry2":262,"./internal/_isNumber":303}],189:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * Similar to [`reduce`](#reduce), except moves through the input list from the
 * right to the left.
 *
 * The iterator function receives two values: *(value, acc)*, while the arguments'
 * order of `reduce`'s iterator function is *(acc, value)*.
 *
 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduceRight` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> b) -> b -> [a] -> b
 * @param {Function} fn The iterator function. Receives two values, the current element from the array
 *        and the accumulator.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.addIndex
 * @example
 *
 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
 *      //    -               -2
 *      //   / \              / \
 *      //  1   -            1   3
 *      //     / \              / \
 *      //    2   -     ==>    2  -1
 *      //       / \              / \
 *      //      3   -            3   4
 *      //         / \              / \
 *      //        4   0            4   0
 *
 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
 */
var reduceRight = /*#__PURE__*/(0, _curry2.default)(function reduceRight(fn, acc, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    acc = fn(list[idx], acc);
    idx -= 1;
  }
  return acc;
});
exports.default = reduceRight;
},{"./internal/_curry3":261}],190:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curryN2 = require('./internal/_curryN');

var _curryN3 = _interopRequireDefault(_curryN2);

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _reduced2 = require('./internal/_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating
 * through the list, successively calling the iterator function. `reduceWhile`
 * also takes a predicate that is evaluated before each step. If the predicate
 * returns `false`, it "short-circuits" the iteration and returns the current
 * value of the accumulator.
 *
 * @func
 * @memberOf R
 * @since v0.22.0
 * @category List
 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} pred The predicate. It is passed the accumulator and the
 *        current element.
 * @param {Function} fn The iterator function. Receives two values, the
 *        accumulator and the current element.
 * @param {*} a The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced
 * @example
 *
 *      var isOdd = (acc, x) => x % 2 === 1;
 *      var xs = [1, 3, 5, 60, 777, 800];
 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
 *
 *      var ys = [2, 4, 6]
 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
 */
var reduceWhile = /*#__PURE__*/(0, _curryN3.default)(4, [], function _reduceWhile(pred, fn, a, list) {
  return (0, _reduce3.default)(function (acc, x) {
    return pred(acc, x) ? fn(acc, x) : (0, _reduced3.default)(acc);
  }, a, list);
});
exports.default = reduceWhile;
},{"./internal/_curryN":280,"./internal/_reduce":266,"./internal/_reduced":312}],191:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _reduced2 = require('./internal/_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a value wrapped to indicate that it is the final value of the reduce
 * and transduce functions. The returned value should be considered a black
 * box: the internal structure is not guaranteed to be stable.
 *
 * Note: this optimization is unavailable to functions not explicitly listed
 * above. For instance, it is not currently supported by
 * [`reduceRight`](#reduceRight).
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category List
 * @sig a -> *
 * @param {*} x The final value of the reduce.
 * @return {*} The wrapped value.
 * @see R.reduce, R.transduce
 * @example
 *
 *     R.reduce(
 *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),
 *       [],
 *       [1, 2, 3, 4, 5]) // [1, 2, 3]
 */
var reduced = /*#__PURE__*/(0, _curry2.default)(_reduced3.default);
exports.default = reduced;
},{"./internal/_curry1":260,"./internal/_reduced":312}],220:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Calls an input function `n` times, returning an array containing the results
 * of those function calls.
 *
 * `fn` is passed one argument: The current value of `n`, which begins at `0`
 * and is gradually incremented to `n - 1`.
 *
 * @func
 * @memberOf R
 * @since v0.2.3
 * @category List
 * @sig (Number -> a) -> Number -> [a]
 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
 * @return {Array} An array containing the return values of all calls to `fn`.
 * @see R.repeat
 * @example
 *
 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
 * @symb R.times(f, 0) = []
 * @symb R.times(f, 1) = [f(0)]
 * @symb R.times(f, 2) = [f(0), f(1)]
 */
var times = /*#__PURE__*/(0, _curry3.default)(function times(fn, n) {
  var len = Number(n);
  var idx = 0;
  var list;

  if (len < 0 || isNaN(len)) {
    throw new RangeError('n must be a non-negative number');
  }
  list = new Array(len);
  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }
  return list;
});
exports.default = times;
},{"./internal/_curry2":262}],194:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _always = require('./always');

var _always2 = _interopRequireDefault(_always);

var _times = require('./times');

var _times2 = _interopRequireDefault(_times);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a fixed list of size `n` containing a specified identical value.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig a -> n -> [a]
 * @param {*} value The value to repeat.
 * @param {Number} n The desired size of the output list.
 * @return {Array} A new array containing `n` `value`s.
 * @see R.times
 * @example
 *
 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
 *
 *      var obj = {};
 *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
 * @symb R.repeat(a, 0) = []
 * @symb R.repeat(a, 1) = [a]
 * @symb R.repeat(a, 2) = [a, a]
 */
var repeat = /*#__PURE__*/(0, _curry3.default)(function repeat(value, n) {
  return (0, _times2.default)((0, _always2.default)(value), n);
});
exports.default = repeat;
},{"./internal/_curry2":262,"./always":19,"./times":220}],195:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Replace a substring or regex match in a string with a replacement.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category String
 * @sig RegExp|String -> String -> String -> String
 * @param {RegExp|String} pattern A regular expression or a substring to match.
 * @param {String} replacement The string to replace the matches with.
 * @param {String} str The String to do the search and replacement in.
 * @return {String} The result.
 * @example
 *
 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *
 *      // Use the "g" (global) flag to replace all occurrences:
 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
 */
var replace = /*#__PURE__*/(0, _curry2.default)(function replace(regex, replacement, str) {
  return str.replace(regex, replacement);
});
exports.default = replace;
},{"./internal/_curry3":261}],197:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Scan is similar to [`reduce`](#reduce), but returns a list of successively
 * reduced values from the left
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> [a]
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {Array} A list of all intermediately reduced values.
 * @see R.reduce
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
 */
var scan = /*#__PURE__*/(0, _curry2.default)(function scan(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [acc];
  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }
  return result;
});
exports.default = scan;
},{"./internal/_curry3":261}],198:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _ap = require('./ap');

var _ap2 = _interopRequireDefault(_ap);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _prepend = require('./prepend');

var _prepend2 = _interopRequireDefault(_prepend);

var _reduceRight = require('./reduceRight');

var _reduceRight2 = _interopRequireDefault(_reduceRight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
 * Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
 * @param {Function} of
 * @param {*} traversable
 * @return {*}
 * @see R.traverse
 * @example
 *
 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
 *
 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
 */
var sequence = /*#__PURE__*/(0, _curry3.default)(function sequence(of, traversable) {
  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : (0, _reduceRight2.default)(function (x, acc) {
    return (0, _ap2.default)((0, _map2.default)(_prepend2.default, x), acc);
  }, of([]), traversable);
});
exports.default = sequence;
},{"./internal/_curry2":262,"./ap":23,"./map":125,"./prepend":177,"./reduceRight":189}],199:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _always = require('./always');

var _always2 = _interopRequireDefault(_always);

var _over = require('./over');

var _over2 = _interopRequireDefault(_over);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> a -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
 */
var set = /*#__PURE__*/(0, _curry2.default)(function set(lens, v, x) {
  return (0, _over2.default)(lens, (0, _always2.default)(v), x);
});
exports.default = set;
},{"./internal/_curry3":261,"./always":19,"./over":161}],201:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, a) -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      var diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */
var sort = /*#__PURE__*/(0, _curry3.default)(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});
exports.default = sort;
},{"./internal/_curry2":262}],202:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = R.sortBy(R.prop(0));
 *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      var people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */
var sortBy = /*#__PURE__*/(0, _curry3.default)(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});
exports.default = sortBy;
},{"./internal/_curry2":262}],203:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sorts a list according to a list of comparators.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Relation
 * @sig [(a, a) -> Number] -> [a] -> [a]
 * @param {Array} functions A list of comparator functions.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted according to the comarator functions.
 * @example
 *
 *      var alice = {
 *        name: 'alice',
 *        age: 40
 *      };
 *      var bob = {
 *        name: 'bob',
 *        age: 30
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 40
 *      };
 *      var people = [clara, bob, alice];
 *      var ageNameSort = R.sortWith([
 *        R.descend(R.prop('age')),
 *        R.ascend(R.prop('name'))
 *      ]);
 *      ageNameSort(people); //=> [alice, clara, bob]
 */
var sortWith = /*#__PURE__*/(0, _curry3.default)(function sortWith(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var result = 0;
    var i = 0;
    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }
    return result;
  });
});
exports.default = sortWith;
},{"./internal/_curry2":262}],204:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invoker = require('./invoker');

var _invoker2 = _interopRequireDefault(_invoker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Splits a string into an array of strings based on the given
 * separator.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig (String | RegExp) -> String -> [String]
 * @param {String|RegExp} sep The pattern.
 * @param {String} str The string to separate into an array.
 * @return {Array} The array of strings from `str` separated by `str`.
 * @see R.join
 * @example
 *
 *      var pathComponents = R.split('/');
 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
 *
 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
 */
var split = /*#__PURE__*/(0, _invoker2.default)(1, 'split');
exports.default = split;
},{"./invoker":106}],205:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _length = require('./length');

var _length2 = _interopRequireDefault(_length);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Splits a given list or string at a given index.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig Number -> [a] -> [[a], [a]]
 * @sig Number -> String -> [String, String]
 * @param {Number} index The index where the array/string is split.
 * @param {Array|String} array The array/string to be split.
 * @return {Array}
 * @example
 *
 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
 */
var splitAt = /*#__PURE__*/(0, _curry3.default)(function splitAt(index, array) {
  return [(0, _slice2.default)(0, index, array), (0, _slice2.default)(index, (0, _length2.default)(array), array)];
});
exports.default = splitAt;
},{"./internal/_curry2":262,"./length":116,"./slice":200}],206:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Splits a collection into slices of the specified length.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @sig Number -> String -> [String]
 * @param {Number} n
 * @param {Array} list
 * @return {Array}
 * @example
 *
 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
 */
var splitEvery = /*#__PURE__*/(0, _curry3.default)(function splitEvery(n, list) {
  if (n <= 0) {
    throw new Error('First argument to splitEvery must be a positive integer');
  }
  var result = [];
  var idx = 0;
  while (idx < list.length) {
    result.push((0, _slice2.default)(idx, idx += n, list));
  }
  return result;
});
exports.default = splitEvery;
},{"./internal/_curry2":262,"./slice":200}],207:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a list and a predicate and returns a pair of lists with the following properties:
 *
 *  - the result of concatenating the two output lists is equivalent to the input list;
 *  - none of the elements of the first output list satisfies the predicate; and
 *  - if the second output list is non-empty, its first element satisfies the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
 * @param {Function} pred The predicate that determines where the array is split.
 * @param {Array} list The array to be split.
 * @return {Array}
 * @example
 *
 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
 */
var splitWhen = /*#__PURE__*/(0, _curry3.default)(function splitWhen(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];

  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }

  return [prefix, Array.prototype.slice.call(list, idx)];
});
exports.default = splitWhen;
},{"./internal/_curry2":262}],208:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

var _take = require('./take');

var _take2 = _interopRequireDefault(_take);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if a list starts with the provided values
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> Boolean
 * @sig String -> Boolean
 * @param {*} prefix
 * @param {*} list
 * @return {Boolean}
 * @example
 *
 *      R.startsWith('a', 'abc')                //=> true
 *      R.startsWith('b', 'abc')                //=> false
 *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
 *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
 */
var startsWith = /*#__PURE__*/(0, _curry3.default)(function (prefix, list) {
  return (0, _equals2.default)((0, _take2.default)(prefix.length, list), prefix);
});
exports.default = startsWith;
},{"./internal/_curry2":262,"./equals":72,"./take":214}],209:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Subtracts its second argument from its first argument.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a - b`.
 * @see R.add
 * @example
 *
 *      R.subtract(10, 8); //=> 2
 *
 *      var minus5 = R.subtract(R.__, 5);
 *      minus5(17); //=> 12
 *
 *      var complementaryAngle = R.subtract(90);
 *      complementaryAngle(30); //=> 60
 *      complementaryAngle(72); //=> 18
 */
var subtract = /*#__PURE__*/(0, _curry3.default)(function subtract(a, b) {
  return Number(a) - Number(b);
});
exports.default = subtract;
},{"./internal/_curry2":262}],211:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _concat = require('./concat');

var _concat2 = _interopRequireDefault(_concat);

var _difference = require('./difference');

var _difference2 = _interopRequireDefault(_difference);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
 * @example
 *
 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
 */
var symmetricDifference = /*#__PURE__*/(0, _curry3.default)(function symmetricDifference(list1, list2) {
  return (0, _concat2.default)((0, _difference2.default)(list1, list2), (0, _difference2.default)(list2, list1));
});
exports.default = symmetricDifference;
},{"./internal/_curry2":262,"./concat":44,"./difference":56}],212:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _concat = require('./concat');

var _concat2 = _interopRequireDefault(_concat);

var _differenceWith = require('./differenceWith');

var _differenceWith2 = _interopRequireDefault(_differenceWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both. Duplication is determined according to the value
 * returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifference, R.difference, R.differenceWith
 * @example
 *
 *      var eqA = R.eqBy(R.prop('a'));
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
 *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
 */
var symmetricDifferenceWith = /*#__PURE__*/(0, _curry2.default)(function symmetricDifferenceWith(pred, list1, list2) {
  return (0, _concat2.default)((0, _differenceWith2.default)(pred, list1, list2), (0, _differenceWith2.default)(pred, list2, list1));
});
exports.default = symmetricDifferenceWith;
},{"./internal/_curry3":261,"./concat":44,"./differenceWith":57}],216:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing the last `n` elements of a given list, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropLastWhile, R.addIndex
 * @example
 *
 *      var isNotOne = x => x !== 1;
 *
 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 *
 *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'
 */
var takeLastWhile = /*#__PURE__*/(0, _curry3.default)(function takeLastWhile(fn, xs) {
  var idx = xs.length - 1;
  while (idx >= 0 && fn(xs[idx])) {
    idx -= 1;
  }
  return (0, _slice2.default)(idx + 1, Infinity, xs);
});
exports.default = takeLastWhile;
},{"./internal/_curry2":262,"./slice":200}],314:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _reduced2 = require('./_reduced');

var _reduced3 = _interopRequireDefault(_reduced2);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XTakeWhile = /*#__PURE__*/function () {
  function XTakeWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTakeWhile.prototype['@@transducer/init'] = _xfBase3.default.init;
  XTakeWhile.prototype['@@transducer/result'] = _xfBase3.default.result;
  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : (0, _reduced3.default)(result);
  };

  return XTakeWhile;
}();

var _xtakeWhile = /*#__PURE__*/(0, _curry3.default)(function _xtakeWhile(f, xf) {
  return new XTakeWhile(f, xf);
});
exports.default = _xtakeWhile;
},{"./_curry2":262,"./_reduced":312,"./_xfBase":323}],217:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xtakeWhile2 = require('./internal/_xtakeWhile');

var _xtakeWhile3 = _interopRequireDefault(_xtakeWhile2);

var _slice = require('./slice');

var _slice2 = _interopRequireDefault(_slice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing the first `n` elements of a given list,
 * passing each value to the supplied predicate function, and terminating when
 * the predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * Dispatches to the `takeWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @sig (a -> Boolean) -> String -> String
 * @param {Function} fn The function called per iteration.
 * @param {Array} xs The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropWhile, R.transduce, R.addIndex
 * @example
 *
 *      var isNotFour = x => x !== 4;
 *
 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
 *
 *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'
 */
var takeWhile = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)(['takeWhile'], _xtakeWhile3.default, function takeWhile(fn, xs) {
  var idx = 0;
  var len = xs.length;
  while (idx < len && fn(xs[idx])) {
    idx += 1;
  }
  return (0, _slice2.default)(0, idx, xs);
}));
exports.default = takeWhile;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xtakeWhile":314,"./slice":200}],315:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _xfBase2 = require('./_xfBase');

var _xfBase3 = _interopRequireDefault(_xfBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var XTap = /*#__PURE__*/function () {
  function XTap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTap.prototype['@@transducer/init'] = _xfBase3.default.init;
  XTap.prototype['@@transducer/result'] = _xfBase3.default.result;
  XTap.prototype['@@transducer/step'] = function (result, input) {
    this.f(input);
    return this.xf['@@transducer/step'](result, input);
  };

  return XTap;
}();

var _xtap = /*#__PURE__*/(0, _curry3.default)(function _xtap(f, xf) {
  return new XTap(f, xf);
});
exports.default = _xtap;
},{"./_curry2":262,"./_xfBase":323}],218:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _dispatchable2 = require('./internal/_dispatchable');

var _dispatchable3 = _interopRequireDefault(_dispatchable2);

var _xtap2 = require('./internal/_xtap');

var _xtap3 = _interopRequireDefault(_xtap2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runs the given function with the supplied object, then returns the object.
 *
 * Acts as a transducer if a transformer is given as second parameter.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> *) -> a -> a
 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
 * @param {*} x
 * @return {*} `x`.
 * @example
 *
 *      var sayX = x => console.log('x is ' + x);
 *      R.tap(sayX, 100); //=> 100
 *      // logs 'x is 100'
 * @symb R.tap(f, a) = a
 */
var tap = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _dispatchable3.default)([], _xtap3.default, function tap(fn, x) {
  fn(x);
  return x;
}));
exports.default = tap;
},{"./internal/_curry2":262,"./internal/_dispatchable":263,"./internal/_xtap":315}],317:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _isRegExp;
function _isRegExp(x) {
  return Object.prototype.toString.call(x) === '[object RegExp]';
}
},{}],219:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cloneRegExp2 = require('./internal/_cloneRegExp');

var _cloneRegExp3 = _interopRequireDefault(_cloneRegExp2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _isRegExp2 = require('./internal/_isRegExp');

var _isRegExp3 = _interopRequireDefault(_isRegExp2);

var _toString = require('./toString');

var _toString2 = _interopRequireDefault(_toString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Determines whether a given string matches a given regular expression.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category String
 * @sig RegExp -> String -> Boolean
 * @param {RegExp} pattern
 * @param {String} str
 * @return {Boolean}
 * @see R.match
 * @example
 *
 *      R.test(/^x/, 'xyz'); //=> true
 *      R.test(/^y/, 'xyz'); //=> false
 */
var test = /*#__PURE__*/(0, _curry3.default)(function test(pattern, str) {
  if (!(0, _isRegExp3.default)(pattern)) {
    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + (0, _toString2.default)(pattern));
  }
  return (0, _cloneRegExp3.default)(pattern).test(str);
});
exports.default = test;
},{"./internal/_cloneRegExp":316,"./internal/_curry2":262,"./internal/_isRegExp":317,"./toString":224}],221:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invoker = require('./invoker');

var _invoker2 = _interopRequireDefault(_invoker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The lower case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to lower case.
 * @return {String} The lower case version of `str`.
 * @see R.toUpper
 * @example
 *
 *      R.toLower('XYZ'); //=> 'xyz'
 */
var toLower = /*#__PURE__*/(0, _invoker2.default)(0, 'toLowerCase');
exports.default = toLower;
},{"./invoker":106}],222:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts an object into an array of key, value arrays. Only the object's
 * own properties are used.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own properties.
 * @see R.fromPairs
 * @example
 *
 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
 */
var toPairs = /*#__PURE__*/(0, _curry2.default)(function toPairs(obj) {
  var pairs = [];
  for (var prop in obj) {
    if ((0, _has3.default)(prop, obj)) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
  }
  return pairs;
});
exports.default = toPairs;
},{"./internal/_curry1":260,"./internal/_has":269}],223:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts an object into an array of key, value arrays. The object's own
 * properties and prototype properties are used. Note that the order of the
 * output array is not guaranteed to be consistent across different JS
 * platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own
 *         and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
 */
var toPairsIn = /*#__PURE__*/(0, _curry2.default)(function toPairsIn(obj) {
  var pairs = [];
  for (var prop in obj) {
    pairs[pairs.length] = [prop, obj[prop]];
  }
  return pairs;
});
exports.default = toPairsIn;
},{"./internal/_curry1":260}],225:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invoker = require('./invoker');

var _invoker2 = _interopRequireDefault(_invoker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The upper case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to upper case.
 * @return {String} The upper case version of `str`.
 * @see R.toLower
 * @example
 *
 *      R.toUpper('abc'); //=> 'ABC'
 */
var toUpper = /*#__PURE__*/(0, _invoker2.default)(0, 'toUpperCase');
exports.default = toUpper;
},{"./invoker":106}],226:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduce2 = require('./internal/_reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _xwrap2 = require('./internal/_xwrap');

var _xwrap3 = _interopRequireDefault(_xwrap2);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Initializes a transducer using supplied iterator function. Returns a single
 * item by iterating through the list, successively calling the transformed
 * iterator function and passing it an accumulator value and the current value
 * from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It will be
 * wrapped as a transformer to initialize the transducer. A transformer can be
 * passed directly in place of an iterator function. In both cases, iteration
 * may be stopped early with the [`R.reduced`](#reduced) function.
 *
 * A transducer is a function that accepts a transformer and returns a
 * transformer and can be composed directly.
 *
 * A transformer is an an object that provides a 2-arity reducing iterator
 * function, step, 0-arity initial value function, init, and 1-arity result
 * extraction function, result. The step function is used as the iterator
 * function in reduce. The result function is used to convert the final
 * accumulator into the return type and in most cases is
 * [`R.identity`](#identity). The init function can be used to provide an
 * initial accumulator, but is ignored by transduce.
 *
 * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array. Wrapped as transformer, if necessary, and used to
 *        initialize the transducer
 * @param {*} acc The initial accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced, R.into
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
 *
 *      var isOdd = (x) => x % 2 === 1;
 *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
 *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
 */
var transduce = /*#__PURE__*/(0, _curryN2.default)(4, function transduce(xf, fn, acc, list) {
  return (0, _reduce3.default)(xf(typeof fn === 'function' ? (0, _xwrap3.default)(fn) : fn), acc, list);
});
exports.default = transduce;
},{"./internal/_reduce":266,"./internal/_xwrap":318,"./curryN":52}],227:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transposes the rows and columns of a 2D list.
 * When passed a list of `n` lists of length `x`,
 * returns a list of `x` lists of length `n`.
 *
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [[a]] -> [[a]]
 * @param {Array} list A 2D list
 * @return {Array} A 2D list
 * @example
 *
 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 *
 *      // If some of the rows are shorter than the following rows, their elements are skipped:
 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
 */
var transpose = /*#__PURE__*/(0, _curry2.default)(function transpose(outerlist) {
  var i = 0;
  var result = [];
  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;
    while (j < innerlist.length) {
      if (typeof result[j] === 'undefined') {
        result[j] = [];
      }
      result[j].push(innerlist[j]);
      j += 1;
    }
    i += 1;
  }
  return result;
});
exports.default = transpose;
},{"./internal/_curry1":260}],228:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _sequence = require('./sequence');

var _sequence2 = _interopRequireDefault(_sequence);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
 * into an Applicative of Traversable.
 *
 * Dispatches to the `traverse` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
 * @param {Function} of
 * @param {Function} f
 * @param {*} traversable
 * @return {*}
 * @see R.sequence
 * @example
 *
 *      // Returns `Nothing` if the given divisor is `0`
 *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
 *
 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
 */
var traverse = /*#__PURE__*/(0, _curry2.default)(function traverse(of, f, traversable) {
  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : (0, _sequence2.default)(of, (0, _map2.default)(f, traversable));
});
exports.default = traverse;
},{"./internal/_curry3":261,"./map":125,"./sequence":198}],229:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
var zeroWidth = '\u200b';
var hasProtoTrim = typeof String.prototype.trim === 'function';
/**
 * Removes (strips) whitespace from both ends of the string.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to trim.
 * @return {String} Trimmed version of `str`.
 * @example
 *
 *      R.trim('   xyz  '); //=> 'xyz'
 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
 */
var _trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? function trim(str) {
  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
  return str.replace(beginRx, '').replace(endRx, '');
} : function trim(str) {
  return str.trim();
};
var trim = /*#__PURE__*/(0, _curry2.default)(_trim);
exports.default = trim;
},{"./internal/_curry1":260}],230:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arity2 = require('./internal/_arity');

var _arity3 = _interopRequireDefault(_arity2);

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
 */
var tryCatch = /*#__PURE__*/(0, _curry3.default)(function _tryCatch(tryer, catcher) {
  return (0, _arity3.default)(tryer.length, function () {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, (0, _concat3.default)([e], arguments));
    }
  });
});
exports.default = tryCatch;
},{"./internal/_arity":272,"./internal/_concat":259,"./internal/_curry2":262}],232:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a function `fn`, which takes a single array argument, and returns a
 * function which:
 *
 *   - takes any number of positional arguments;
 *   - passes these arguments to `fn` as an array; and
 *   - returns the result.
 *
 * In other words, `R.unapply` derives a variadic function from a function which
 * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Function
 * @sig ([*...] -> a) -> (*... -> a)
 * @param {Function} fn
 * @return {Function}
 * @see R.apply
 * @example
 *
 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
 * @symb R.unapply(f)(a, b) = f([a, b])
 */
var unapply = /*#__PURE__*/(0, _curry2.default)(function unapply(fn) {
  return function () {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});
exports.default = unapply;
},{"./internal/_curry1":260}],233:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

var _nAry = require('./nAry');

var _nAry2 = _interopRequireDefault(_nAry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 1 parameter. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> b) -> (a -> b)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 1.
 * @see R.binary, R.nAry
 * @example
 *
 *      var takesTwoArgs = function(a, b) {
 *        return [a, b];
 *      };
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.unary(takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only 1 argument is passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.unary(f)(a, b, c) = f(a)
 */
var unary = /*#__PURE__*/(0, _curry2.default)(function unary(fn) {
  return (0, _nAry2.default)(1, fn);
});
exports.default = unary;
},{"./internal/_curry1":260,"./nAry":149}],234:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _curryN = require('./curryN');

var _curryN2 = _interopRequireDefault(_curryN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a function of arity `n` from a (manually) curried function.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Function
 * @sig Number -> (a -> b) -> (a -> c)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to uncurry.
 * @return {Function} A new function.
 * @see R.curry
 * @example
 *
 *      var addFour = a => b => c => d => a + b + c + d;
 *
 *      var uncurriedAddFour = R.uncurryN(4, addFour);
 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
 */
var uncurryN = /*#__PURE__*/(0, _curry3.default)(function uncurryN(depth, fn) {
  return (0, _curryN2.default)(depth, function () {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;
    while (currentDepth <= depth && typeof value === 'function') {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }
    return value;
  });
});
exports.default = uncurryN;
},{"./internal/_curry2":262,"./curryN":52}],235:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Builds a list from a seed value. Accepts an iterator function, which returns
 * either false to stop iteration or an array of length 2 containing the value
 * to add to the resulting list and the seed to be used in the next call to the
 * iterator function.
 *
 * The iterator function receives one argument: *(seed)*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a -> [b]) -> * -> [b]
 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
 *        either false to quit iteration or an array of length two to proceed. The element
 *        at index 0 of this array will be added to the resulting array, and the element
 *        at index 1 will be passed to the next call to `fn`.
 * @param {*} seed The seed value.
 * @return {Array} The final list.
 * @example
 *
 *      var f = n => n > 50 ? false : [-n, n + 10];
 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
 */
var unfold = /*#__PURE__*/(0, _curry3.default)(function unfold(fn, seed) {
  var pair = fn(seed);
  var result = [];
  while (pair && pair.length) {
    result[result.length] = pair[0];
    pair = fn(pair[1]);
  }
  return result;
});
exports.default = unfold;
},{"./internal/_curry2":262}],236:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _compose = require('./compose');

var _compose2 = _interopRequireDefault(_compose);

var _uniq = require('./uniq');

var _uniq2 = _interopRequireDefault(_uniq);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @example
 *
 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
 */
var union = /*#__PURE__*/(0, _curry3.default)( /*#__PURE__*/(0, _compose2.default)(_uniq2.default, _concat3.default));
exports.default = union;
},{"./internal/_concat":259,"./internal/_curry2":262,"./compose":41,"./uniq":238}],240:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _containsWith2 = require('./internal/_containsWith');

var _containsWith3 = _interopRequireDefault(_containsWith2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied predicate to
 * two list elements. Prefers the first item if two items compare equal based
 * on the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category List
 * @sig ((a, a) -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      var strEq = R.eqBy(String);
 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
 */
var uniqWith = /*#__PURE__*/(0, _curry3.default)(function uniqWith(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;
  while (idx < len) {
    item = list[idx];
    if (!(0, _containsWith3.default)(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
});
exports.default = uniqWith;
},{"./internal/_containsWith":281,"./internal/_curry2":262}],237:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _concat2 = require('./internal/_concat');

var _concat3 = _interopRequireDefault(_concat2);

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

var _uniqWith = require('./uniqWith');

var _uniqWith2 = _interopRequireDefault(_uniqWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list. Duplication is determined according to the value returned by
 * applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @see R.union
 * @example
 *
 *      var l1 = [{a: 1}, {a: 2}];
 *      var l2 = [{a: 1}, {a: 4}];
 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
 */
var unionWith = /*#__PURE__*/(0, _curry2.default)(function unionWith(pred, list1, list2) {
  return (0, _uniqWith2.default)(pred, (0, _concat3.default)(list1, list2));
});
exports.default = unionWith;
},{"./internal/_concat":259,"./internal/_curry3":261,"./uniqWith":240}],241:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when
 * @example
 *
 *      let safeInc = R.unless(R.isNil, R.inc);
 *      safeInc(null); //=> null
 *      safeInc(1); //=> 2
 */
var unless = /*#__PURE__*/(0, _curry2.default)(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});
exports.default = unless;
},{"./internal/_curry3":261}],242:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _identity2 = require('./internal/_identity');

var _identity3 = _interopRequireDefault(_identity2);

var _chain = require('./chain');

var _chain2 = _interopRequireDefault(_chain);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain c => c (c a) -> c a
 * @param {*} list
 * @return {*}
 * @see R.flatten, R.chain
 * @example
 *
 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
 */
var unnest = /*#__PURE__*/(0, _chain2.default)(_identity3.default);
exports.default = unnest;
},{"./internal/_identity":299,"./chain":36}],243:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a predicate, a transformation function, and an initial value,
 * and returns a value of the same type as the initial value.
 * It does so by applying the transformation until the predicate is satisfied,
 * at which point it returns the satisfactory value.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred A predicate function
 * @param {Function} fn The iterator function
 * @param {*} init Initial value
 * @return {*} Final value that satisfies predicate
 * @example
 *
 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
 */
var until = /*#__PURE__*/(0, _curry2.default)(function until(pred, fn, init) {
  var val = init;
  while (!pred(val)) {
    val = fn(val);
  }
  return val;
});
exports.default = until;
},{"./internal/_curry3":261}],247:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry1');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a list of all the properties, including prototype properties, of the
 * supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own and prototype properties.
 * @see R.values, R.keysIn
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.valuesIn(f); //=> ['X', 'Y']
 */
var valuesIn = /*#__PURE__*/(0, _curry2.default)(function valuesIn(obj) {
  var prop;
  var vs = [];
  for (prop in obj) {
    vs[vs.length] = obj[prop];
  }
  return vs;
});
exports.default = valuesIn;
},{"./internal/_curry1":260}],248:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// `Const` is a functor that effectively ignores the function given to `map`.
var Const = function (x) {
  return { value: x, 'fantasy-land/map': function () {
      return this;
    } };
};

/**
 * Returns a "view" of the given data structure, determined by the given lens.
 * The lens's focus determines which portion of the data structure is visible.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> s -> a
 * @param {Lens} lens
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});  //=> 1
 *      R.view(xLens, {x: 4, y: 2});  //=> 4
 */
var view = /*#__PURE__*/(0, _curry3.default)(function view(lens, x) {
  // Using `Const` effectively ignores the setter function of the `lens`,
  // leaving the value returned by the getter function unmodified.
  return lens(Const)(x).value;
});
exports.default = view;
},{"./internal/_curry2":262}],249:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is satisfied, the function will return the result of calling
 * the `whenTrueFn` function with the same argument. If the predicate is not
 * satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred       A predicate function
 * @param {Function} whenTrueFn A function to invoke when the `condition`
 *                              evaluates to a truthy value.
 * @param {*}        x          An object to test with the `pred` function and
 *                              pass to `whenTrueFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
 * @see R.ifElse, R.unless
 * @example
 *
 *      // truncate :: String -> String
 *      var truncate = R.when(
 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
 *        R.pipe(R.take(10), R.append('…'), R.join(''))
 *      );
 *      truncate('12345');         //=> '12345'
 *      truncate('0123456789ABC'); //=> '0123456789…'
 */
var when = /*#__PURE__*/(0, _curry2.default)(function when(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});
exports.default = when;
},{"./internal/_curry3":261}],250:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _has2 = require('./internal/_has');

var _has3 = _interopRequireDefault(_has2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec. Each of the spec's own properties must be a predicate function.
 * Each predicate is applied to the value of the corresponding property of the
 * test object. `where` returns true if all the predicates return true, false
 * otherwise.
 *
 * `where` is well suited to declaratively expressing constraints for other
 * functions such as [`filter`](#filter) and [`find`](#find).
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Object
 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propSatisfies, R.whereEq
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.where({
 *        a: R.equals('foo'),
 *        b: R.complement(R.equals('bar')),
 *        x: R.gt(R.__, 10),
 *        y: R.lt(R.__, 20)
 *      });
 *
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
 */
var where = /*#__PURE__*/(0, _curry3.default)(function where(spec, testObj) {
  for (var prop in spec) {
    if ((0, _has3.default)(prop, spec) && !spec[prop](testObj[prop])) {
      return false;
    }
  }
  return true;
});
exports.default = where;
},{"./internal/_curry2":262,"./internal/_has":269}],251:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _equals = require('./equals');

var _equals2 = _interopRequireDefault(_equals);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

var _where = require('./where');

var _where2 = _interopRequireDefault(_where);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec, false otherwise. An object satisfies the spec if, for each of the
 * spec's own properties, accessing that property of the object gives the same
 * value (in [`R.equals`](#equals) terms) as accessing that property of the
 * spec.
 *
 * `whereEq` is a specialization of [`where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @sig {String: *} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.propEq, R.where
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.whereEq({a: 1, b: 2});
 *
 *      pred({a: 1});              //=> false
 *      pred({a: 1, b: 2});        //=> true
 *      pred({a: 1, b: 2, c: 3});  //=> true
 *      pred({a: 1, b: 1});        //=> false
 */
var whereEq = /*#__PURE__*/(0, _curry3.default)(function whereEq(spec, testObj) {
  return (0, _where2.default)((0, _map2.default)(_equals2.default, spec), testObj);
});
exports.default = whereEq;
},{"./internal/_curry2":262,"./equals":72,"./map":125,"./where":250}],252:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _contains2 = require('./internal/_contains');

var _contains3 = _interopRequireDefault(_contains2);

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

var _flip = require('./flip');

var _flip2 = _interopRequireDefault(_flip);

var _reject = require('./reject');

var _reject2 = _interopRequireDefault(_reject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Returns a new list without values in the first argument.
 * [`R.equals`](#equals) is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @param {Array} list1 The values to be removed from `list2`.
 * @param {Array} list2 The array to remove values from.
 * @return {Array} The new array without values in `list1`.
 * @see R.transduce, R.difference
 * @example
 *
 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
 */
var without = /*#__PURE__*/(0, _curry3.default)(function (xs, list) {
  return (0, _reject2.default)((0, _flip2.default)(_contains3.default)(xs), list);
});
exports.default = without;
},{"./internal/_contains":278,"./internal/_curry2":262,"./flip":80,"./reject":192}],253:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new list out of the two supplied by creating each possible pair
 * from the lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The list made by combining each possible pair from
 *         `as` and `bs` into pairs (`[a, b]`).
 * @example
 *
 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
 */
var xprod = /*#__PURE__*/(0, _curry3.default)(function xprod(a, b) {
  // = xprodWith(prepend); (takes about 3 times as long...)
  var idx = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = [];
  while (idx < ilen) {
    j = 0;
    while (j < jlen) {
      result[result.length] = [a[idx], b[j]];
      j += 1;
    }
    idx += 1;
  }
  return result;
});
exports.default = xprod;
},{"./internal/_curry2":262}],254:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is truncated to the length of the
 * shorter of the two input lists.
 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
 * @example
 *
 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
 */
var zip = /*#__PURE__*/(0, _curry3.default)(function zip(a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }
  return rv;
});
exports.default = zip;
},{"./internal/_curry2":262}],255:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry2');

var _curry3 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new object out of a list of keys and a list of values.
 * Key/value pairing is truncated to the length of the shorter of the two lists.
 * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [String] -> [*] -> {String: *}
 * @param {Array} keys The array that will be properties on the output object.
 * @param {Array} values The list of values on the output object.
 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
 * @example
 *
 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
 */
var zipObj = /*#__PURE__*/(0, _curry3.default)(function zipObj(keys, values) {
  var idx = 0;
  var len = Math.min(keys.length, values.length);
  var out = {};
  while (idx < len) {
    out[keys[idx]] = values[idx];
    idx += 1;
  }
  return out;
});
exports.default = zipObj;
},{"./internal/_curry2":262}],256:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _curry = require('./internal/_curry3');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a new list out of the two supplied by applying the function to each
 * equally-positioned pair in the lists. The returned list is truncated to the
 * length of the shorter of the two input lists.
 *
 * @function
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> c) -> [a] -> [b] -> [c]
 * @param {Function} fn The function used to combine the two elements into one value.
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
 *         using `fn`.
 * @example
 *
 *      var f = (x, y) => {
 *        // ...
 *      };
 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
 */
var zipWith = /*#__PURE__*/(0, _curry2.default)(function zipWith(fn, a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }
  return rv;
});
exports.default = zipWith;
},{"./internal/_curry3":261}],9:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _F = require('./F');

Object.defineProperty(exports, 'F', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_F).default;
  }
});

var _T = require('./T');

Object.defineProperty(exports, 'T', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_T).default;
  }
});

var _ = require('./__');

Object.defineProperty(exports, '__', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_).default;
  }
});

var _add = require('./add');

Object.defineProperty(exports, 'add', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_add).default;
  }
});

var _addIndex = require('./addIndex');

Object.defineProperty(exports, 'addIndex', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_addIndex).default;
  }
});

var _adjust = require('./adjust');

Object.defineProperty(exports, 'adjust', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_adjust).default;
  }
});

var _all = require('./all');

Object.defineProperty(exports, 'all', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_all).default;
  }
});

var _allPass = require('./allPass');

Object.defineProperty(exports, 'allPass', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_allPass).default;
  }
});

var _always = require('./always');

Object.defineProperty(exports, 'always', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_always).default;
  }
});

var _and = require('./and');

Object.defineProperty(exports, 'and', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_and).default;
  }
});

var _any = require('./any');

Object.defineProperty(exports, 'any', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_any).default;
  }
});

var _anyPass = require('./anyPass');

Object.defineProperty(exports, 'anyPass', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_anyPass).default;
  }
});

var _ap = require('./ap');

Object.defineProperty(exports, 'ap', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_ap).default;
  }
});

var _aperture = require('./aperture');

Object.defineProperty(exports, 'aperture', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_aperture).default;
  }
});

var _append = require('./append');

Object.defineProperty(exports, 'append', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_append).default;
  }
});

var _apply = require('./apply');

Object.defineProperty(exports, 'apply', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_apply).default;
  }
});

var _applySpec = require('./applySpec');

Object.defineProperty(exports, 'applySpec', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_applySpec).default;
  }
});

var _applyTo = require('./applyTo');

Object.defineProperty(exports, 'applyTo', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_applyTo).default;
  }
});

var _ascend = require('./ascend');

Object.defineProperty(exports, 'ascend', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_ascend).default;
  }
});

var _assoc = require('./assoc');

Object.defineProperty(exports, 'assoc', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_assoc).default;
  }
});

var _assocPath = require('./assocPath');

Object.defineProperty(exports, 'assocPath', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_assocPath).default;
  }
});

var _binary = require('./binary');

Object.defineProperty(exports, 'binary', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_binary).default;
  }
});

var _bind = require('./bind');

Object.defineProperty(exports, 'bind', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_bind).default;
  }
});

var _both = require('./both');

Object.defineProperty(exports, 'both', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_both).default;
  }
});

var _call = require('./call');

Object.defineProperty(exports, 'call', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_call).default;
  }
});

var _chain = require('./chain');

Object.defineProperty(exports, 'chain', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_chain).default;
  }
});

var _clamp = require('./clamp');

Object.defineProperty(exports, 'clamp', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_clamp).default;
  }
});

var _clone = require('./clone');

Object.defineProperty(exports, 'clone', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_clone).default;
  }
});

var _comparator = require('./comparator');

Object.defineProperty(exports, 'comparator', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_comparator).default;
  }
});

var _complement = require('./complement');

Object.defineProperty(exports, 'complement', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_complement).default;
  }
});

var _compose = require('./compose');

Object.defineProperty(exports, 'compose', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_compose).default;
  }
});

var _composeK = require('./composeK');

Object.defineProperty(exports, 'composeK', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_composeK).default;
  }
});

var _composeP = require('./composeP');

Object.defineProperty(exports, 'composeP', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_composeP).default;
  }
});

var _concat = require('./concat');

Object.defineProperty(exports, 'concat', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_concat).default;
  }
});

var _cond = require('./cond');

Object.defineProperty(exports, 'cond', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_cond).default;
  }
});

var _construct = require('./construct');

Object.defineProperty(exports, 'construct', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_construct).default;
  }
});

var _constructN = require('./constructN');

Object.defineProperty(exports, 'constructN', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_constructN).default;
  }
});

var _contains = require('./contains');

Object.defineProperty(exports, 'contains', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_contains).default;
  }
});

var _converge = require('./converge');

Object.defineProperty(exports, 'converge', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_converge).default;
  }
});

var _countBy = require('./countBy');

Object.defineProperty(exports, 'countBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_countBy).default;
  }
});

var _curry = require('./curry');

Object.defineProperty(exports, 'curry', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_curry).default;
  }
});

var _curryN = require('./curryN');

Object.defineProperty(exports, 'curryN', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_curryN).default;
  }
});

var _dec = require('./dec');

Object.defineProperty(exports, 'dec', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dec).default;
  }
});

var _defaultTo = require('./defaultTo');

Object.defineProperty(exports, 'defaultTo', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_defaultTo).default;
  }
});

var _descend = require('./descend');

Object.defineProperty(exports, 'descend', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_descend).default;
  }
});

var _difference = require('./difference');

Object.defineProperty(exports, 'difference', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_difference).default;
  }
});

var _differenceWith = require('./differenceWith');

Object.defineProperty(exports, 'differenceWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_differenceWith).default;
  }
});

var _dissoc = require('./dissoc');

Object.defineProperty(exports, 'dissoc', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dissoc).default;
  }
});

var _dissocPath = require('./dissocPath');

Object.defineProperty(exports, 'dissocPath', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dissocPath).default;
  }
});

var _divide = require('./divide');

Object.defineProperty(exports, 'divide', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_divide).default;
  }
});

var _drop = require('./drop');

Object.defineProperty(exports, 'drop', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_drop).default;
  }
});

var _dropLast = require('./dropLast');

Object.defineProperty(exports, 'dropLast', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dropLast).default;
  }
});

var _dropLastWhile = require('./dropLastWhile');

Object.defineProperty(exports, 'dropLastWhile', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dropLastWhile).default;
  }
});

var _dropRepeats = require('./dropRepeats');

Object.defineProperty(exports, 'dropRepeats', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dropRepeats).default;
  }
});

var _dropRepeatsWith = require('./dropRepeatsWith');

Object.defineProperty(exports, 'dropRepeatsWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dropRepeatsWith).default;
  }
});

var _dropWhile = require('./dropWhile');

Object.defineProperty(exports, 'dropWhile', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_dropWhile).default;
  }
});

var _either = require('./either');

Object.defineProperty(exports, 'either', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_either).default;
  }
});

var _empty = require('./empty');

Object.defineProperty(exports, 'empty', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_empty).default;
  }
});

var _endsWith = require('./endsWith');

Object.defineProperty(exports, 'endsWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_endsWith).default;
  }
});

var _eqBy = require('./eqBy');

Object.defineProperty(exports, 'eqBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_eqBy).default;
  }
});

var _eqProps = require('./eqProps');

Object.defineProperty(exports, 'eqProps', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_eqProps).default;
  }
});

var _equals = require('./equals');

Object.defineProperty(exports, 'equals', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_equals).default;
  }
});

var _evolve = require('./evolve');

Object.defineProperty(exports, 'evolve', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_evolve).default;
  }
});

var _filter = require('./filter');

Object.defineProperty(exports, 'filter', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_filter).default;
  }
});

var _find = require('./find');

Object.defineProperty(exports, 'find', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_find).default;
  }
});

var _findIndex = require('./findIndex');

Object.defineProperty(exports, 'findIndex', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_findIndex).default;
  }
});

var _findLast = require('./findLast');

Object.defineProperty(exports, 'findLast', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_findLast).default;
  }
});

var _findLastIndex = require('./findLastIndex');

Object.defineProperty(exports, 'findLastIndex', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_findLastIndex).default;
  }
});

var _flatten = require('./flatten');

Object.defineProperty(exports, 'flatten', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_flatten).default;
  }
});

var _flip = require('./flip');

Object.defineProperty(exports, 'flip', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_flip).default;
  }
});

var _forEach = require('./forEach');

Object.defineProperty(exports, 'forEach', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_forEach).default;
  }
});

var _forEachObjIndexed = require('./forEachObjIndexed');

Object.defineProperty(exports, 'forEachObjIndexed', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_forEachObjIndexed).default;
  }
});

var _fromPairs = require('./fromPairs');

Object.defineProperty(exports, 'fromPairs', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_fromPairs).default;
  }
});

var _groupBy = require('./groupBy');

Object.defineProperty(exports, 'groupBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_groupBy).default;
  }
});

var _groupWith = require('./groupWith');

Object.defineProperty(exports, 'groupWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_groupWith).default;
  }
});

var _gt = require('./gt');

Object.defineProperty(exports, 'gt', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_gt).default;
  }
});

var _gte = require('./gte');

Object.defineProperty(exports, 'gte', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_gte).default;
  }
});

var _has = require('./has');

Object.defineProperty(exports, 'has', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_has).default;
  }
});

var _hasIn = require('./hasIn');

Object.defineProperty(exports, 'hasIn', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_hasIn).default;
  }
});

var _head = require('./head');

Object.defineProperty(exports, 'head', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_head).default;
  }
});

var _identical = require('./identical');

Object.defineProperty(exports, 'identical', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_identical).default;
  }
});

var _identity = require('./identity');

Object.defineProperty(exports, 'identity', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_identity).default;
  }
});

var _ifElse = require('./ifElse');

Object.defineProperty(exports, 'ifElse', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_ifElse).default;
  }
});

var _inc = require('./inc');

Object.defineProperty(exports, 'inc', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_inc).default;
  }
});

var _indexBy = require('./indexBy');

Object.defineProperty(exports, 'indexBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_indexBy).default;
  }
});

var _indexOf = require('./indexOf');

Object.defineProperty(exports, 'indexOf', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_indexOf).default;
  }
});

var _init = require('./init');

Object.defineProperty(exports, 'init', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_init).default;
  }
});

var _innerJoin = require('./innerJoin');

Object.defineProperty(exports, 'innerJoin', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_innerJoin).default;
  }
});

var _insert = require('./insert');

Object.defineProperty(exports, 'insert', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_insert).default;
  }
});

var _insertAll = require('./insertAll');

Object.defineProperty(exports, 'insertAll', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_insertAll).default;
  }
});

var _intersection = require('./intersection');

Object.defineProperty(exports, 'intersection', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_intersection).default;
  }
});

var _intersperse = require('./intersperse');

Object.defineProperty(exports, 'intersperse', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_intersperse).default;
  }
});

var _into = require('./into');

Object.defineProperty(exports, 'into', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_into).default;
  }
});

var _invert = require('./invert');

Object.defineProperty(exports, 'invert', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_invert).default;
  }
});

var _invertObj = require('./invertObj');

Object.defineProperty(exports, 'invertObj', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_invertObj).default;
  }
});

var _invoker = require('./invoker');

Object.defineProperty(exports, 'invoker', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_invoker).default;
  }
});

var _is = require('./is');

Object.defineProperty(exports, 'is', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_is).default;
  }
});

var _isEmpty = require('./isEmpty');

Object.defineProperty(exports, 'isEmpty', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_isEmpty).default;
  }
});

var _isNil = require('./isNil');

Object.defineProperty(exports, 'isNil', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_isNil).default;
  }
});

var _join = require('./join');

Object.defineProperty(exports, 'join', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_join).default;
  }
});

var _juxt = require('./juxt');

Object.defineProperty(exports, 'juxt', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_juxt).default;
  }
});

var _keys = require('./keys');

Object.defineProperty(exports, 'keys', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_keys).default;
  }
});

var _keysIn = require('./keysIn');

Object.defineProperty(exports, 'keysIn', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_keysIn).default;
  }
});

var _last = require('./last');

Object.defineProperty(exports, 'last', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_last).default;
  }
});

var _lastIndexOf = require('./lastIndexOf');

Object.defineProperty(exports, 'lastIndexOf', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lastIndexOf).default;
  }
});

var _length = require('./length');

Object.defineProperty(exports, 'length', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_length).default;
  }
});

var _lens = require('./lens');

Object.defineProperty(exports, 'lens', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lens).default;
  }
});

var _lensIndex = require('./lensIndex');

Object.defineProperty(exports, 'lensIndex', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lensIndex).default;
  }
});

var _lensPath = require('./lensPath');

Object.defineProperty(exports, 'lensPath', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lensPath).default;
  }
});

var _lensProp = require('./lensProp');

Object.defineProperty(exports, 'lensProp', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lensProp).default;
  }
});

var _lift = require('./lift');

Object.defineProperty(exports, 'lift', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lift).default;
  }
});

var _liftN = require('./liftN');

Object.defineProperty(exports, 'liftN', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_liftN).default;
  }
});

var _lt = require('./lt');

Object.defineProperty(exports, 'lt', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lt).default;
  }
});

var _lte = require('./lte');

Object.defineProperty(exports, 'lte', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_lte).default;
  }
});

var _map = require('./map');

Object.defineProperty(exports, 'map', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_map).default;
  }
});

var _mapAccum = require('./mapAccum');

Object.defineProperty(exports, 'mapAccum', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mapAccum).default;
  }
});

var _mapAccumRight = require('./mapAccumRight');

Object.defineProperty(exports, 'mapAccumRight', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mapAccumRight).default;
  }
});

var _mapObjIndexed = require('./mapObjIndexed');

Object.defineProperty(exports, 'mapObjIndexed', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mapObjIndexed).default;
  }
});

var _match = require('./match');

Object.defineProperty(exports, 'match', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_match).default;
  }
});

var _mathMod = require('./mathMod');

Object.defineProperty(exports, 'mathMod', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mathMod).default;
  }
});

var _max = require('./max');

Object.defineProperty(exports, 'max', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_max).default;
  }
});

var _maxBy = require('./maxBy');

Object.defineProperty(exports, 'maxBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_maxBy).default;
  }
});

var _mean = require('./mean');

Object.defineProperty(exports, 'mean', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mean).default;
  }
});

var _median = require('./median');

Object.defineProperty(exports, 'median', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_median).default;
  }
});

var _memoize = require('./memoize');

Object.defineProperty(exports, 'memoize', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_memoize).default;
  }
});

var _memoizeWith = require('./memoizeWith');

Object.defineProperty(exports, 'memoizeWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_memoizeWith).default;
  }
});

var _merge = require('./merge');

Object.defineProperty(exports, 'merge', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_merge).default;
  }
});

var _mergeAll = require('./mergeAll');

Object.defineProperty(exports, 'mergeAll', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeAll).default;
  }
});

var _mergeDeepLeft = require('./mergeDeepLeft');

Object.defineProperty(exports, 'mergeDeepLeft', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeDeepLeft).default;
  }
});

var _mergeDeepRight = require('./mergeDeepRight');

Object.defineProperty(exports, 'mergeDeepRight', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeDeepRight).default;
  }
});

var _mergeDeepWith = require('./mergeDeepWith');

Object.defineProperty(exports, 'mergeDeepWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeDeepWith).default;
  }
});

var _mergeDeepWithKey = require('./mergeDeepWithKey');

Object.defineProperty(exports, 'mergeDeepWithKey', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeDeepWithKey).default;
  }
});

var _mergeWith = require('./mergeWith');

Object.defineProperty(exports, 'mergeWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeWith).default;
  }
});

var _mergeWithKey = require('./mergeWithKey');

Object.defineProperty(exports, 'mergeWithKey', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_mergeWithKey).default;
  }
});

var _min = require('./min');

Object.defineProperty(exports, 'min', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_min).default;
  }
});

var _minBy = require('./minBy');

Object.defineProperty(exports, 'minBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_minBy).default;
  }
});

var _modulo = require('./modulo');

Object.defineProperty(exports, 'modulo', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_modulo).default;
  }
});

var _multiply = require('./multiply');

Object.defineProperty(exports, 'multiply', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_multiply).default;
  }
});

var _nAry = require('./nAry');

Object.defineProperty(exports, 'nAry', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_nAry).default;
  }
});

var _negate = require('./negate');

Object.defineProperty(exports, 'negate', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_negate).default;
  }
});

var _none = require('./none');

Object.defineProperty(exports, 'none', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_none).default;
  }
});

var _not = require('./not');

Object.defineProperty(exports, 'not', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_not).default;
  }
});

var _nth = require('./nth');

Object.defineProperty(exports, 'nth', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_nth).default;
  }
});

var _nthArg = require('./nthArg');

Object.defineProperty(exports, 'nthArg', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_nthArg).default;
  }
});

var _o = require('./o');

Object.defineProperty(exports, 'o', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_o).default;
  }
});

var _objOf = require('./objOf');

Object.defineProperty(exports, 'objOf', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_objOf).default;
  }
});

var _of = require('./of');

Object.defineProperty(exports, 'of', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_of).default;
  }
});

var _omit = require('./omit');

Object.defineProperty(exports, 'omit', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_omit).default;
  }
});

var _once = require('./once');

Object.defineProperty(exports, 'once', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_once).default;
  }
});

var _or = require('./or');

Object.defineProperty(exports, 'or', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_or).default;
  }
});

var _over = require('./over');

Object.defineProperty(exports, 'over', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_over).default;
  }
});

var _pair = require('./pair');

Object.defineProperty(exports, 'pair', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pair).default;
  }
});

var _partial = require('./partial');

Object.defineProperty(exports, 'partial', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_partial).default;
  }
});

var _partialRight = require('./partialRight');

Object.defineProperty(exports, 'partialRight', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_partialRight).default;
  }
});

var _partition = require('./partition');

Object.defineProperty(exports, 'partition', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_partition).default;
  }
});

var _path = require('./path');

Object.defineProperty(exports, 'path', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_path).default;
  }
});

var _pathEq = require('./pathEq');

Object.defineProperty(exports, 'pathEq', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pathEq).default;
  }
});

var _pathOr = require('./pathOr');

Object.defineProperty(exports, 'pathOr', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pathOr).default;
  }
});

var _pathSatisfies = require('./pathSatisfies');

Object.defineProperty(exports, 'pathSatisfies', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pathSatisfies).default;
  }
});

var _pick = require('./pick');

Object.defineProperty(exports, 'pick', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pick).default;
  }
});

var _pickAll = require('./pickAll');

Object.defineProperty(exports, 'pickAll', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pickAll).default;
  }
});

var _pickBy = require('./pickBy');

Object.defineProperty(exports, 'pickBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pickBy).default;
  }
});

var _pipe = require('./pipe');

Object.defineProperty(exports, 'pipe', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pipe).default;
  }
});

var _pipeK = require('./pipeK');

Object.defineProperty(exports, 'pipeK', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pipeK).default;
  }
});

var _pipeP = require('./pipeP');

Object.defineProperty(exports, 'pipeP', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pipeP).default;
  }
});

var _pluck = require('./pluck');

Object.defineProperty(exports, 'pluck', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_pluck).default;
  }
});

var _prepend = require('./prepend');

Object.defineProperty(exports, 'prepend', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_prepend).default;
  }
});

var _product = require('./product');

Object.defineProperty(exports, 'product', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_product).default;
  }
});

var _project = require('./project');

Object.defineProperty(exports, 'project', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_project).default;
  }
});

var _prop = require('./prop');

Object.defineProperty(exports, 'prop', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_prop).default;
  }
});

var _propEq = require('./propEq');

Object.defineProperty(exports, 'propEq', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_propEq).default;
  }
});

var _propIs = require('./propIs');

Object.defineProperty(exports, 'propIs', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_propIs).default;
  }
});

var _propOr = require('./propOr');

Object.defineProperty(exports, 'propOr', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_propOr).default;
  }
});

var _propSatisfies = require('./propSatisfies');

Object.defineProperty(exports, 'propSatisfies', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_propSatisfies).default;
  }
});

var _props = require('./props');

Object.defineProperty(exports, 'props', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_props).default;
  }
});

var _range = require('./range');

Object.defineProperty(exports, 'range', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_range).default;
  }
});

var _reduce = require('./reduce');

Object.defineProperty(exports, 'reduce', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reduce).default;
  }
});

var _reduceBy = require('./reduceBy');

Object.defineProperty(exports, 'reduceBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reduceBy).default;
  }
});

var _reduceRight = require('./reduceRight');

Object.defineProperty(exports, 'reduceRight', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reduceRight).default;
  }
});

var _reduceWhile = require('./reduceWhile');

Object.defineProperty(exports, 'reduceWhile', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reduceWhile).default;
  }
});

var _reduced = require('./reduced');

Object.defineProperty(exports, 'reduced', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reduced).default;
  }
});

var _reject = require('./reject');

Object.defineProperty(exports, 'reject', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reject).default;
  }
});

var _remove = require('./remove');

Object.defineProperty(exports, 'remove', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_remove).default;
  }
});

var _repeat = require('./repeat');

Object.defineProperty(exports, 'repeat', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_repeat).default;
  }
});

var _replace = require('./replace');

Object.defineProperty(exports, 'replace', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_replace).default;
  }
});

var _reverse = require('./reverse');

Object.defineProperty(exports, 'reverse', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_reverse).default;
  }
});

var _scan = require('./scan');

Object.defineProperty(exports, 'scan', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_scan).default;
  }
});

var _sequence = require('./sequence');

Object.defineProperty(exports, 'sequence', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_sequence).default;
  }
});

var _set = require('./set');

Object.defineProperty(exports, 'set', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_set).default;
  }
});

var _slice = require('./slice');

Object.defineProperty(exports, 'slice', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_slice).default;
  }
});

var _sort = require('./sort');

Object.defineProperty(exports, 'sort', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_sort).default;
  }
});

var _sortBy = require('./sortBy');

Object.defineProperty(exports, 'sortBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_sortBy).default;
  }
});

var _sortWith = require('./sortWith');

Object.defineProperty(exports, 'sortWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_sortWith).default;
  }
});

var _split = require('./split');

Object.defineProperty(exports, 'split', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_split).default;
  }
});

var _splitAt = require('./splitAt');

Object.defineProperty(exports, 'splitAt', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_splitAt).default;
  }
});

var _splitEvery = require('./splitEvery');

Object.defineProperty(exports, 'splitEvery', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_splitEvery).default;
  }
});

var _splitWhen = require('./splitWhen');

Object.defineProperty(exports, 'splitWhen', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_splitWhen).default;
  }
});

var _startsWith = require('./startsWith');

Object.defineProperty(exports, 'startsWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_startsWith).default;
  }
});

var _subtract = require('./subtract');

Object.defineProperty(exports, 'subtract', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_subtract).default;
  }
});

var _sum = require('./sum');

Object.defineProperty(exports, 'sum', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_sum).default;
  }
});

var _symmetricDifference = require('./symmetricDifference');

Object.defineProperty(exports, 'symmetricDifference', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_symmetricDifference).default;
  }
});

var _symmetricDifferenceWith = require('./symmetricDifferenceWith');

Object.defineProperty(exports, 'symmetricDifferenceWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_symmetricDifferenceWith).default;
  }
});

var _tail = require('./tail');

Object.defineProperty(exports, 'tail', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_tail).default;
  }
});

var _take = require('./take');

Object.defineProperty(exports, 'take', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_take).default;
  }
});

var _takeLast = require('./takeLast');

Object.defineProperty(exports, 'takeLast', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_takeLast).default;
  }
});

var _takeLastWhile = require('./takeLastWhile');

Object.defineProperty(exports, 'takeLastWhile', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_takeLastWhile).default;
  }
});

var _takeWhile = require('./takeWhile');

Object.defineProperty(exports, 'takeWhile', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_takeWhile).default;
  }
});

var _tap = require('./tap');

Object.defineProperty(exports, 'tap', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_tap).default;
  }
});

var _test = require('./test');

Object.defineProperty(exports, 'test', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_test).default;
  }
});

var _times = require('./times');

Object.defineProperty(exports, 'times', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_times).default;
  }
});

var _toLower = require('./toLower');

Object.defineProperty(exports, 'toLower', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_toLower).default;
  }
});

var _toPairs = require('./toPairs');

Object.defineProperty(exports, 'toPairs', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_toPairs).default;
  }
});

var _toPairsIn = require('./toPairsIn');

Object.defineProperty(exports, 'toPairsIn', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_toPairsIn).default;
  }
});

var _toString = require('./toString');

Object.defineProperty(exports, 'toString', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_toString).default;
  }
});

var _toUpper = require('./toUpper');

Object.defineProperty(exports, 'toUpper', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_toUpper).default;
  }
});

var _transduce = require('./transduce');

Object.defineProperty(exports, 'transduce', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_transduce).default;
  }
});

var _transpose = require('./transpose');

Object.defineProperty(exports, 'transpose', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_transpose).default;
  }
});

var _traverse = require('./traverse');

Object.defineProperty(exports, 'traverse', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_traverse).default;
  }
});

var _trim = require('./trim');

Object.defineProperty(exports, 'trim', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_trim).default;
  }
});

var _tryCatch = require('./tryCatch');

Object.defineProperty(exports, 'tryCatch', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_tryCatch).default;
  }
});

var _type = require('./type');

Object.defineProperty(exports, 'type', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_type).default;
  }
});

var _unapply = require('./unapply');

Object.defineProperty(exports, 'unapply', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_unapply).default;
  }
});

var _unary = require('./unary');

Object.defineProperty(exports, 'unary', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_unary).default;
  }
});

var _uncurryN = require('./uncurryN');

Object.defineProperty(exports, 'uncurryN', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_uncurryN).default;
  }
});

var _unfold = require('./unfold');

Object.defineProperty(exports, 'unfold', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_unfold).default;
  }
});

var _union = require('./union');

Object.defineProperty(exports, 'union', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_union).default;
  }
});

var _unionWith = require('./unionWith');

Object.defineProperty(exports, 'unionWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_unionWith).default;
  }
});

var _uniq = require('./uniq');

Object.defineProperty(exports, 'uniq', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_uniq).default;
  }
});

var _uniqBy = require('./uniqBy');

Object.defineProperty(exports, 'uniqBy', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_uniqBy).default;
  }
});

var _uniqWith = require('./uniqWith');

Object.defineProperty(exports, 'uniqWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_uniqWith).default;
  }
});

var _unless = require('./unless');

Object.defineProperty(exports, 'unless', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_unless).default;
  }
});

var _unnest = require('./unnest');

Object.defineProperty(exports, 'unnest', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_unnest).default;
  }
});

var _until = require('./until');

Object.defineProperty(exports, 'until', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_until).default;
  }
});

var _update = require('./update');

Object.defineProperty(exports, 'update', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_update).default;
  }
});

var _useWith = require('./useWith');

Object.defineProperty(exports, 'useWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_useWith).default;
  }
});

var _values = require('./values');

Object.defineProperty(exports, 'values', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_values).default;
  }
});

var _valuesIn = require('./valuesIn');

Object.defineProperty(exports, 'valuesIn', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_valuesIn).default;
  }
});

var _view = require('./view');

Object.defineProperty(exports, 'view', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_view).default;
  }
});

var _when = require('./when');

Object.defineProperty(exports, 'when', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_when).default;
  }
});

var _where = require('./where');

Object.defineProperty(exports, 'where', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_where).default;
  }
});

var _whereEq = require('./whereEq');

Object.defineProperty(exports, 'whereEq', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_whereEq).default;
  }
});

var _without = require('./without');

Object.defineProperty(exports, 'without', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_without).default;
  }
});

var _xprod = require('./xprod');

Object.defineProperty(exports, 'xprod', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_xprod).default;
  }
});

var _zip = require('./zip');

Object.defineProperty(exports, 'zip', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_zip).default;
  }
});

var _zipObj = require('./zipObj');

Object.defineProperty(exports, 'zipObj', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_zipObj).default;
  }
});

var _zipWith = require('./zipWith');

Object.defineProperty(exports, 'zipWith', {
  enumerable: true,
  get: function () {
    return _interopRequireDefault(_zipWith).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./F":11,"./T":12,"./__":13,"./add":14,"./addIndex":15,"./adjust":16,"./all":17,"./allPass":18,"./always":19,"./and":20,"./any":21,"./anyPass":22,"./ap":23,"./aperture":24,"./append":25,"./apply":26,"./applySpec":27,"./applyTo":28,"./ascend":29,"./assoc":30,"./assocPath":31,"./binary":32,"./bind":33,"./both":34,"./call":35,"./chain":36,"./clamp":37,"./clone":38,"./comparator":39,"./complement":40,"./compose":41,"./composeK":42,"./composeP":43,"./concat":44,"./cond":45,"./construct":46,"./constructN":47,"./contains":48,"./converge":49,"./countBy":50,"./curry":51,"./curryN":52,"./dec":53,"./defaultTo":54,"./descend":55,"./difference":56,"./differenceWith":57,"./dissoc":58,"./dissocPath":59,"./divide":60,"./drop":61,"./dropLast":62,"./dropLastWhile":63,"./dropRepeats":64,"./dropRepeatsWith":65,"./dropWhile":66,"./either":67,"./empty":68,"./endsWith":69,"./eqBy":70,"./eqProps":71,"./equals":72,"./evolve":73,"./filter":74,"./find":75,"./findIndex":76,"./findLast":77,"./findLastIndex":78,"./flatten":79,"./flip":80,"./forEach":81,"./forEachObjIndexed":82,"./fromPairs":83,"./groupBy":84,"./groupWith":85,"./gt":86,"./gte":87,"./has":88,"./hasIn":89,"./head":90,"./identical":91,"./identity":92,"./ifElse":93,"./inc":94,"./indexBy":95,"./indexOf":96,"./init":97,"./innerJoin":98,"./insert":99,"./insertAll":100,"./intersection":101,"./intersperse":102,"./into":103,"./invert":104,"./invertObj":105,"./invoker":106,"./is":107,"./isEmpty":108,"./isNil":109,"./join":110,"./juxt":111,"./keys":112,"./keysIn":113,"./last":114,"./lastIndexOf":115,"./length":116,"./lens":117,"./lensIndex":118,"./lensPath":119,"./lensProp":120,"./lift":121,"./liftN":122,"./lt":123,"./lte":124,"./map":125,"./mapAccum":126,"./mapAccumRight":127,"./mapObjIndexed":128,"./match":129,"./mathMod":130,"./max":131,"./maxBy":132,"./mean":133,"./median":134,"./memoize":135,"./memoizeWith":136,"./merge":137,"./mergeAll":138,"./mergeDeepLeft":139,"./mergeDeepRight":140,"./mergeDeepWith":141,"./mergeDeepWithKey":142,"./mergeWith":143,"./mergeWithKey":144,"./min":145,"./minBy":146,"./modulo":147,"./multiply":148,"./nAry":149,"./negate":150,"./none":151,"./not":152,"./nth":153,"./nthArg":154,"./o":155,"./objOf":156,"./of":157,"./omit":158,"./once":159,"./or":160,"./over":161,"./pair":162,"./partial":163,"./partialRight":164,"./partition":165,"./path":166,"./pathEq":167,"./pathOr":168,"./pathSatisfies":169,"./pick":170,"./pickAll":171,"./pickBy":172,"./pipe":173,"./pipeK":174,"./pipeP":175,"./pluck":176,"./prepend":177,"./product":178,"./project":179,"./prop":180,"./propEq":181,"./propIs":182,"./propOr":183,"./propSatisfies":184,"./props":185,"./range":186,"./reduce":187,"./reduceBy":188,"./reduceRight":189,"./reduceWhile":190,"./reduced":191,"./reject":192,"./remove":193,"./repeat":194,"./replace":195,"./reverse":196,"./scan":197,"./sequence":198,"./set":199,"./slice":200,"./sort":201,"./sortBy":202,"./sortWith":203,"./split":204,"./splitAt":205,"./splitEvery":206,"./splitWhen":207,"./startsWith":208,"./subtract":209,"./sum":210,"./symmetricDifference":211,"./symmetricDifferenceWith":212,"./tail":213,"./take":214,"./takeLast":215,"./takeLastWhile":216,"./takeWhile":217,"./tap":218,"./test":219,"./times":220,"./toLower":221,"./toPairs":222,"./toPairsIn":223,"./toString":224,"./toUpper":225,"./transduce":226,"./transpose":227,"./traverse":228,"./trim":229,"./tryCatch":230,"./type":231,"./unapply":232,"./unary":233,"./uncurryN":234,"./unfold":235,"./union":236,"./unionWith":237,"./uniq":238,"./uniqBy":239,"./uniqWith":240,"./unless":241,"./unnest":242,"./until":243,"./update":244,"./useWith":245,"./values":246,"./valuesIn":247,"./view":248,"./when":249,"./where":250,"./whereEq":251,"./without":252,"./xprod":253,"./zip":254,"./zipObj":255,"./zipWith":256}],8:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * https://www.youtube.com/watch?v=UK16ttNfGSk
 * https://cs.nyu.edu/courses/Fall12/CSCI-GA.1133-002/notes/InfixToPostfixExamples.pdf
 * Algorithm: https://www.youtube.com/watch?v=OVFwgYrMShw
 * https://en.wikipedia.org/wiki/Shunting-yard_algorithm
 * https://www.youtube.com/watch?v=y_snKkv0gWc
 */

/**
 * Change parenthesis orientation
 * @param  {Array} expression.
 */
var changeParenthesis = function changeParenthesis(expression) {
  return expression.map(function (value) {
    if (value === ')') {
      return '(';
    } else if (value === '(') {
      return ')';
    }
    return value;
  });
};
/**
 * @param  {String} token. Get hierarchical level to
 * handle operations in stack
 */
var getPrecedence = function getPrecedence(token) {
  switch (token) {
    case '*':
    case '/':
      return 2;
    case '+':
    case '-':
      return 1;
    default:
      return 0;
  }
};
/**
 * @param  {String} token. Check if a token is a left o right parenthesis
 */
var isPts = function isPts(token) {
  return token === '(' || token === ')';
};

/**
 * @param  {Array} stack. Array of arithmetic operators.
 */
var comparePrecedence = function comparePrecedence(stack) {
  var stackValueB = stack.pop();
  var stackValueA = stack.pop();

  var evalA = getPrecedence(stackValueA);
  var evalB = getPrecedence(stackValueB);

  if (evalA > evalB || evalA === evalB) {
    stack.push(stackValueB);
    return stackValueA;
  } else {
    stack.push(stackValueA);
    stack.push(stackValueB);
  }
};

/**
 * @param  {Array} stack. Arithmetic tokens
 * @param  {Array} output. Postfix result array.
 */
var checkStack = function checkStack(stack, output) {
  if (stack.length > 1) {
    if (!isPts(stack[stack.length - 2]) && !isPts(stack[stack.length - 1])) {
      var operator = comparePrecedence(stack);
      if (operator) output.push(operator);
    }
  }
};

/**
 * @param  {Array} stack.
 * @param  {Array} output.
 */
var parenthesisOperatorsToStack = function parenthesisOperatorsToStack(stack, output) {
  var index = stack.lastIndexOf('(');
  var body = stack.slice(0, index);
  var tail = stack.slice(index + 1, stack.length);
  tail.reverse().map(function (token) {
    return output.push(token);
  });
  return body;
};

/**
 * @param  {String} value. Current value from input array
 * @param  {Array} stack.
 * @param  {Array} output.
 */
var checkAndUpdateStack = function checkAndUpdateStack(value, stack, output) {
  // get arithmetic expression and push it on output array.
  // pop all surrounding operators over parenthesis
  if (value === ')') {
    return parenthesisOperatorsToStack(stack, output);
  }

  stack.push(value);
  return stack;
};

/**
 * @param  {Array} expression. Input array of tokens and numeric values
 */
var shuntingYard = function shuntingYard(expression) {

  var stack = [];
  var output = [];

  expression.map(function (value, i) {
    // require('child_process').spawnSync("read _ ", {shell: true, stdio: [0, 1, 2]}) to debugger
    if (isNaN(value)) {
      stack = checkAndUpdateStack(value, stack, output);
    } else {
      output.push(value);
    }
    checkStack(stack, output);
    // console.log('temp ' + i, stack, output)
  });

  if (stack.length > 0) {
    var orderStack = stack.reverse();
    output = [].concat(_toConsumableArray(output), _toConsumableArray(orderStack));
  }

  return output;
};

/**
 * @param  {string} expression. infix expression
 */
var infixToPostfix = function infixToPostfix(expression) {
  var input = expression.replace(/\s/g, "");
  input = [].concat(_toConsumableArray(input));
  return shuntingYard(input);
};

/**
 * @param  {string} expression. infix expression
 */
var infixToPrefix = function infixToPrefix(expression) {
  var input = expression.replace(/\s/g, "");
  input = changeParenthesis([].concat(_toConsumableArray(input))).reverse();
  return shuntingYard(input).reverse();
};

exports.infixToPostfix = infixToPostfix;
exports.infixToPrefix = infixToPrefix;
},{}],6:[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createTree = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _shuntingYard = require('./shuntingYard.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var node = function node(value, level) {
    var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    return left && right ? { value: value, level: level, left: left, right: right } : { value: value, level: level };
};

var buildNode = function buildNode(tokens, level) {
    var _tokens = _toArray(tokens),
        head = _tokens[0],
        tail = _tokens.slice(1);

    return R.test(/[+,*,\-,\/]/, head) ? buildTree(tokens, level + 1) : [node(head, level + 1), tail];
};

var buildTree = function buildTree(tokens, level) {
    var _tokens2 = _toArray(tokens),
        value = _tokens2[0],
        mTail = _tokens2.slice(1);

    var _buildNode = buildNode(mTail, level),
        _buildNode2 = _slicedToArray(_buildNode, 2),
        left = _buildNode2[0],
        lTail = _buildNode2[1];

    var _buildNode3 = buildNode(lTail, level),
        _buildNode4 = _slicedToArray(_buildNode3, 2),
        right = _buildNode4[0],
        rTail = _buildNode4[1];

    return [node(value, level, left, right), rTail];
};

var createTree = function createTree(expr) {
    var tokens = (0, _shuntingYard.infixToPrefix)(expr);

    var _buildTree = buildTree(tokens, 0),
        _buildTree2 = _slicedToArray(_buildTree, 1),
        tree = _buildTree2[0];

    return tree;
};

// const tree = createTree("(1 + (5 * (2 - 1))) + (6 / 2)")

// console.log(JSON.stringify(tree, null, 2))

exports.createTree = createTree;
},{"ramda":9,"./shuntingYard.js":8}],5:[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _operationTree = require("../algorithms/operationTree");

var removeLevels = function removeLevels(nodes) {
  nodes.map(function (node) {
    return delete node.data.level;
  });
};

var getTree = function getTree(input) {
  var nodes = [];
  var tree = (0, _operationTree.createTree)(input);
  tree = JSON.parse(JSON.stringify(tree, null, 2));

  search(tree, nodes);
  var edges = makeEdges(nodes);
  removeLevels(nodes);

  return {
    nodes: nodes,
    edges: edges
  };
};

var search = function search(tree, nodes) {

  if (tree.level === 0) nodes.push({
    group: "nodes",
    data: {
      name: tree.value,
      level: tree.level
    }
  });

  if (tree.left) {
    nodes.push(search(tree.left, nodes));
  }

  if (tree.right) {
    nodes.push(search(tree.right, nodes));
  }

  return {
    group: "nodes",
    data: {
      name: tree.value,
      level: tree.level
    }
  };
};

var makeEdges = function makeEdges(nodes) {
  var edges = [];
  var parent = nodes[0];

  nodes.sort(function (a, b) {
    return a.data.level - b.data.level;
  }).map(function (node, i) {
    return node.data.id = i.toString();
  });

  for (var i = 1; i < nodes.length; i += 2) {
    var left = {
      group: "edges",
      data: {
        source: parent.data.id,
        target: nodes[i].data.id
      }
    };
    var right = {
      group: "edges",
      data: {
        source: parent.data.id,
        target: nodes[i + 1].data.id

      }
    };
    edges.push(left);
    edges.push(right);

    if (isNaN(nodes[i].data.name)) {
      parent = nodes[i];
    } else {
      parent = nodes[i + 1];
    }
  }

  return edges;
};

exports.default = getTree;
},{"../algorithms/operationTree":6}],3:[function(require,module,exports) {
'use strict';

var _graph = require('./graph');

var _graph2 = _interopRequireDefault(_graph);

var _utils = require('./graph/utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.onload = function () {
  var form = document.querySelector("form");
  form.onsubmit = submitted.bind(form);
};

var submitted = function submitted(ev) {
  ev.preventDefault();
  _graph2.default.remove(_graph2.default.elements());
  var value = ev.target.elements[0].value;

  var tree = (0, _utils2.default)(value);
  _graph2.default.add(tree.nodes);
  _graph2.default.add(tree.edges);
  var layout = _graph2.default.layout({
    name: 'dagre'
  });
  layout.run();
};
},{"./graph":10,"./graph/utils":5}],395:[function(require,module,exports) {

var OVERLAY_ID = '__parcel__error__overlay__';

var global = (1, eval)('this');
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };

  module.bundle.hotData = null;
}

module.bundle.Module = Module;

var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = '' || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + '43553' + '/');
  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });

      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');

      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);

      removeErrorOverlay();

      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;

  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';

  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(+k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);

  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},[395,3])
//# sourceMappingURL=/src.ae5663f0.map